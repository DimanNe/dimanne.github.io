{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"MkDocs","text":"<p>For full documentation visit mkdocs.org.</p> <p>Docker: <pre><code>sudo pip3 install mkdocs-material jinja2==3.0.3\nmkdocs serve --dev-addr 172.17.0.5:80\n</code></pre></p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve --dev-addr 172.17.0.5:80</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul> <p>Lists of extensions:</p> <ul> <li>mkdocs.org</li> <li>mkdocs-material</li> <li>emojis</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#dashes","title":"Dashes","text":"<ul> <li>qwer</li> <li>asdf</li> <li>one-dash</li> <li>two \u2013 dashes</li> <li>tree \u2014 dashes</li> </ul>"},{"location":"#abbrs","title":"Abbrs","text":"<p>The HTML specification is maintained by the W3C.</p>"},{"location":"#math","title":"Math","text":"\\[ \\operatorname{ker} f=\\{g\\in GG:f(g)=e_{H}\\}{\\mbox{.}} \\] <p>The homomorphism \\(f\\) is injective if and only if its kernel is only the  singleton set \\(e_G\\), because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such  that \\(f(a)=f(b)\\).</p>"},{"location":"#lists","title":"Lists","text":"<code>Lorem ipsum dolor sit amet</code> <p>Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis.</p> <code>Cras arcu libero</code> <p>Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante.</p> <p>Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor.</p> <ul> <li> Lorem ipsum dolor sit amet, consectetur adipiscing elit</li> <li> Vestibulum convallis sit amet nisi a tincidunt<ul> <li> In hac habitasse platea dictumst</li> <li> In scelerisque nibh non dolor mollis congue sed et metus</li> <li> Praesent sed risus massa</li> </ul> </li> <li> Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque</li> </ul> <ol> <li>Loosely speaking, \u201cCPU inside CPU\u201d starts first. More precisely, Firmware inside PCH (platform controller hub) or BMC (baseboard management controller) is executed first. Intel Management Engine runs in the PCH and starts before the CPU.</li> <li>It performs basic hardware configuration and allows the CPU to come out of reset.</li> <li>The first instruction that CPU executes is the instruction from 16-bytes below 4GB.<ul> <li>What is there?\u201d<ul> <li>SPI flash memory is mapped to the top of the 32-bit address space.</li> <li>Reads are forwarded by the chipset to the flash device.</li> <li>The instruction at 0xFFFFFFF0 is a JMP instruction to the start of the UEFI platform initialization code (SEC phase)</li> </ul> </li> </ul> </li> </ol>"},{"location":"#formatting","title":"Formatting","text":"<p>Highlighting is also possible and comments can be added inline.</p> <p>This was deleted</p> <p>H<sub>2</sub>0</p> <p>A<sup>T</sup>A</p> <p>Ctrl+Alt+Del</p>"},{"location":"#tabs-and-code-blocks","title":"Tabs and code blocks","text":"Tab 1Tab 2 bubble_sort.py<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j] # (1)!\n</code></pre> <ol> <li> I\u2019m an annotation!</li> </ol> <p>Phasellus posuere in sem ut cursus (1)</p> <p>The <code>range()</code> function is used to generate a sequence of numbers.</p> <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> I\u2019m an annotation! I can contain <code>code</code>, formatted     text, images, \u2026 basically anything that can be expressed in Markdown.</li> </ol>"},{"location":"#admonitions","title":"Admonitions","text":"<p>Phasellus posuere in sem ut cursus</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> collapsible abstract <p>Lorem</p> collapsible info <p>Lorem</p> collapsible tip <p>asdf</p> collapsible success <p>asdf</p> collapsible question <p>asdf</p> collapsible warning <p>asdf</p> collapsible failure <p>asdf</p> collapsible danger <p>asdf</p> collapsible bug <p>asdf</p> collapsible example <p>asdf</p> collapsible quote <p>asdf</p>"},{"location":"#inline","title":"Inline","text":"<p>On the left:</p> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat Curabitur feugiat, tortor non consequat</p> <p>On the right:</p> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat Curabitur feugiat, tortor non consequat</p>"},{"location":"C%2B%2B/","title":"C++","text":""},{"location":"C%2B%2B/#talks-articles","title":"Talks &amp; Articles","text":""},{"location":"C%2B%2B/#signed-vs-unsigned-ints-performance-wise","title":"<code>signed</code> vs <code>unsigned int</code>\u2019s \u2014 performance-wise","text":"<p>CppCon 2016: Chandler Carruth</p>"},{"location":"C%2B%2B/#non-constant-constant-exspressions-in-c","title":"Non-constant constant-exspressions in C++","text":"<pre><code>// &lt;insert solution here&gt;\nint main () {\n   constexpr int a = f ();\n   constexpr int b = f ();\n\n   static_assert (a != b, \"fail\");\n}\n</code></pre> <p>Solution.</p>"},{"location":"C%2B%2B/#when-fences-and-weak-ordering-needed","title":"When fences and weak ordering needed","text":"<p>CppCon 2016: Hans Boehm \u201cUsing weakly ordered C++ atomics correctly\u201d</p>"},{"location":"C%2B%2B/#c17-overview","title":"C++17 overview","text":"<p>Here</p>"},{"location":"C%2B%2B/#c-and-exceptions","title":"C++ and exceptions","text":"<p>reddit</p>"},{"location":"C%2B%2B/#embracing-and-also-destroying-variant-types-safely-andrei-alexandrescu-cppcon-2021","title":"Embracing (and also Destroying) Variant Types Safely - Andrei Alexandrescu - CppCon 2021","text":"<ul> <li>Usage of parameter packs (<code>head</code>, <code>tail</code>, <code>type_sequence</code>).</li> </ul>"},{"location":"C%2B%2B/#clang-libast","title":"clang libAST","text":"<p>An example of parsing C++ code.</p>"},{"location":"C%2B%2B/#unwinding-a-stack-by-hand-with-frame-pointers-and-orc","title":"Unwinding a Stack by Hand with Frame Pointers and ORC","text":"<p>A great article about stack unwinding.</p> <p>Getting symbol names by their addresses: <pre><code>addr2line -e /usr/lib/debug/lib/modules/5.4.17-2136.304.4.1.el8uek.x86_64/vmlinux \\\n            -j .text -ipfas                                                       \\\n            0x30d178 0x2fb393 0x2fc1c9 0x2fd20d 0x301a80 0x301c3e 0x2f4437 0x2f55e4 0x2f5644 0x44f0 0xa001b8\n\n0x000000000030d178: read_word_at_a_time at compiler.h:350\n (inlined by) dentry_string_cmp at dcache.c:252\n (inlined by) dentry_cmp at dcache.c:406\n (inlined by) __d_lookup_rcu at dcache.c:2672\n0x00000000002fb393: lookup_fast at namei.c:1659\n...\n</code></pre></p>"},{"location":"C%2B%2B/#early-return-patter","title":"Early return patter","text":""},{"location":"C%2B%2B/#total-functions-vs-partial-functions","title":"Total functions vs Partial functions","text":"<p>Let\u2019s say instead of having a precondition that the range is non-empty, I want to handle that case too. I want to write a total function instead of a partial function. The best way to do that is either return some value (if I can) or no value (if I can\u2019t). That\u2019s an optional, that\u2019s what it\u2019s for: to handle returning something or nothing.</p>"},{"location":"C%2B%2B/#simd-in-c20","title":"SIMD in C++20","text":"<p>Standard library algorithms implementation using SIMD.</p>"},{"location":"C%2B%2B/#generate-tuple-consisting-of-n-types","title":"Generate tuple consisting of N types","text":"<pre><code>template &lt;class T, size_t N&gt;\nstruct GenerateTNTimes {\n   template &lt;size_t Index&gt;\n   using AlwaysT = T;\n\n   template &lt;class = std::make_index_sequence&lt;N&gt;&gt;\n   struct Impl;\n\n   template &lt;size_t... Indices&gt;\n      struct Impl&lt;std::index_sequence&lt;Indices...&gt;&gt; {\n      using type = std::tuple&lt;AlwaysT&lt;Indices&gt;...&gt;;\n   };\n\nusing type = typename Impl&lt;&gt;::type;\n};\n</code></pre>"},{"location":"C%2B%2B/#ranges","title":"Ranges","text":""},{"location":"C%2B%2B/#projection-the-3rd-argument","title":"Projection \u2014 the 3rd argument","text":"<p>Example 1:</p> <pre><code>struct Product {\n    std::string name_;\n    double value_ { 0.0 };\n};\nconst auto                 is_positive = [](const auto&amp; v) { return v &gt; 0; };\nconst std::vector&lt;Product&gt; prods       = {{ \"box\", 10.0 }, {\"tv\", 100.0}, {\"none\", -1.0}};\nauto res = std::ranges::all_of(prods, is_positive, &amp;Product::value_);\n</code></pre> <p>Example 2, case insensitive search</p> <pre><code>res = std::ranges::search(testString2,\n                          needle2,\n                          std::ranges::equal_to{},\n                          ::toupper,\n                          ::toupper);\n</code></pre>"},{"location":"C%2B%2B/#views-compositon","title":"Views compositon \u2014 <code>|</code>:","text":"<pre><code>auto out = [](const auto&amp; v) { std::cout &lt;&lt; v &lt;&lt; \", \"; };\nstd::ranges::for_each(prods | std::views::reverse, out, &amp;Product::name_);\n</code></pre>"},{"location":"C%2B%2B/#temporary-ranges-stdrangesdangling","title":"temporary ranges &amp; <code>std::ranges::dangling</code>","text":"<p>There is a special type that is returned when a function is called with a temporary value:</p> <pre><code>std::vector&lt;Product&gt; GetProds() {...}\n\nauto it = std::ranges::find_if(GetProds(), [](const Product&amp; p) { return true});\n</code></pre> <p>will result in: <pre><code>&lt;source&gt;:22:48: error: base operand of '-&gt;' has non-pointer type 'std::ranges::dangling'\n   22 |     std::cout &lt;&lt; \"std::ranges::find_if: \" &lt;&lt; it-&gt;name_ &lt;&lt; '\\n';\n      |   \n</code></pre></p>"},{"location":"C%2B%2B/#eraseremove-idiom","title":"Erase\u2013remove idiom","text":"<pre><code>prodsVec.erase(std::ranges::remove_if(prodsVec, checkNoPrefix).begin(), prodsVec.end());\n\n// or\nstd::erase_if(prodsVec, checkNoPrefix);\n</code></pre>"},{"location":"C%2B%2B/#concepts","title":"Concepts","text":"<p>Purpose:</p> <ul> <li>Better error messages.</li> <li>Faster compilation checks can be performed before instantiating and parsing a template function/class.</li> <li>Glorified <code>std::enable_if_t</code>.</li> </ul>"},{"location":"C%2B%2B/#constraining-return-type","title":"Constraining return type","text":"<p>Use arrow: <code>-&gt;</code>:</p> <pre><code>template&lt;class T&gt;\nconcept BoolComparable = requires(T lhs, T rhs) {\n   {lhs == rhs} -&gt; std::convertible_to&lt;bool&gt;;\n   { shape.draw() }; -&gt; std::same_as&lt;void&gt;;\n};\n</code></pre>"},{"location":"C%2B%2B/#constraints-for-multiple-types","title":"Constraints for multiple types","text":"<p>Consider heterogeneous comparison (<code>\"asdf\" == std::string(\"asdf\")</code>):</p> <pre><code>template&lt;class T, class U&gt;\nconcept EqualityCompare = requires(T op_T, U op_U) {\n   {op_T == op_U} -&gt; std::convertible_to&lt;bool&gt;;\n   {op_U == op_T} -&gt; std::convertible_to&lt;bool&gt;;\n};\n\ntemplate&lt;class T, EqualityCompare&lt;T&gt; U&gt;\nbool are_equal(const T op_T, const U op_U) {...}\n\ntemplate&lt;class T, class U&gt; requires EqualityCompare&lt;T, U&gt;\nbool are_equal(const T op_T, const  U op_U) {...}\n\nbool are_equal(const auto op_T, const auto op_U)\nrequires EqualityCompare&lt;declytpe(op_T), decltype(op_U)&gt; {...}\n</code></pre>"},{"location":"C%2B%2B/#using-concepts-as-parameters","title":"Using concepts as parameters","text":"<pre><code>void drawShape(const ShapeConcept auto &amp;shape) {\n   shape.draw();\n}\ntemplate&lt;class ShapeConcept&gt;\nvoid drawShape(const ShapeConcept &amp;shape) {\n   shape.draw();\n}\n</code></pre>"},{"location":"C%2B%2B/#using-concepts-as-return-types","title":"Using concepts as return types","text":"<pre><code>ShapeConcept auto getShape() {\n   ...\n}\nauto getShape() -&gt; ShapeConcept auto {\n   ...\n}\n</code></pre>"},{"location":"C%2B%2B/#reference-collapsing-rules","title":"Reference collapsing rules","text":"<p>A good explanation of rvalues.</p> <p>Geven:</p> <pre><code>template&lt;typename T&gt; \nvoid foo(T&amp;&amp;);\n</code></pre> <p>There is a special template argument deduction rule for function templates that take an argument by rvalue reference to a template argument:</p> <ul> <li>When <code>foo()</code> is called on an lvalue of type <code>A</code>, then <code>T</code> resolves to <code>A&amp;</code> and hence, by   the reference collapsing rules above, the argument type effectively becomes <code>A&amp;</code>.</li> <li>When <code>foo()</code> is called on an rvalue of type <code>A</code>, then <code>T</code> resolves to <code>A</code>, and hence   the argument type becomes <code>A&amp;&amp;</code>.</li> </ul>"},{"location":"C%2B%2B/#auto-vs-decltype","title":"auto vs decltype","text":"<p>Src.</p> <p><code>rvalue</code> is an <code>xvalue</code> if it is one of the following:</p> <ul> <li>A function call where the function\u2019s return value is declared as an <code>rvalue</code> reference.   An example would be <code>std::move(x)</code>.</li> <li>A cast to an <code>rvalue</code> reference. An example would be <code>static_cast&lt;A&amp;&amp;&gt;(a)</code>.</li> <li>A member access of an <code>xvalue</code>. Example: <code>(static_cast&lt;A&amp;&amp;&gt;(a)).m_x</code>.</li> </ul> <p>All other <code>rvalues</code> are <code>prvalues</code>. We are now in a position to describe how <code>decltype</code> deduces the type of a complex expression.</p> <p>Let <code>expr</code> be an expression that is not a plain, unparenthesized variable, function parameter, or class member access. Let <code>T</code> be the type of <code>expr</code>.</p> <ul> <li>If <code>expr</code> is an <code>lvalue</code>, then <code>decltype(expr)</code> is <code>T&amp;</code>.</li> <li>If <code>expr</code> is an <code>xvalue</code>, then <code>decltype(expr)</code> is <code>T&amp;&amp;</code>.</li> <li>Otherwise, <code>expr</code> is a <code>prvalue</code>, and <code>decltype(expr)</code> is <code>T</code>.</li> </ul>"},{"location":"C%2B%2B/#rvo-urvo-nrvo","title":"RVO / URVO / NRVO","text":"<p>Consider the following:</p> <pre><code>class TString {\n  public:\n    TString()                           { std::cout &lt;&lt; \"ctor()\"       &lt;&lt; std::endl; }\n    TString(const char *)               { std::cout &lt;&lt; \"ctor(char *)\" &lt;&lt; std::endl; }\n    TString(const TString &amp;)            { std::cout &lt;&lt; \"ctor const &amp;\" &lt;&lt; std::endl; }\n    TString &amp;operator=(const TString &amp;) { std::cout &lt;&lt; \"= const &amp;\"    &lt;&lt; std::endl; return *this; }\n    TString(TString &amp;&amp;)                 { std::cout &lt;&lt; \"ctor &amp;&amp;\"      &lt;&lt; std::endl; }\n    TString &amp;operator=(TString &amp;&amp;)      { std::cout &lt;&lt; \"= &amp;&amp;&amp;\"        &lt;&lt; std::endl; return *this; }\n};\n\nTString Meow() {\n  return \"Meow\";\n\n  // ------ or ------\n  return TString(\"Meow\");\n\n  // ------ or ------\n  TString a(\"Meow\");\n  return a;\n}\n\nint main() {\n  TString s = Meow();\n  return 0;\n}\n</code></pre> <p>The output is just <pre><code>ctor(char *)\n</code></pre></p> <p>As you can see there is no things like: (1) construct temporary string in the function <code>Meow</code>, (2) construct string <code>s</code> in <code>main</code>, (3) call <code>s.operator=</code>, (4) destruct temporary string (constructed in <code>Meow</code>).</p> <p>Instead of it just a single ctor called.</p>"},{"location":"C%2B%2B/#lesser-known-c-std-algorithms","title":"Lesser known C++ std algorithms","text":"<p>Full list.</p>"},{"location":"C%2B%2B/#uncategorised","title":"Uncategorised","text":"<ul> <li><code>slice</code>, <code>valarray</code></li> </ul>"},{"location":"C%2B%2B/#non-modifying-sequence-operations","title":"Non-modifying sequence operations","text":"<ul> <li><code>all_of</code>, <code>any_of</code>, <code>none_of</code></li> <li><code>count_if</code></li> <li><code>adjacent_find</code></li> </ul>"},{"location":"C%2B%2B/#modifying-sequence-operations","title":"Modifying sequence operations","text":"<ul> <li><code>remove_if</code>, <code>replace_if</code></li> <li><code>swap_ranges</code></li> </ul>"},{"location":"C%2B%2B/#sort-related","title":"Sort related","text":"<ul> <li><code>merge</code>, <code>inplace_merge</code></li> <li><code>partial_sort</code></li> <li><code>nth_element</code></li> <li><code>partition</code>, <code>stable_partition</code></li> <li><code>is_partitioned</code>, <code>partition_point</code></li> </ul>"},{"location":"C%2B%2B/#minimummaximum","title":"Minimum/maximum","text":"<ul> <li><code>minmax</code>, <code>minmax_element</code></li> </ul>"},{"location":"C%2B%2B/#c-core-guidelines-excerpts","title":"C++ Core Guidelines excerpts","text":""},{"location":"C%2B%2B/#c138-create-an-overload-set-for-a-derived-class-and-its-bases-with-using","title":"C.138: Create an overload set for a derived class and its bases with <code>using</code>","text":""},{"location":"C%2B%2B/#reason","title":"Reason","text":"<p>Without a <code>using</code> declaration, member functions in the derived class hide the entire inherited overload sets.</p> Example, bad<pre><code>#include &lt;iostream&gt;\nclass B {\npublic:\n    virtual int f(int i) { std::cout &lt;&lt; \"f(int): \"; return i; }\n    virtual double f(double d) { std::cout &lt;&lt; \"f(double): \"; return d; }\n    virtual ~B() = default;\n};\nclass D: public B {\npublic:\n    int f(int i) override { std::cout &lt;&lt; \"f(int): \"; return i + 1; }\n};\nint main()\n{\n    D d;\n    std::cout &lt;&lt; d.f(2) &lt;&lt; '\\n';   // prints \"f(int): 3\"\n    std::cout &lt;&lt; d.f(2.3) &lt;&lt; '\\n'; // prints \"f(int): 3\"\n}\n</code></pre> Example, good<pre><code>class D: public B {\npublic:\n    int f(int i) override { std::cout &lt;&lt; \"f(int): \"; return i + 1; }\n    using B::f; // exposes f(double)\n};\n</code></pre>"},{"location":"C%2B%2B/#note","title":"Note","text":"<p>This issue affects both virtual and non-virtual member functions</p> <p>For variadic bases, C++17 introduced a variadic form of the using-declaration,</p> <pre><code>template&lt;class... Ts&gt;\nstruct Overloader : Ts... {\n    using Ts::operator()...; // exposes operator() from every base\n};\n</code></pre>"},{"location":"C%2B%2B/#c165-use-using-for-customization-points","title":"C.165: Use <code>using</code> for customization points","text":""},{"location":"C%2B%2B/#reason_1","title":"Reason","text":"<p>To find function objects and functions defined in a separate namespace to \u201ccustomize\u201d a common function.</p>"},{"location":"C%2B%2B/#example","title":"Example","text":"<p>Consider <code>swap</code>. It is a general (standard-library) function with a definition that will work for just about any type. However, it is desirable to define specific <code>swap()</code>\u2019s for specific types. For example, the general <code>swap()</code> will copy the elements of two vectors being swapped, whereas a good specific implementation will not copy elements at all.</p> bad<pre><code>namespace N {\n    My_type X { /* ... */ };\n    void swap(X&amp;, X&amp;);   // optimized swap for N::X\n    // ...\n}\n\nvoid f1(N::X&amp; a, N::X&amp; b)\n{\n    std::swap(a, b);   // probably not what we wanted: calls std::swap()\n}\n</code></pre> <p>The <code>std::swap()</code> in <code>f1()</code> does exactly what we asked it to do: it calls the <code>swap()</code> in namespace <code>std</code>. Unfortunately, that\u2019s probably not what we wanted. How do we get <code>N::X</code> considered?</p> better<pre><code>void f2(N::X&amp; a, N::X&amp; b) {\n    swap(a, b);   // calls N::swap\n}\n</code></pre> <p>But that might not be what we wanted for generic code. There, we typically want the specific function if it exists and the general function if not. This is done by including the general function in the lookup for the function:</p> good<pre><code>void f3(N::X&amp; a, N::X&amp; b) {\n    using std::swap;  // make std::swap available\n    swap(a, b);       // calls N::swap if it exists, otherwise std::swap\n}\n</code></pre>"},{"location":"C%2B%2B/#c129-when-designing-a-class-hierarchy-distinguish-between-implementation-inheritance-and-interface-inheritance","title":"C.129: When designing a class hierarchy, distinguish between implementation inheritance and interface inheritance","text":""},{"location":"C%2B%2B/#reason_2","title":"Reason","text":"<p>Implementation details in an interface make the interface brittle; that is, make its users vulnerable to having to recompile after changes in the implementation. Data in a base class increases the complexity of implementing the base and can lead to replication of code.</p>"},{"location":"C%2B%2B/#note_1","title":"Note","text":"<code>Interface inheritance</code>: <p>is the use of inheritance to separate users from implementations, in particular to allow derived classes to be added and changed without affecting the users of base classes.</p> <code>Implementation inheritance</code>: is the use of inheritance to simplify implementation of new facilities by making useful operations available for implementers of related new operations (sometimes called \u201cprogramming by difference\u201d). <p>A pure interface class is simply a set of pure virtual functions; see I.25.</p> <p>In early OOP (e.g., in the 1980s and 1990s), implementation inheritance and interface inheritance were often mixed and bad habits die hard. Even now, mixtures are not uncommon in old code bases and in old-style teaching material.</p> <p>The importance of keeping the two kinds of inheritance increases</p> <ul> <li>with the size of a hierarchy (e.g., dozens of derived classes),</li> <li>with the length of time the hierarchy is used (e.g., decades), and</li> <li>with the number of distinct organizations in which a hierarchy is used (e.g., it can be difficult to distribute an update to a base class)</li> </ul> Example, bad:<pre><code>class Shape {   // BAD, mixed interface and implementation\npublic:\n    Shape();\n    Shape(Point ce = {0, 0}, Color co = none): cent{ce}, col {co} { /* ... */}\n\n    Point center() const { return cent; }\n    Color color() const { return col; }\n\n    virtual void rotate(int) = 0;\n    virtual void move(Point p) { cent = p; redraw(); }\n\n    virtual void redraw();\n\n    // ...\nprivate:\n    Point cent;\n    Color col;\n};\n\nclass Circle : public Shape {\npublic:\n    Circle(Point c, int r) : Shape{c}, rad{r} { /* ... */ }\n\n    // ...\nprivate:\n    int rad;\n};\n\nclass Triangle : public Shape {\npublic:\n    Triangle(Point p1, Point p2, Point p3); // calculate center\n    // ...\n};\n</code></pre> <p>Problems:</p> <ul> <li>As the hierarchy grows and more data is added to Shape, the constructors get harder to write and maintain.</li> <li>Why calculate the center for the Triangle? we might never use it.</li> <li>Add a data member to Shape (e.g., drawing style or canvas) and all classes derived from Shape and all code   using Shape will need to be reviewed, possibly changed, and probably recompiled.</li> </ul> <p>The implementation of <code>Shape::move()</code> is an example of implementation inheritance: we have defined <code>move()</code> once and for all for all derived classes. The more code there is in such base class member function implementations and the more data is shared by placing it in the base, the more benefits we gain \u2014 and the less stable the hierarchy is.</p> <p>This <code>Shape</code> hierarchy can be rewritten using interface inheritance:</p> <pre><code>class Shape {  // pure interface\npublic:\n    virtual Point center() const = 0;\n    virtual Color color() const = 0;\n\n    virtual void rotate(int) = 0;\n    virtual void move(Point p) = 0;\n\n    virtual void redraw() = 0;\n\n    // ...\n};\n</code></pre> <p>Note that a pure interface rarely has constructors: there is nothing to construct.</p> <pre><code>class Circle : public Shape {\npublic:\n    Circle(Point c, int r, Color c) : cent{c}, rad{r}, col{c} { /* ... */ }\n\n    Point center() const override { return cent; }\n    Color color() const override { return col; }\n\n    // ...\nprivate:\n    Point cent;\n    int rad;\n    Color col;\n};\n</code></pre> <p>The interface is now less brittle, but there is more work in implementing the member functions. For example, center has to be implemented by every class derived from Shape.</p>"},{"location":"C%2B%2B/#dual-hierarchy","title":"Dual hierarchy","text":"<p>How can we gain the benefit of stable hierarchies from implementation hierarchies and the benefit of implementation reuse from implementation inheritance? One popular technique is dual hierarchies. There are many ways of implementing the idea of dual hierarchies; here, we use a multiple-inheritance variant.</p> <p>First we devise a hierarchy of interface classes:</p> <pre><code>class Shape {   // pure interface\npublic:\n    virtual Point center() const = 0;\n    virtual Color color() const = 0;\n\n    virtual void rotate(int) = 0;\n    virtual void move(Point p) = 0;\n\n    virtual void redraw() = 0;\n\n    // ...\n};\n\nclass Circle : public virtual Shape {   // pure interface\npublic:\n    virtual int radius() = 0;\n    // ...\n};\n</code></pre> <p>To make this interface useful, we must provide its implementation classes (here, named equivalently, but in the <code>Impl</code> namespace):</p> <pre><code>class Impl::Shape : public virtual ::Shape { // implementation\npublic:\n    // constructors, destructor\n    // ...\n    Point center() const override { /* ... */ }\n    Color color() const override { /* ... */ }\n\n    void rotate(int) override { /* ... */ }\n    void move(Point p) override { /* ... */ }\n\n    void redraw() override { /* ... */ }\n\n    // ...\n};\n</code></pre> <p>Now Shape is a poor example of a class with an implementation, but bear with us because this is just a simple example of a technique aimed at more complex hierarchies.</p> <pre><code>class Impl::Circle : public virtual ::Circle, public Impl::Shape {   // implementation\npublic:\n    // constructors, destructor\n\n    int radius() override { /* ... */ }\n    // ...\n};\n</code></pre> <p>And we could extend the hierarchies by adding a <code>Smiley</code> class ( <code>:-)</code> ):</p> <pre><code>class Smiley : public virtual Circle { // pure interface\npublic:\n    // ...\n};\n\nclass Impl::Smiley : public virtual ::Smiley, public Impl::Circle {   // implementation\npublic:\n    // constructors, destructor\n    // ...\n}\n</code></pre> <p>There are now two hierarchies:</p> <ul> <li>interface: <code>Smiley</code> -&gt; <code>Circle</code> -&gt; <code>Shape</code></li> <li>implementation: <code>Impl::Smiley</code> -&gt; <code>Impl::Circle</code> -&gt; <code>Impl::Shape</code></li> </ul> <p>Since each implementation is derived from its interface as well as its implementation base class we get a lattice (DAG):</p> <pre><code>Smiley     -&gt;         Circle     -&gt;  Shape\n  ^                     ^               ^\n  |                     |               |\nImpl::Smiley -&gt; Impl::Circle -&gt; Impl::Shape\n</code></pre> <p>As mentioned, this is just one way to construct a dual hierarchy.</p> <p>The implementation hierarchy can be used directly, rather than through the abstract interface.</p> <pre><code>void work_with_shape(Shape&amp;);\n\nint user() {\n    Impl::Smiley my_smiley{ /* args */ };   // create concrete shape\n    // ...\n    my_smiley.some_member();        // use implementation class directly\n    // ...\n    work_with_shape(my_smiley);     // use implementation through abstract interface\n    // ...\n}\n</code></pre> <p>This can be useful when the implementation class has members that are not offered in the abstract interface or if direct use of a member offers optimization opportunities (e.g., if an implementation member function is final).</p>"},{"location":"C%2B%2B/#note_2","title":"Note","text":"<p>Another (related) technique for separating interface and implementation is Pimpl.</p>"},{"location":"C%2B%2B/#note_3","title":"Note","text":"<p>There is often a choice between offering common functionality as (implemented) base class functions and free-standing functions (in an implementation namespace). Base classes gives a shorter notation and easier access to shared data (in the base) at the cost of the functionality being available only to users of the hierarchy.</p>"},{"location":"C%2B%2B/#r37-do-not-pass-a-pointer-or-reference-obtained-from-an-aliased-smart-pointer","title":"R.37: Do not pass a pointer or reference obtained from an aliased smart pointer","text":""},{"location":"C%2B%2B/#reason_3","title":"Reason","text":"<p>Violating this rule is the number one cause of losing reference counts and finding yourself with a dangling pointer. Functions should prefer to pass raw pointers and references down call chains. At the top of the call tree where you obtain the raw pointer or reference from a smart pointer that keeps the object alive. You need to be sure that the smart pointer cannot inadvertently be reset or reassigned from within the call tree below.</p>"},{"location":"C%2B%2B/#note_4","title":"Note","text":"<p>To do this, sometimes you need to take a local copy of a smart pointer, which firmly keeps the object alive for the duration of the function and the call tree.</p>"},{"location":"C%2B%2B/#example_1","title":"Example","text":"<p>Consider this code:</p> <pre><code>// global (static or heap), or aliased local ...\nshared_ptr&lt;widget&gt; g_p = ...;\n\nvoid f(widget&amp; w) {\n    g();\n    use(w);  // A\n}\n\nvoid g() {\n    g_p = ...; // oops, if this was the last shared_ptr to that widget, destroys the widget\n}\n</code></pre> <p>The following should not pass code review:</p> <pre><code>void my_code() {\n    // BAD: passing pointer or reference obtained from a non-local smart pointer\n    //      that could be inadvertently reset somewhere inside f or its callees\n    f(*g_p);\n\n    // BAD: same reason, just passing it as a \"this\" pointer\n    g_p-&gt;func();\n}\n</code></pre> <p>The fix is simple \u2014 take a local copy of the pointer to \u201ckeep a ref count\u201d for your call tree:</p> <pre><code>void my_code() {\n    // cheap: 1 increment covers this entire function and all the call trees below us\n    auto pin = g_p;\n\n    // GOOD: passing pointer or reference obtained from a local unaliased smart pointer\n    f(*pin);\n\n    // GOOD: same reason\n    pin-&gt;func();\n}\n</code></pre>"},{"location":"C%2B%2B/#es50-dont-cast-away-const","title":"ES.50: Don\u2019t cast away const","text":""},{"location":"C%2B%2B/#reason_4","title":"Reason","text":"<p>It makes a lie out of <code>const</code>. If the variable is actually declared <code>const</code>, modifying it results in undefined behavior.</p> Example, bad<pre><code>void f(const int&amp; x) {\n    const_cast&lt;int&amp;&gt;(x) = 42;   // BAD\n}\n\nstatic int i = 0;\nstatic const int j = 0;\n\nf(i); // silent side effect\nf(j); // undefined behavior\n</code></pre>"},{"location":"C%2B%2B/#example_2","title":"Example","text":"<p>Sometimes, you might be tempted to resort to <code>const_cast</code> to avoid code duplication, such as when two accessor functions that differ only in const-ness have similar implementations. For example:</p> <pre><code>class Bar;\n\nclass Foo {\npublic:\n    // BAD, duplicates logic\n    Bar&amp; get_bar() {\n        /* complex logic around getting a non-const reference to my_bar */\n    }\n    const Bar&amp; get_bar() const {\n        /* same complex logic around getting a const reference to my_bar */\n    }\nprivate:\n    Bar my_bar;\n};\n</code></pre> <p>Instead, prefer to share implementations. Normally, you can just have the non-const function call the const function. However, when there is complex logic this can lead to the following pattern that still resorts to a const_cast:</p> <pre><code>class Foo {\npublic:\n    // not great, non-const calls const version but resorts to const_cast\n    Bar&amp; get_bar() {\n        return const_cast&lt;Bar&amp;&gt;(static_cast&lt;const Foo&amp;&gt;(*this).get_bar());\n    }\n    const Bar&amp; get_bar() const {\n        /* the complex logic around getting a const reference to my_bar */\n    }\nprivate:\n    Bar my_bar;\n};\n</code></pre> <p>Although this pattern is safe when applied correctly, because the caller must have had a non-const object to begin with, it\u2019s not ideal because the safety is hard to enforce automatically as a checker rule.</p> <p>Instead, prefer to put the common code in a common helper function \u2014 and make it a template so that it deduces <code>const</code>. This doesn\u2019t use any <code>const_cast</code> at all:</p> <pre><code>class Foo {\npublic:                         // good\n          Bar&amp; get_bar()       { return get_bar_impl(*this); }\n    const Bar&amp; get_bar() const { return get_bar_impl(*this); }\nprivate:\n    Bar my_bar;\n\n    template&lt;class T&gt;           // good, deduces whether T is const or non-const\n    static auto&amp; get_bar_impl(T&amp; t)\n        { /* the complex logic around getting a possibly-const reference to my_bar */ }\n};\n</code></pre> <p>Note: Don\u2019t do large non-dependent work inside a template, which leads to code bloat. For example, a further improvement would be if all or part of <code>get_bar_impl</code> can be non-dependent and factored out into a common non-template function, for a potentially big reduction in code size.</p>"},{"location":"C%2B%2B/#exception","title":"Exception","text":"<p>You might need to cast away <code>const</code> when calling const-incorrect functions. Prefer to wrap such functions in inline const-correct wrappers to encapsulate the cast in one place.</p>"},{"location":"C%2B%2B/#example_3","title":"Example","text":"<p>Sometimes, \u201ccast away const\u201d is to allow the updating of some transient information of an otherwise immutable object. Examples are caching, memoization, and precomputation. Such examples are often handled as well or better using mutable or an indirection than with a <code>const_cast</code>.</p> <p>Consider keeping previously computed results around for a costly operation:</p> <pre><code>int compute(int x); // compute a value for x; assume this to be costly\n\nclass Cache {   // some type implementing a cache for an int-&gt;int operation\npublic:\n    pair&lt;bool, int&gt; find(int x) const;  // is there a value for x?\n    void set(int x, int v);             // make y the value for x\n    // ...\nprivate:\n    // ...\n};\n\nclass X {\npublic:\n    int get_val(int x)  {\n        auto p = cache.find(x);\n        if (p.first) \n           return p.second;\n        int val = compute(x);\n        cache.set(x, val); // insert value for x\n        return val;\n    }\n    // ...\nprivate:\n    Cache cache;\n};\n</code></pre> <p>Here, <code>get_val()</code> is logically constant, so we would like to make it a <code>const</code> member. To do this we still need to mutate cache, so people sometimes resort to a <code>const_cast</code>:</p> <pre><code>class X {   // Suspicious solution based on casting\npublic:\n    int get_val(int x) const  {\n        auto p = cache.find(x);\n        if (p.first) \n           return p.second;\n        int val = compute(x);\n        const_cast&lt;Cache&amp;&gt;(cache).set(x, val);   // ugly\n        return val;\n    }\n    // ...\nprivate:\n    Cache cache;\n};\n</code></pre> <p>Fortunately, there is a better solution: State that cache is mutable even for a const object:</p> <pre><code>class X {   // better solution\npublic:\n    int get_val(int x) const {\n        auto p = cache.find(x);\n        if (p.first) \n           return p.second;\n        int val = compute(x);\n        cache.set(x, val);\n        return val;\n    }\n    // ...\nprivate:\n    mutable Cache cache;\n};\n</code></pre> <p>An alternative solution would be to store a pointer to the cache:</p> <pre><code>class X {   // OK, but slightly messier solution\npublic:\n    int get_val(int x) const {\n        auto p = cache-&gt;find(x);\n        if (p.first) return p.second;\n        int val = compute(x);\n        cache-&gt;set(x, val);\n        return val;\n    }\n    // ...\nprivate:\n    unique_ptr&lt;Cache&gt; cache;\n};\n</code></pre> <p>That solution is the most flexible, but requires explicit construction and destruction of <code>*cache</code> (most likely in the constructor and destructor of X).</p> <p>In any variant, we must guard against data races on the cache in multi-threaded code, possibly using a <code>std::mutex</code>.</p>"},{"location":"Rust/","title":"Rust","text":"<p>Sources &amp; Books:</p> <ul> <li> <p>The Rust Programming Language book</p> </li> <li> <p>Asynchronous Programming in Rust</p> </li> <li> <p>Effective rust</p> </li> <li> <p>The Rustonomicon</p> </li> <li> <p>std crate</p> </li> <li> <p>The Unstable Book</p> </li> <li> <p>The Rust Reference</p> </li> <li> <p>Rust API Guidelines</p> </li> <li> <p>Rust cookbook</p> </li> <li> <p>Rust by Example</p> </li> <li> <p>The Little Book of Rust Macros</p> </li> <li> <p>Fuzz Book</p> </li> </ul>"},{"location":"Rust/#c-differences","title":"C++ differences","text":"<ul> <li>Blocks are expressions.</li> <li>Move or copy by default.<ul> <li>Move is a real move: it is not allowed to use a moved-from variable.</li> </ul> </li> <li>Const by default.</li> <li>Mutable references vs const references have the same relationship as read-write lock: only a single mutable   reference is allowed, or multiple const references.</li> <li><code>self</code> is explicit, like in Python, but unlike Python, it is useful \u2014 we specify type modifiers, such as   <code>const</code>/<code>mut</code>, <code>ref</code> or move.</li> <li>Enums can have associated with its fields data/types (so it is a mix of <code>enum class</code> and <code>std::variant</code>).</li> </ul>"},{"location":"Rust/#performance-profiling","title":"Performance &amp; Profiling","text":"<ul> <li> <p>Get Rust fork of perl flamegraph: <code>cargo install inferno</code></p> </li> <li> <p>Add debug info into release build:</p> <pre><code>[profile.release]\ndebug = true\n</code></pre> </li> <li> <p>Record perf data: <code>perf record -F 1987 --call-graph dwarf your-app-here</code></p> </li> <li> <p>Create flame and icicle SVGs:</p> <pre><code>set bn \"v2-F1987.1\"; set mw 0.01; set suffix \"$mw\"; perf script | inferno-collapse-perf &gt; $bn.perf.data.folded; \\\ncat $bn.perf.data.folded | inferno-flamegraph --minwidth $mw --width 2250 --title \"$bn $suffix\" --reverse --inverted &gt; ./$bn-$suffix.perf-icicle.svg &amp;&amp; \\\ncat $bn.perf.data.folded | inferno-flamegraph --minwidth $mw --width 2250 --title \"$bn $suffix\" &gt; ./$bn-$suffix.perf-flame.svg\n</code></pre> </li> <li> <p>Diff: <code>inferno-diff-folded folded1 folded2 | inferno-flamegraph &gt; diff2.svg</code></p> </li> </ul>"},{"location":"Rust/#cargo-project-structure-building-testing-benchmarking-other-tools","title":"Cargo: Project structure, building, testing, benchmarking &amp; other tools","text":"<ul> <li>Get unused dependencies: <code>cargo-udeps</code></li> <li>Check for security issues, licensing conflicts: <code>cargo-deny</code></li> <li>Run: <code>cargo run --bin digester -- --read-from-file $HOME/file1.txt --log-level trace</code></li> <li>Build: <code>cargo build</code>, build tests too: <code>cargo test --no-run</code></li> <li>Tests:<ul> <li>Code coverage: <code>cargo-tarpaulin</code></li> <li>Build &amp; run test:<ul> <li>Run specific test with stdout: <code>cargo test --release -- --nocapture decoded_reader_zstd_encoder_zstd_decoder_decoded_writer</code></li> <li>Parallel: <code>cargo test -- --test-threads=2</code></li> <li>Run ignored: <code>cargo test -- --ignored</code></li> <li>Run only non-integration tests: <code>cargo test --lib -- --nocapture</code></li> </ul> </li> </ul> </li> <li>Miri</li> <li>Deadlock detection tools: no_deadlocks, ThreadSanitizer,   parking_lot::deadlock</li> <li>Clippy</li> </ul>"},{"location":"Rust/#create-directories-packages","title":"Create directories / packages","text":"<p>Cargo documentation.</p> <p>From smaller units to larger:</p> <ol> <li> <p>Module: corresponds to a single <code>.rs</code> or namespace (it is not required to create a file. A    module can be created \u201cin-place\u201d).</p> </li> <li> <p>Crate: an executable or the (main and the only!) library of a package.</p> </li> <li> <p>Package: can contain multiple binary crates and at most one library-crate    (1,    2),    this corresponds to C++ library and is the main unit of sharing:</p> <p>The filename defaults to <code>src/lib.rs</code>, and the name of the library defaults to the name of the package.    A package can have only one library</p> <p>So, from the point of view of dependencies, package == library.</p> <p>Each package is handled by its <code>Cargo.toml</code> and can be published to crates.io.</p> </li> <li> <p>Workspace: analogous to a project and consists of multiple (presumably related) packages/libraries.    How-to.</p> </li> </ol> <p>From the practical point of view, create several libraries (==directories), like this:</p> <pre><code>cargo new input  # will create \"input\" package (and its directory, along with toml file, src, etc...)\ncargo new output # same\ncargo new query  # same\n</code></pre> <p>Then you can put them in a single workspace via this:</p> Cargo.toml<pre><code>[workspace]\n\nmembers = [\n   \"input\",\n   \"output\",\n   \"query\",\n]\n</code></pre>"},{"location":"Rust/#conditional-compilation-features","title":"Conditional compilation &amp; Features","text":"<pre><code>// Build with `RUSTFLAGS` set to:\n//   '--cfg myname=\"a\" --cfg myname=\"b\"'\n#[cfg(myname = \"a\")]\nprintln!(\"cfg(myname = 'a') is set\");\n#[cfg(myname = \"b\")]\nprintln!(\"cfg(myname = 'b') is set\");\n</code></pre> <p>For example, the following chunk of a manifest file includes six features:</p> <pre><code>[features]\ndefault = [\"featureA\"]\nfeatureA = []\nfeatureB = []\n# Enabling `featureAB` also enables `featureA` and `featureB`.\nfeatureAB = [\"featureA\", \"featureB\"]\nschema = []\n\n[dependencies]\nrand = { version = \"^0.8\", optional = true }\nhex = \"^0.4\"\n</code></pre> <p>The <code>rand</code> crate is a dependency that is marked as <code>optional = true</code>, and that effectively makes <code>\"rand\"</code> into the name of a feature. If the crate is compiled with <code>--features rand</code>, then that dependency is activated:</p> <pre><code>#[cfg(feature = \"rand\")]\npub fn pick_a_number() -&gt; u8 {\n    rand::random::&lt;u8&gt;()\n}\n\n#[cfg(not(feature = \"rand\"))]\npub fn pick_a_number() -&gt; u8 {\n    4 // chosen by fair dice roll.\n}\n</code></pre> <p>So you can determine a crate\u2019s features by examining <code>[features]</code> as well as optional <code>[dependencies]</code> in the crate\u2019s <code>Cargo.toml</code> file.</p> <p>Feature unification means that features should be additive; it\u2019s a bad idea to have mutually incompatible features because there\u2019s nothing to prevent the incompatible features being simultaneously enabled by different users.</p>"},{"location":"Rust/#show-structure","title":"Show structure","text":"<pre><code>cargo tree\n\ninput v0.1.0 (/home/dimanne/devel/scripts/observability/input)\n\u251c\u2500\u2500 anyhow v1.0.75\n\u251c\u2500\u2500 protobuf v3.2.0\n\u2502   \u251c\u2500\u2500 bytes v1.5.0\n\u2502   \u251c\u2500\u2500 once_cell v1.18.0\n\u2502   \u251c\u2500\u2500 protobuf-support v3.2.0\n\u2502   \u2502   \u2514\u2500\u2500 thiserror v1.0.48\n\u2502   \u2502       \u2514\u2500\u2500 thiserror-impl v1.0.48 (proc-macro)\n\u2502   \u2502           \u251c\u2500\u2500 proc-macro2 v1.0.67\n\u2502   \u2502           \u2502   \u2514\u2500\u2500 unicode-ident v1.0.12\n\u2502   \u2502           \u251c\u2500\u2500 quote v1.0.33\n\u2502   \u2502           \u2502   \u2514\u2500\u2500 proc-macro2 v1.0.67 (*)\n\u2502   \u2502           \u2514\u2500\u2500 syn v2.0.37\n\u2502   \u2502               \u251c\u2500\u2500 proc-macro2 v1.0.67 (*)\n\u2502   \u2502               \u251c\u2500\u2500 quote v1.0.33 (*)\n\u2502   \u2502               \u2514\u2500\u2500 unicode-ident v1.0.12\n\u2502   \u2514\u2500\u2500 thiserror v1.0.48 (*)\n\u2514\u2500\u2500 protobuf-json-mapping v3.2.0\n    \u251c\u2500\u2500 protobuf v3.2.0 (*)\n    \u251c\u2500\u2500 protobuf-support v3.2.0 (*)\n    \u2514\u2500\u2500 thiserror v1.0.48 (*)\n</code></pre>"},{"location":"Rust/#librs-mainrs-mod-pub-use-and-other","title":"lib.rs, main.rs: mod, pub, use and other","text":"<ul> <li>Start from the crate root: When compiling a crate, the compiler first looks in the crate root file   (usually <code>src/lib.rs</code> for a library crate or <code>src/main.rs</code> for a binary crate) for code to compile.</li> <li>Declaring modules: In the crate root file, you can declare new modules; say, you declare a \u201cgarden\u201d   module with <code>mod garden;</code>. The compiler will look for the module\u2019s code in these places:<ul> <li>Inline, within curly brackets that replace the semicolon following <code>mod garden</code></li> <li>In the file <code>src/garden.rs</code></li> <li>In the file <code>src/garden/mod.rs</code></li> </ul> </li> <li>Declaring submodules: In any file other than the crate root, you can declare submodules. For example,   you might declare <code>mod vegetables;</code> in <code>src/garden.rs</code>. The compiler will look for the submodule\u2019s code   within the directory named for the parent module in these places:<ul> <li>Inline, directly following <code>mod vegetables</code>, within curly brackets instead of the semicolon</li> <li>In the file <code>src/garden/vegetables.rs</code></li> <li>In the file <code>src/garden/vegetables/mod.rs</code></li> </ul> </li> <li>Paths to code in modules: Once a module is part of your crate, you can refer to code in that module from   anywhere else in that same crate (as long as the privacy rules allow), using the path to the code. For   example, an <code>Asparagus</code> type in the garden vegetables module would be found at   <code>crate::garden::vegetables::Asparagus</code>.</li> <li>Private vs public: Code within a module is private from its parent modules by default. To make a module   public, declare it with <code>pub mod</code> instead of <code>mod</code>. To make items within a public module public as well,   use <code>pub</code> before their declarations.</li> <li> <p>The <code>use</code> keyword: Within a scope, the <code>use</code> keyword creates shortcuts to items to reduce repetition of   long paths. In any scope that can refer to <code>crate::garden::vegetables::Asparagus</code>, you can create a shortcut   with <code>use crate::garden::vegetables::Asparagus;</code> and from then on you only need to write <code>Asparagus</code> to make   use of that type in the scope.</p> <p>aliases are supported with <code>use</code>:</p> <pre><code>use std::fmt::Result;\nuse std::io::Result as IoResult;\n</code></pre> </li> <li> <p>Re-exporting different structure: Re-exporting is useful when the internal structure of your code is   different from how programmers calling your code would think about the domain. With pub use, we can write   our code with one structure but expose a different structure. Doing so makes our library well organized for   programmers working on the library and programmers calling the library:</p> <pre><code>mod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\npub use crate::front_of_house::hosting;\n</code></pre> </li> </ul>"},{"location":"Rust/#benchmarking-cargo-bench-criterion","title":"Benchmarking: cargo bench &amp; criterion","text":"<p>See criterion crate.</p> <p>The cargo bench command runs special test cases that repeatedly perform an operation, and emits average timing information for the operation.</p> <p>Example of benchmarking <code>factorial</code> function:</p> <pre><code>#![feature(test)]\nextern crate test;\n#[bench]\nfn bench_factorial(b: &amp;mut test::Bencher) {\n    b.iter(|| {\n        let result = factorial(std::hint::black_box(15));\n        assert_eq!(result, 1_307_674_368_000);\n    });\n}\n</code></pre>"},{"location":"Rust/#documentation","title":"Documentation","text":"<p><code>cargo doc</code> build documentation.</p>"},{"location":"Rust/#fuzzing","title":"Fuzzing","text":"<p>cargo fuzz</p> <p>See Fuzz Book</p>"},{"location":"Rust/#enums","title":"Enums","text":"<p>Enum \u201cvalues\u201d as functions:</p> <p>name of each enum variant that we define also becomes an initializer function. We can use these initializer functions as function pointers that implement the closure traits, which means we can specify the initializer functions as arguments for methods that take closures, like so:</p> <pre><code>enum Status {\n    Value(u32),\n    Stop,\n}\n\nlet list_of_statuses: Vec&lt;Status&gt; = (0u32..20).map(Status::Value).collect();\n</code></pre>"},{"location":"Rust/#pattern-matching","title":"Pattern matching","text":"<p>if let</p> <pre><code>} else if let Ok(age) = age {\n    if age &gt; 30 {\n        println!(\"Using purple as the background color\");\n    } else {\n        println!(\"Using orange as the background color\");\n    }\n</code></pre> <p>while let</p> <pre><code>let mut stack = Vec::new();\nstack.push(1);\nstack.push(2);\n\nwhile let Some(top) = stack.pop() {\n    println!(\"{}\", top);\n}\n</code></pre> <p>Function parameters</p> <pre><code>fn print_coordinates(&amp;(x, y): &amp;(i32, i32)) {\n    println!(\"Current location: ({}, {})\", x, y);\n}\n\nfn main() {\n    let point = (3, 5);\n    print_coordinates(&amp;point);\n}\n</code></pre> <p>or</p> <pre><code>match x {\n    1 | 2 =&gt; println!(\"one or two\"),\n</code></pre> <p>Ranges</p> <pre><code>let x = 'c';\n\nmatch x {\n    'a'..='j' =&gt; println!(\"early ASCII letter\"),\n    'k'..='z' =&gt; println!(\"late ASCII letter\"),\n</code></pre> <p>Structural decomposition</p> <pre><code>struct Point {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    //\n    // struct\n    //\n    let p = Point { x: 0, y: 7 };\n    let Point { x, y } = p;\n    let Point { x: a, y: b } = p; // &lt;--- if names of variables are different\n\n    let p = Point { x: 0, y: 7 };\n    match p {\n        Point { x, y: 0 } =&gt; println!(\"On the x axis at {}\", x),\n        Point { x: 0, y } =&gt; println!(\"On the y axis at {}\", y),\n        Point { x, y } =&gt; println!(\"On neither axis: ({}, {})\", x, y),\n    }\n\n    //\n    // Enums:\n    //\n    enum Message {\n        Quit,\n        Move { x: i32, y: i32 },\n    }\n    let msg = Message::Move(0, 160);\n    match msg {\n        Message::Quit =&gt; { ... }\n        Message::Move { x, y } =&gt; { ... }\n\n    //\n    // nested enums\n    //\n    match msg {\n      Message::ChangeColor(Color::Rgb(r, g, b)) =&gt; println!(\n\n    //\n    // nested structs\n    //\n    let ((feet, inches), Point { x, y }) = ((3, 10), Point { x: 3, y: -10 });\n</code></pre> <p>Ignoring many parts of a value:</p> <pre><code>let numbers = (2, 4, 8, 16, 32);\nmatch numbers {\n    (first, .., last) =&gt; {\n        println!(\"Some numbers: {first}, {last}\");\n    }\n}\n</code></pre> <p>arms can be used with <code>if</code>:</p> <pre><code>fn main() {\n    let x = Some(5);\n    let y = 10;\n\n    match x {\n        Some(50) =&gt; println!(\"Got 50\"),\n        Some(n) if n == y =&gt; println!(\"Matched, n = {n}\"),\n        _ =&gt; println!(\"Default case, x = {:?}\", x),\n    }\n</code></pre> <p>storing matched value in a variable:</p> <pre><code>enum Message {\n    Hello { id: i32 },\n}\n\nlet msg = Message::Hello { id: 5 };\n\nmatch msg {\n    Message::Hello {\n        id: id_variable @ 3..=7,\n        //  ^^^^^^^^^^^^^\n        // will be assigned specific value\n    } =&gt; println!(\"Found an id in range: {}\", id_variable),\n</code></pre>"},{"location":"Rust/#traits","title":"Traits","text":"<p>Traits are a mix of C++ concepts and CRTP and pure abstract interfaces:</p> <ul> <li>In the context of templates (aka generics), a trait defines an interface (== concept) and optionally some,   default implementation (== CRTP).<ul> <li>Concepts are compulsory: you will not be able to do much with a template type, unless its traits are   specified (even if the type has the methods you are trying to call).</li> <li>Traits can have typedefs: <code>type Item;</code> in <code>Iterator</code>.</li> </ul> </li> <li>In the context of virtual functions (dyn Trait), trait defines an interface that is similar to pure virtual   functions.</li> </ul> <p>Special functions are introduced as traits. For example if you need your type:</p> <ul> <li>to have a non-trivial destructor, you implement <code>Drop</code> trait for your type.<ul> <li><code>std::mem::drop</code> can drop (call a destructor) earlier than it would happen otherwise.</li> </ul> </li> <li>to implement <code>operator*</code> (in terms of C++), you implement <code>Deref</code> trait for your type.</li> <li>to implement <code>operator+</code>, use <code>use std::ops::Add;</code>.</li> </ul> <p>Traits can \u201cinherit\u201d from other traits. In this case the derived trait says that type implementing it, should also implement the base trait (which is called super-trait):</p> <pre><code>trait OutlinePrint: fmt::Display {      // Any type implementing OutlinePrint, should also implement fmt::Display\n    fn outline_print(&amp;self) {\n        let output = self.to_string();  // &lt;--- because we are using its functions here\n        let len = output.len();\n        println!(\"{}\", \"*\".repeat(len + 4));\n        println!(\"*{}*\", \" \".repeat(len + 2));\n    }\n}\nstruct Point {\n    x: i32,\n    y: i32,\n}\nimpl fmt::Display for Point {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result { write!(f, \"({}, {})\", self.x, self.y) }\n}\nimpl OutlinePrint for Point {}\n</code></pre> <p>Rust can choose an appropriate trait implementation based on self type. In the example below, map calls <code>to_string</code> function of <code>ToString</code> trait and finds the correct implementation of the trait (<code>i32</code>):</p> <pre><code>let list_of_numbers = vec![1, 2, 3];\nlet list_of_strings: Vec&lt;String&gt; =\n    list_of_numbers.iter().map(ToString::to_string).collect();\n</code></pre> <p>Similar (explicit) syntax of calling a trait is also useful in case of collision of names of functions:</p> <ul> <li> <p>Explicit specification if we have an object (<code>self</code>) which can be used to determine which function we   wanted:</p> <pre><code>fn main() {\n    let person = Human;\n    Pilot::fly(&amp;person);\n    Wizard::fly(&amp;person);\n    person.fly();\n}\n</code></pre> </li> <li> <p>Explicit specification if we do not have an object (if the functions are static):</p> <pre><code>trait Animal {\n    fn baby_name() -&gt; String;\n}\nstruct Dog;\nimpl Dog {\n    fn baby_name() -&gt; String { String::from(\"Spot\") }\n}\nimpl Animal for Dog {\n    fn baby_name() -&gt; String { String::from(\"puppy\") }\n}\nfn main() {\n    println!(\"A baby dog is called a {}\", &lt;Dog as Animal&gt;::baby_name());\n    //                                     ^^^^^^^^^^^^^\n}\n</code></pre> </li> </ul>"},{"location":"Rust/#marker-traits","title":"Marker traits","text":"<p>Sometimes, there is some behaviour that you want to distinguish in the type system, but which cannot be expressed as some specific method signature in a trait definition. For example, consider a trait for sorting collections; an implementation might be stable (elements that compare the same will appear in the same order before and after the sort) but there\u2019s no way to express this in the sort method arguments.</p> <p>In this case, it\u2019s still worth using the type system to track this requirement, using a marker trait:</p> <pre><code>pub trait Sort {\n    /// Re-arrange contents into sorted order.\n    fn sort(&amp;mut self);\n}\n\n/// Marker trait to indicate that a [`Sortable`] sorts stably.\npub trait StableSort: Sort {}\n</code></pre> <p>A marker trait has no methods, but an implementation still has to declare that it is implementing the trait. Code that relies on a stable sort can then specify the <code>StableSort</code> trait bound, relying on the honour system to preserve its invariants. Use marker traits to distinguish behaviours that cannot be expressed in the trait method signatures.</p>"},{"location":"Rust/#references-smart-pointers","title":"References &amp; (smart) pointers","text":"<p>Unlike C++, references, pointers and smart-pointers are much more similar, and have same usage:</p> <ul> <li>References has to be dereferenced: <code>let y = &amp;x; assert_eq!(5, *y);</code></li> <li>It allows for interoperability with smart pointers: if we change <code>y</code> to be a <code>Box</code> the <code>assert</code> will still   compile fine.</li> </ul>"},{"location":"Rust/#other","title":"Other","text":""},{"location":"Rust/#logical-const-ness-aka-mutable","title":"Logical const-ness aka mutable","text":"<p>Sometimes there is a field that should be changed on a const object (for example a counter of calls).</p> <p>In C++, <code>mutable</code> or <code>const_cast&lt;&gt;()</code> are used. In Rust <code>RefCell&lt;T&gt;</code> is the solution: it allows us to get mutable as well as immutable references, while enforcing borrow-checker invariants in run-time (the app will crash if more than one mutable reference has been requested).</p>"},{"location":"Rust/#clone-vs-clone-vs-operator","title":"::clone vs .clone vs <code>operator=</code>","text":"<p>The idea is that <code>.clone()</code> perform a deep-copy. It allows us to quickly find places in the code that can be slow.</p> <p>Everything else is supposed and designed to be fast (for example, assigning is a copy if it is an small type, such an integer, or a move otherwise). This is also why Rc pointer is supposed to be copied by</p> <code>::clone</code>, not <code>.clone()</code> <p>We could have called a.clone() rather than Rc::clone(&amp;a), but Rust\u2019s convention is to use Rc::clone in   this case. The implementation of Rc::clone doesn\u2019t make a deep copy of all the data like most types\u2019   implementations of clone do. The call to Rc::clone only increments the reference count, which doesn\u2019t   take much time. By using Rc::clone for reference counting, we can visually distinguish between the   deep-copy kinds of clones and the kinds of clones that increase the reference count.</p> <p>When looking for performance problems in the code, we only need to consider the deep-copy clones and   can disregard calls to Rc::clone</p>"},{"location":"Rust/#multithreading","title":"Multithreading","text":"<p>There are both: message-passing as well as mutexes.</p> <ul> <li>Mutex wraps and owns a data-structure.</li> </ul>"},{"location":"Rust/#using-typedefs","title":"Using &amp; Typedefs","text":"<pre><code>type Result&lt;T&gt; = std::result::Result&lt;T, std::io::Error&gt;;\n// Same as:\n// template &lt;class T&gt;\n// using Result = std::result::Result&lt;T, std::io::Error&gt;;\n</code></pre>"},{"location":"Rust/#arrays","title":"Arrays","text":"<ul> <li>set every value to the same thing with <code>let x = [val; N]</code></li> <li>specify each member individually with <code>let x = [val1, val2, val3]</code></li> </ul>"},{"location":"Rust/#conversions","title":"Conversions","text":"<ul> <li><code>char::from_u32</code></li> <li><code>char::from_u32_unchecked</code></li> </ul>"},{"location":"Rust/#almost-no-implicit-conversions","title":"Almost no implicit conversions","text":"<p>Rust has very few implicit conversions (coercions). Even save integer conversions must be done explicitly:</p> <pre><code>let x: u32 = 2;\nlet y: u64 = x; // ERROR!\n</code></pre>"},{"location":"Rust/#but-it-might-appear-that-it-has-implicit-conversions","title":"But it might appear that it has implicit conversions","text":"<p>But sometimes it might appear that it has implicit conversions:</p> <p>Given these:</p> <pre><code>// Integer value from an IANA-controlled range.\n#[derive(Clone, Copy, Debug)]\npub struct IanaAllocated(pub u64);\n\n// Need this implementation of From:\nimpl From&lt;u64&gt; for IanaAllocated {\n    fn from(v: u64) -&gt; Self {\n        Self(v)\n    }\n}\n\n// Need also this function that takes a trait bound (template):\npub fn is_iana_reserved&lt;T&gt;(s: T) -&gt; bool\nwhere\n    T: Into&lt;IanaAllocated&gt;,\n{\n    let s = s.into();\n    s.0 == 0 || s.0 == 65535\n}\n</code></pre> <p>you can call the last function with just an integer:</p> <pre><code>is_iana_reserved(42)\n</code></pre>"},{"location":"Rust/#types-of-casts","title":"Types of casts","text":"<ul> <li>User defined From / TryFrom</li> <li><code>as</code></li> <li>Coercion (implicit conversion)<ul> <li>Hardcoded in compiler:<ul> <li>mutable reference to a non-mutable references</li> <li>reference to a raw pointer (this isn\u2019t unsafe)</li> <li>closure that happens not to capture any variables into a bare function pointer</li> <li>array to a slice</li> <li>concrete item to a trait object</li> <li>item lifetime to a \u201cshorter\u201d one</li> <li>The second coercion of a user-defined type happens when a concrete item is converted to a trait   object. This operation builds a fat pointer to the item; this pointer is fat because it includes   both a pointer to the item\u2019s location in memory, together with a pointer to the vtable for the   concrete type\u2019s implementation of the trait</li> </ul> </li> <li>Using user-defined functions<ul> <li> <p>user-defined type implements the <code>Deref</code> or the <code>DerefMut</code> trait. These traits indicate that the   user defined type is acting as a smart pointer of some sort</p> <p>In particular, a method that expects a reference argument like <code>&amp;Point</code> can also be fed a <code>&amp;Box&lt;Point&gt;</code>, thanks to Deref implemented by <code>Box</code>.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"Rust/#fat-pointers-trait-objects","title":"Fat pointers &amp; trait objects","text":"<p>Slice in Rust: <code>&amp;[u64]</code> is considered to be a \u201cfat pointer\u201d because it consists two things: start position and length (aka <code>std::span</code>).</p> <p>The second built-in fat pointer type is a trait object: a reference to some item that implements a particular trait. It\u2019s built from a simple pointer to the item, together with an internal pointer to the type\u2019s vtable, giving a size of 16 bytes (on a 64-bit platform). The vtable for a type\u2019s implementation of a trait holds function pointers for each of the method implementations, allowing dynamic dispatch at runtime.</p> <p>So, this notation: <code>&amp;dyn Trait</code> makes this separation clear (it means the pointer is \u201cfat\u201d).</p> <p>Another interesting peculiarity is that it is impossible to cast an object that implements X interface, which is itself derived from Y to Y. While you can use functions from both X and Y, you cannot cast it to Y.</p> <p>Let\u2019s say we have this:</p> <pre><code>trait Shape: Drawable {\n    fn render_in(&amp;self, bounds: Bounds);\n    fn render(&amp;self) {\n        self.render_in(overlap(SCREEN_BOUNDS, self.bounds()));\n    }\n}\n</code></pre> <p>then, a method that accepts a <code>Shape</code> trait object:</p> <ul> <li>can use the methods from <code>Drawable</code> (because <code>Shape</code> also-implements <code>Drawable</code>, and because the relevant   function pointers are present in the <code>Shape</code> vtable)</li> <li>but cannot pass/cast the trait object on to another method that expects a <code>Drawable</code> trait object (because   <code>Shape</code> is-not Drawable, and because the <code>Drawable</code> vtable isn\u2019t available).</li> </ul> <p>This is in contrast to generic method that accepts items that implement <code>Shape</code>:</p> <ul> <li>which can use methods from <code>Drawable</code></li> <li>and which can pass the item on to another generic method that has a <code>Drawable</code> trait bound, because the   trait bound is monomorphized at compile time to use the Drawable methods of the concrete type.</li> </ul>"},{"location":"Rust/#deref-vs-asreft","title":"Deref vs AsRef&lt;T&gt;","text":"<p>The Deref traits can\u2019t be generic (per-target: <code>Deref&lt;Target&gt;</code>) for the destination type. If they were, then it would be possible for some type <code>ConfusedPtr</code> to implement both <code>Deref&lt;TypeA&gt;</code> and <code>Deref&lt;TypeB&gt;</code>, and that would leave the compiler unable to deduce a single unique type for an expression like <code>*x</code>. So instead the destination type is encoded as the associated type named Target.</p> <p>This is in contrast to two other standard pointer traits, the <code>AsRef</code> and <code>AsMut</code> traits. These traits don\u2019t induce special behaviour in the compiler, but also allow conversions to a reference or mutable reference via an explicit call to their trait functions (<code>as_ref()</code> and <code>as_mut()</code> respectively). The destination type for these conversions is encoded as a type parameter (e.g. <code>AsRef&lt;Point&gt;</code>), which means that a single container type can support multiple destinations.</p>"},{"location":"Rust/#borrow-vs-asreft-toowned-cow","title":"Borrow vs AsRef&lt;T&gt; &amp; ToOwned &amp; Cow","text":"<p><code>Borrow</code> and <code>BorrowMut</code> traits each have a single method (<code>borrow</code> and <code>borrow_mut</code> respectively). This method has the same signature as the equivalent <code>AsRef</code> / <code>AsMut</code> trait methods.</p> <p>The key difference in intents between these traits is visible via the blanket implementations that the standard library provides. Given an arbitrary Rust reference <code>&amp;T</code>, there is a blanket implementation of both <code>AsRef</code> and <code>Borrow</code>.</p> <p>However, <code>Borrow</code> also has a blanket implementation for (non-reference) types: <code>impl&lt;T&gt; Borrow&lt;T&gt; for T</code></p> <p>This means that a method accepting the <code>Borrow</code> trait can cope equally with instances of <code>T</code> as well as references-to-T:</p> <pre><code>fn add_four&lt;T: std::borrow::Borrow&lt;i32&gt;&gt;(v: T) -&gt; i32 {\n    v.borrow() + 4\n}\nassert_eq!(add_four(&amp;2), 6);\nassert_eq!(add_four(2), 6);\n</code></pre> <p>The standard library\u2019s container types have more realistic uses of <code>Borrow</code>; for example, <code>HashMap::get</code> uses <code>Borrow</code> to allow convenient retrieval of entries whether keyed by value or by reference.</p> <p>The <code>ToOwned</code> trait builds on the <code>Borrow</code> trait, adding a <code>to_owned()</code> method that produces a new owned item of the underlying type. This is a generalization of the <code>Clone</code> trait: where <code>Clone</code> specifically requires a Rust reference <code>&amp;T</code>, <code>ToOwned</code> instead copes with things that implement <code>Borrow</code>.</p> <p>This means that:</p> <ul> <li>A function that operates on references to some type can accept <code>Borrow</code> so that it can also be called   with moved items as well as references.</li> <li>A function that operates on owned items of some type can accept <code>ToOwned</code> so that it can also be called   with references to items as well as moved items; any references passed to it will be replicated into a   locally owned item.</li> </ul> <p>Although it\u2019s not a pointer type, it\u2019s worth mentioning the <code>Cow</code> type at this point, because it provides an alternative way of dealing with the same kind of situation. <code>Cow</code> is an enum that can hold either owned data, or a reference to borrowed data. A <code>Cow</code> input can stay as borrowed data right up to the point where it needs to be modified, but becomes an owned copy at the point where the data needs to be altered.</p>"},{"location":"Rust/#self-referential-data-structures-pin","title":"Self-Referential Data Structures &amp; Pin","text":"<p>Self-Referential Data Structure is a struct that contains a mixture of owned data together with references to within that owned data:</p> <pre><code>struct SelfRef {\n   text: String,\n   title: Option&lt;&amp;str&gt;, // The slice of `text` that holds the title text.\n}\n</code></pre> <p>The main reason why it does not \u201cjust\u201d work is move semantics:</p> <p>Data structures can move: from the stack to the heap, from the heap to the stack, and from one place to another. If that happens, the \u201cinterior\u201d <code>title</code> pointer would no longer be valid, and there\u2019s no way to keep it in sync.</p> <p>There is one workaround and one proper solution.</p> <p>A simple alternative for this case is to use the indexing approach; a range of offsets into the text is not invalidated by a move, and is invisible to the borrow checker because it doesn\u2019t involve references:</p> <pre><code>struct SelfRefIdx {\n   text: String,\n   title: Option&lt;Range&lt;usize&gt;&gt;, // Indices into `text` where the title text is.\n}\n</code></pre> <p>However, this indexing approach only works for simple examples. A more general version of the self-reference problem turns up when the compiler deals with async code. Roughly speaking, the compiler bundles up a pending chunk of async code into a lambda, and the data for that lambda can include both values and references to those values.</p> <p>That\u2019s inherently a self-referential data structure, and so async support was a prime motivation for the <code>Pin</code> type in the standard library. This pointer type \u201cpins\u201d its value in place, forcing the value to remain at the same location in memory, thus ensuring that internal self-references remain valid.</p> <p>So <code>Pin</code> is available as a possibility for self-referential types, but it\u2019s tricky to use correctly (as its official docs make clear):</p> <ul> <li>The internal reference fields need to use raw pointers, or near relatives (e.g. NonNull) thereof.</li> <li>The type being pinned needs to not implement the Unpin marker trait. This trait is automatically   implemented for almost every type, so this typically involves adding a (zero-sized) field of type   PhantomPinned to the struct definition.</li> <li>The item is only pinned once it\u2019s on the heap and held via Pin; in other words, only the contents of   something like Pin&gt; is pinned. This means that the internal reference fields can only be   safely filled in after this point, but as they are raw pointers the compiler will give you no warning   if you incorrectly set them before calling <code>Box::pin</code>."},{"location":"Rust/#iterators","title":"Iterators","text":""},{"location":"Rust/#iterator-trait","title":"Iterator Trait","text":"<p>Despite being able to iterate over elements, references to elements and mutable references to elements of a collection, there is only one trait.</p> <p>Collections that allow iteration over their contents \u2013 called iterables \u2013 implement the <code>IntoIterator</code> trait. The <code>into_iter</code> method of this trait consumes <code>Self</code> and emits an Iterator in its stead.</p> <p>But the catch is that <code>Self</code> is either <code>Vec&lt;_&gt;</code> or <code>&amp;Vec&lt;_&gt;</code> or &amp;mut <code>Vec&lt;_&gt;</code>.</p> <p>The compiler will automatically use this trait for expressions of the form:</p> <pre><code>for item in collection {\n    // body\n}\n</code></pre>"},{"location":"Rust/#iterator-transformations","title":"Iterator transformations","text":"<p>Some of these tranformations affect the overall iteration process:</p> <ul> <li><code>take(n)</code>, <code>skip(n)</code></li> <li><code>take_while()</code> and <code>skip_while()</code>: same as above, but based on a predicate.</li> <li><code>filter(|item| {...})</code> is the most general version</li> <li><code>step_by(n)</code>:emits every n-th item.</li> <li><code>rev()</code> reverses the direction of an iterator.</li> <li><code>cycle()</code>: converts an iterator that terminates into one that repeats forever, starting at the beginning   again whenever it reaches the end. (The iterator must support Clone to allow this.)</li> <li><code>partition</code>: splits an iterator into two collections based on a predicate</li> </ul> <p>Combining iterators:</p> <ul> <li><code>chain(other)</code> glues together two iterators, to build a combined iterator that moves through one then   the other.</li> <li><code>zip(it)</code>, <code>unzip</code>: zip joins an iterator with a second iterator, to produce a combined iterator that emits pairs of   items, one from each of the original iterators, until the shorter of the two iterators is finished.</li> <li>The <code>flatten()</code> method deals with an iterator whose items are themselves iterators, flattening the result.   On its own, this doesn\u2019t seem that helpful, but it becomes much more useful when combined with the   observation that both <code>Option</code> and <code>Result</code> act as iterators: they produce either zero   (for <code>None</code>, <code>Err(e)</code>) or one (for <code>Some(v)</code>, <code>Ok(v)</code>) items. This means that flattening a stream of   <code>Option</code> / <code>Result</code> values is a simple way to extract just the valid values, ignoring the rest.</li> </ul> <p>Other transformations affect the nature of the Item that\u2019s the subject of the Iterator:</p> <ul> <li><code>map(|item| {...})</code> repeatedly applies a closure to transform each item in turn.</li> <li><code>cloned()</code> produces a clone of all of the items in the original iterator; this is particularly useful with   iterators over &amp;Item references.</li> <li><code>copied()</code> produces a copy of all of the items in the original iterator; this is particularly useful   with iterators over &amp;Item references.</li> <li><code>enumerate()</code> converts an iterator over items to be an iterator over (usize, Item) pairs</li> </ul> <p>Finally, iterator consumers:</p> <ul> <li> <p>Building a single value out of the collection:</p> <ul> <li><code>sum()</code>, <code>product()</code></li> <li><code>min()</code>, <code>max()</code></li> <li><code>min_by(f)</code>, <code>max_by(f)</code> for finding the extreme values of a collection</li> <li><code>reduce(f)</code> is a more general operation that encompasses the previous methods, building an   accumulated value of the Item type by running a closure at each step that takes the value accumulated   so far and the current item.</li> <li><code>fold(f)</code>, <code>try_fold</code> is a generalization of <code>reduce</code>, allowing the \u201caccumulated value\u201d to be of an arbitrary   type (not just the <code>Iterator::Item</code> type).</li> <li><code>scan(f)</code> generalizes in a slightly different way, giving the closure a mutable reference to some   internal state at each step.</li> </ul> </li> <li> <p>Selecting a single value out of the collection:</p> <ul> <li><code>find(p)</code>, <code>try_find</code> finds the first item that satisfies a predicate</li> <li><code>position(p)</code> also finds the first item satisfying a predicate, but this time it returns the index of   the item.</li> <li><code>nth(n)</code> returns the n-th element of the iterator, if available.</li> </ul> </li> <li> <p>Testing against every item in the collection:</p> <ul> <li><code>any(p)</code> indicates whether a predicate is true for any item</li> <li><code>all(p)</code> indicates whether a predicate is true for all items</li> </ul> </li> <li> <p>Accumulate all of the iterated items into a new collection:</p> <ul> <li> <p><code>collect()</code>. In addition to transforming an iterator into a new collection, it can also transform   a sequence of Result\u2019s into Result of a sequence:</p> <pre><code>let res: Vec&lt;u8&gt; = in.into_iter().map(|v| &lt;u8&gt;::try_from(v)).collect::&lt;Result&lt;Vec&lt;_&gt;, _&gt;&gt;()?;\n</code></pre> </li> </ul> </li> </ul>"},{"location":"Rust/#ffi-foreign-function-interface","title":"FFI: foreign function interface","text":"<p>It is possible to call C/C++ function from within Rust (and vice-versa). See this for general info and bindgen for C bindings and cxx for C++.</p>"},{"location":"Rust/#macros","title":"Macros","text":""},{"location":"Rust/#declarative-macros","title":"Declarative Macros","text":"<p>The cargo-expand tool shows the code that the compiler sees, after macro expansion:</p> <pre><code>macro_rules! inc_item {\n    { $x:ident } =&gt; { $x.contents += 1; }\n}\n\nlet mut x = Item { contents: 42 }; // type is not `Copy`\ninc_item!(x);\nprintln!(\"x is {x:?}\");\n</code></pre> <pre><code>let mut x = Item { contents: 42 };\nx.contents += 1;\n{\n    ::std::io::_print(format_args!(\"x is {0:?}\\n\", x));\n};\n</code></pre>"},{"location":"Rust/#procedural-macros","title":"Procedural Macros","text":"<p>There are three distinct types of procedural macro:</p> <ul> <li> <p>Function-like macros: Invoked with an argument:</p> <pre><code>my_func_macro!(15, x + y, f32::consts::PI);\n</code></pre> </li> <li> <p>Attribute macros: Attached to some chunk of syntax in the program:</p> <pre><code>#[log_invocation]\nfn add_three(x: u32) -&gt; u32 {\n    x + 3\n}\n</code></pre> </li> <li> <p>Derive macros: Attached to the definition of a data structure.</p> <p>Derive macros add to the input tokens, instead of replacing them altogether. This means that the data structure definition is left intact but the macro has the opportunity to append related code.</p> <p>Derive macro can declare associated helper attributes, which can then be used to mark parts of the data structure that need special processing:</p> <pre><code>#[derive(Debug, Deserialize)]\nstruct MyData {\n    // If `value` is missing when deserializing, invoke\n    // `generate_value()` to populate the field instead.\n    #[serde(default = \"generate_value\")]\n    value: String,\n}\n</code></pre> </li> </ul>"},{"location":"Rust/#unsafe-rust","title":"Unsafe Rust","text":"<p>There is an interesting asymmetry between trust:</p> <ul> <li>safe code trusts unsafe code (trust is based on assumption that unsafe code was manually checked / verified)</li> <li> <p>but, unsafe code cannot trust safe code</p> <p>For example, BTreeMap cannot trust that <code>Ord</code> trait has been implemented correctly for the key user type. While this might counter-intuitive, the reason for this is that a logical error in implementation of safe code (<code>Ord</code>) leads to a much larger issues in unsafe code. If a faulty <code>Ord</code> implementation is used in safe code, rust will catch it (in the sense that it will not cause memory-related issues). But this is not the case for unsafe code using a faulty implementation of <code>Ord</code>.</p> </li> </ul>"},{"location":"Rust/#exotically-sized-types","title":"Exotically Sized Types","text":"<p>There are two major DSTs (dynamically sized types) exposed by the language:</p> <ul> <li>trait objects: <code>dyn MyTrait</code></li> <li>slices: <code>[T]</code>, <code>str</code>, and others</li> </ul> <p>See Wide/Fat pointers &amp; trait objects above.</p> <p>Structs can actually store a single DST directly as their last field, but this makes them a DST as well:</p> <pre><code>// Can't be stored on the stack directly\nstruct MySuperSlice {\n    info: u32,\n    data: [u8],\n}\n</code></pre> <p>Although such a type is largely useless without a way to construct it. Currently the only properly supported way to create a custom DST is by making your type generic and performing an unsizing coercion:</p> <pre><code>struct MySuperSliceable&lt;T: ?Sized&gt; {\n    info: u32,\n    data: T,\n}\nfn main() {\n    let sized: MySuperSliceable&lt;[u8; 8]&gt; = MySuperSliceable {\n        info: 17,\n        data: [0; 8],\n    };\n    let dynamic: &amp;MySuperSliceable&lt;[u8]&gt; = &amp;sized;\n    // prints: \"17 [0, 0, 0, 0, 0, 0, 0, 0]\"\n    println!(\"{} {:?}\", dynamic.info, &amp;dynamic.data);\n}\n</code></pre> <p>Rust also allows types to be specified that occupy no space:</p> <pre><code>struct Nothing; // No fields = no size\n\n// All fields have no size = no size\nstruct LotsOfNothing {\n    foo: Nothing,\n    qux: (),      // empty tuple has no size\n    baz: [u8; 0], // empty array has no size\n}\n</code></pre> <p>Rust also enables types to be declared that cannot even be instantiated. These types can only be talked about at the type level, and never at the value level. Empty types can be declared by specifying an enum with no variants:</p> <pre><code>enum Void {} // No variants = EMPTY\n</code></pre>"},{"location":"Rust/#struct-layout-types-reprc-reprtransparent-repru-repri-reprpacked-repralignn","title":"Struct layout types: repr(C), repr(transparent), repr(u), repr(i), repr(packed), repr(align(n))","text":"<p>Use <code>repr(C)</code> to pass a struct through FFI or be able to manually control layout (disable Rust tricks, enabled by default)</p>"},{"location":"Rust/#lifetimes","title":"Lifetimes","text":"<p>Lifetime positions can appear as either \u201cinput\u201d or \u201coutput\u201d:</p> <p>For <code>fn</code> definitions, <code>fn</code> types, and the traits <code>Fn</code>, <code>FnMut</code>, and <code>FnOnce</code>, input refers to the types of the formal arguments, while output refers to result types. So fn <code>foo(s: &amp;str) -&gt; (&amp;str, &amp;str)</code> has elided one lifetime in input position and two lifetimes in output position.</p> <p>There is also the logic that allows to change lifetime from one to another (from longer one, such as \u2018static to a shorter one). This is called subtyping. And this is why this code compilers:</p> <p>In almost any context, when you see some requirement of a longer lifetime, like \u2018static, it is possible to \u201cconvert\u201d it to smaller (because \u2018static lives as long as a smaller lifetime). This property is called \u201cbeing covariant\u201d.</p> <p>But this is wrong for function arguments. Function arguments require that a parameter live at least as long as given lifetime (\u2018static). Unlike the case above, we can NOT use a parameter with smaller lifetime for function argument that requires \u2018static. This property is called \u201cbeing contravariant\u201d.</p> <pre><code>fn debug&lt;'a&gt;(a: &amp;'a str, b: &amp;'a str) {\n    println!(\"a = {a:?} b = {b:?}\");\n}\n\nfn main() {\n    let hello: &amp;'static str = \"hello\";\n    {\n        let world = String::from(\"world\");\n        let world = &amp;world; // 'world has a shorter lifetime than 'static\n        debug(hello, world); // hello silently downgrades from `&amp;'static str` into `&amp;'world str`\n    }\n}\n</code></pre> <p>We\u2019re going to pretend that we\u2019re actually allowed to label scopes with lifetimes, and desugar the examples from the start of this chapter. One particularly interesting piece of sugar is that each let statement implicitly introduces a scope</p> <p>Example:</p> <pre><code>let x = 0;\nlet z;\nlet y = &amp;x;\nz = y;\n\n// desugars to:\n\n'a: {\n    let x: i32 = 0;\n    'b: {\n        let z: &amp;'b i32;\n        'c: {\n            // Must use 'b here because the reference to x is\n            // being passed to the scope 'b.\n            let y: &amp;'b i32 = &amp;'b x;\n            z = y;\n        }\n    }\n}\n</code></pre> <p>Example: references that outlive referents</p> <pre><code>fn as_str(data: &amp;u32) -&gt; &amp;str {\n    let s = format!(\"{}\", data);\n    &amp;s\n}\n\n// desugars to:\n\nfn as_str&lt;'a&gt;(data: &amp;'a u32) -&gt; &amp;'a str {\n    'b: {\n        let s = format!(\"{}\", data);\n        return &amp;'a s;\n    }\n}\n</code></pre> <p>This signature of <code>as_str</code> takes a reference to a <code>u32</code> with some lifetime, and promises that it can produce a reference to a <code>str</code> that can live just as long. Already we can see why this signature might be trouble. That basically implies that we\u2019re going to find a <code>str</code> somewhere in the scope the reference to the <code>u32</code> originated in, or somewhere even earlier.</p> <p>Since the contract of our function says the reference must outlive \u2018a, that\u2019s the lifetime we infer for the reference. Unfortunately, s was defined in the scope \u2018b, so the only way this is sound is if \u2018b contains \u2018a \u2013 which is clearly false since \u2018a must contain the function call itself. We have therefore created a reference whose lifetime outlives its referent.</p> <p>To make this more clear, we can expand the example:</p> <pre><code>fn as_str&lt;'a&gt;(data: &amp;'a u32) -&gt; &amp;'a str {\n    'b: {\n        let s = format!(\"{}\", data);\n        return &amp;'a s\n    }\n}\nfn main() {\n    'c: {\n        let x: u32 = 0;\n        'd: {\n            // An anonymous scope is introduced because the borrow does not\n            // need to last for the whole scope x is valid for. The return\n            // of as_str must find a str somewhere before this function\n            // call. Obviously not happening.\n            println!(\"{}\", as_str::&lt;'d&gt;(&amp;'d x));\n        }\n    }\n}\n</code></pre> <p>This is another example that shows why Rust thinks that if a function that takes a reference to X (<code>Vec&lt;u8&gt;</code>) is called, and the function returns a reference to Y (<code>u8</code>), then there is a reference to X in the scope (even if we consider lines after the function).</p> <pre><code>let mut data = vec![1, 2, 3];\nlet x = &amp;data[0];\ndata.push(4);\nprintln!(\"{}\", x);\n\n'a: {\n    let mut data: Vec&lt;i32&gt; = vec![1, 2, 3];\n    'b: {\n        // 'b is as big as we need this borrow to be\n        // (just need to get to `println!`)\n        let x: &amp;'b i32 = Index::index::&lt;'b&gt;(&amp;'b data, 0);\n        'c: {\n            // Temporary scope because we don't need the\n            // &amp;mut to last any longer.\n            Vec::push(&amp;'c mut data, 4);\n        }\n        println!(\"{}\", x);\n    }\n}\n</code></pre> <p>The problem here is a bit more subtle and interesting. We want Rust to reject this program for the following reason: We have a live shared reference x to a descendant of data when we try to take a mutable reference to data to push. This would create an aliased mutable reference, which would violate the second rule of references.</p> <p>However this is not at all how Rust reasons that this program is bad. Rust doesn\u2019t understand that x is a reference to a part of data. It doesn\u2019t understand Vec at all. What it does see is that x has to live for \u2018b in order to be printed. The signature of Index::index subsequently demands that the reference we assign to <code>data</code> has to survive for \u2018b (&lt;\u2014 this is exactly what makes rust think that a mutable reference to vector exists after the function call). When we try to call push, it then sees us try to make an &amp;\u2019c mut data. Rust knows that \u2018c is contained within \u2018b, and rejects our program because the &amp;\u2019b data reference must still be alive!</p>"},{"location":"Rust/#lifetime-elision","title":"Lifetime Elision","text":"<ul> <li>Each elided lifetime in input position becomes a distinct lifetime parameter.</li> <li>If there is exactly one input lifetime position (elided or not), that lifetime is assigned to all elided   output lifetimes.</li> <li>If there are multiple input lifetime positions, but one of them is &amp;self or &amp;mut self, the lifetime of   self is assigned to all elided output lifetimes.</li> <li>Otherwise, it is an error to elide an output lifetime.</li> </ul>"},{"location":"Rust/#drop-check","title":"Drop Check","text":"<p>There are some checks performed by rust when a type that holds references is dropped. This code causes compilation error:</p> <pre><code>struct Inspector&lt;'a&gt;(&amp;'a u8);\n\nimpl&lt;'a&gt; Drop for Inspector&lt;'a&gt; {\n    fn drop(&amp;mut self) {\n        println!(\"I was only {} days from retirement!\", self.0);\n    }\n}\n\nstruct World&lt;'a&gt; {\n    inspector: Option&lt;Inspector&lt;'a&gt;&gt;,\n    days: Box&lt;u8&gt;,\n}\n\nfn main() {\n    let mut world = World {\n        inspector: None,\n        days: Box::new(1),\n    };\n    world.inspector = Some(Inspector(&amp;world.days));\n    // Let's say `days` happens to get dropped first.\n    // Then when Inspector is dropped, it will try to read free'd memory!\n}\n</code></pre> <p>because drop access the references, which is not guaranteed to live long enough.</p> <p>If you need circumvent this:</p> <pre><code>#![feature(dropck_eyepatch)]\n\nstruct Inspector&lt;'a&gt;(&amp;'a u8, &amp;'static str);\n\nunsafe impl&lt;#[may_dangle] 'a&gt; Drop for Inspector&lt;'a&gt; {\n    fn drop(&amp;mut self) {\n        println!(\"Inspector(_, {}) knows when *not* to inspect.\", self.1);\n    }\n}\n</code></pre>"},{"location":"Rust/#phantomdata","title":"PhantomData","text":"<p>When working with unsafe code, we can often end up in a situation where types or lifetimes are logically associated with a struct, but not actually part of a field. This most commonly occurs with lifetimes. For instance, the Iter for &amp;\u2019a [T] is (approximately) defined as follows:</p> <pre><code>struct Iter&lt;'a, T: 'a&gt; {\n    ptr: *const T,\n    end: *const T,\n}\n</code></pre> <p>PhantomData is a special marker type. PhantomData consumes no space, but simulates a field of the given type for the purpose of static analysis. This was deemed to be less error-prone than explicitly telling the type-system the kind of variance that you want, while also providing other useful things such as auto traits and the information needed by drop check.</p> <p>Iter logically contains a bunch of <code>&amp;'a T</code>s, so this is exactly what we tell the PhantomData to simulate:</p> <pre><code>use std::marker;\nstruct Iter&lt;'a, T: 'a&gt; {\n    ptr: *const T,\n    end: *const T,\n    _marker: marker::PhantomData&lt;&amp;'a T&gt;,\n}\n</code></pre> <p>and that\u2019s it. The lifetime will be bounded, and your iterator will be covariant over \u2018a and T.</p>"},{"location":"Rust/#splitting-borrows","title":"Splitting Borrows","text":"<p>borrowck doesn\u2019t understand arrays or slices in any way, so this doesn\u2019t work:</p> <pre><code>let mut x = [1, 2, 3];\nlet a = &amp;mut x[0];\nlet b = &amp;mut x[1];\nprintln!(\"{} {}\", a, b);\n</code></pre> <p>In order to \u201cteach\u201d borrowck that what we\u2019re doing is ok, we need to drop down to unsafe code. For instance, mutable slices expose a <code>split_at_mut</code> function that consumes the slice and returns two mutable slices. One for everything to the left of the index, and one for everything to the right. Intuitively we know this is safe because the slices don\u2019t overlap, and therefore alias. However the implementation requires some unsafety:</p> <pre><code>pub fn split_at_mut(&amp;mut self, mid: usize) -&gt; (&amp;mut [T], &amp;mut [T]) {\n    let len = self.len();\n    let ptr = self.as_mut_ptr();\n\n    unsafe {\n        assert!(mid &lt;= len);\n\n        (from_raw_parts_mut(ptr, mid),\n         from_raw_parts_mut(ptr.add(mid), len - mid))\n    }\n}\n</code></pre>"},{"location":"Rust/#the-dot-operator","title":"The Dot Operator","text":"<p>Suppose we have a function <code>foo</code> that has a receiver (a <code>self</code>, <code>&amp;self</code> or <code>&amp;mut self</code> parameter). If we call <code>value.foo()</code>, the compiler needs to determine what type <code>Self</code> is before it can call the correct implementation of the function. For this example, we will say that <code>value</code> has type <code>T</code>.</p> <p>We will use fully-qualified syntax to be more clear about exactly which type we are calling a function on.</p> <ul> <li>First, the compiler checks if it can call <code>T::foo(value)</code> directly. This is called a \u201cby value\u201d method call.</li> <li>If it can\u2019t call this function (for example, if the function has the wrong type or a trait isn\u2019t   implemented for <code>Self</code>), then the compiler tries to add in an automatic reference. This means that the   compiler tries <code>&lt;&amp;T&gt;::foo(value)</code> and <code>&lt;&amp;mut T&gt;::foo(value)</code>. This is called an \u201cautoref\u201d method call.</li> <li>If none of these candidates worked, it dereferences <code>T</code> and tries again. This uses the <code>Deref</code> trait - if   T: <code>Deref&lt;Target = U&gt;</code> then it tries again with type <code>U</code> instead of <code>T</code>. If it can\u2019t dereference <code>T</code>, it   can also try unsizing <code>T</code>. This just means that if T has a size parameter known at compile time, it   \u201cforgets\u201d it for the purpose of resolving methods. For instance, this unsizing step can convert   <code>[i32; 2]</code> into <code>[i32]</code> by \u201cforgetting\u201d the size of the array.</li> </ul> <p>Example of the method lookup algorithm:</p> <ul> <li> <p>Let\u2019s say we have this:</p> <pre><code>let array: Rc&lt;Box&lt;[T; 3]&gt;&gt; = ...;\nlet first_entry = array[0];\n</code></pre> </li> <li> <p>First, <code>array[0]</code> is really just syntax sugar for the <code>Index</code> trait - the compiler will convert <code>array[0]</code>   into <code>array.index(0)</code>. Now, the compiler checks to see if array implements <code>Index</code></p> </li> <li> <p>The compiler checks if <code>Rc&lt;Box&lt;[T; 3]&gt;&gt;</code> implements <code>Index</code>, but it does not, and neither do   <code>&amp;Rc&lt;Box&lt;[T; 3]&gt;&gt;</code> or <code>&amp;mut Rc&lt;Box&lt;[T; 3]&gt;&gt;</code>.</p> </li> <li>Since none of these worked, the compiler dereferences the <code>Rc&lt;Box&lt;[T; 3]&gt;&gt;</code> into <code>Box&lt;[T; 3]&gt;</code> and tries   again. <code>Box&lt;[T; 3]&gt;</code>, <code>&amp;Box&lt;[T; 3]&gt;</code>, and <code>&amp;mut Box&lt;[T; 3]&gt;</code> do not implement <code>Index</code>,</li> <li>So it dereferences again. <code>[T; 3]</code> and its autorefs also do not implement <code>Index</code>. It can\u2019t   dereference <code>[T; 3]</code>, so the compiler unsizes it, giving <code>[T]</code>. Finally, <code>[T]</code> implements <code>Index</code>, so it   can now call the actual index function.</li> </ul>"},{"location":"Rust/#transmutes-aka-reinterpret_cast","title":"Transmutes (aka reinterpret_cast)","text":"<p><code>mem::transmute&lt;T, U&gt;</code> takes a value of type <code>T</code> and reinterprets it to have type <code>U</code>. The only restriction is that the <code>T</code> and <code>U</code> are verified to have the same size. The ways to cause Undefined Behavior with this are mind boggling.</p> <ul> <li> <p>First and foremost, creating an instance of any type with an invalid state is going to cause arbitrary   chaos that can\u2019t really be predicted. Do not transmute 3 to bool. Even if you never do anything with   the bool. Just don\u2019t.</p> </li> <li> <p>Transmute has an overloaded return type. If you do not specify the return type it may produce a surprising   type to satisfy inference.</p> </li> <li> <p>Transmuting an <code>&amp;</code> to <code>&amp;mut</code> is Undefined Behavior. While certain usages may appear safe, note that the   Rust optimizer is free to assume that a shared reference won\u2019t change through its lifetime and thus such   transmutation will run afoul of those assumptions.</p> </li> <li> <p>When transmuting between different compound types, you have to make sure they are laid out the same way!   If layouts differ, the wrong fields are going to get filled with the wrong data, which will make you   unhappy and can also be Undefined Behavior (see above).</p> <p>So how do you know if the layouts are the same? For <code>repr(C)</code> types and <code>repr(transparent)</code> types, layout is precisely defined. But for your run-of-the-mill <code>repr(Rust)</code>, it is not. Even different instances of the same generic type can have wildly different layout. <code>Vec&lt;i32&gt;</code> and <code>Vec&lt;u32&gt;</code> might have their fields in the same order, or they might not.</p> </li> </ul>"},{"location":"Rust/#working-with-uninitialized-memory","title":"Working With Uninitialized Memory","text":"<p>Like C, all stack variables in Rust are uninitialized until a value is explicitly assigned to them. Unlike C, Rust statically prevents you from ever reading them until you do. Interestingly, Rust doesn\u2019t require the variable to be mutable to perform a delayed initialization.</p> <p>So this compiles:</p> <pre><code>fn main() {\n    let x: i32;\n    if true {\n        x = 1;\n    } else {\n        x = 2;\n    }\n    println!(\"{}\", x);\n}\n</code></pre> <p>There is an interesting case for partially initialised arrays: Safe Rust doesn\u2019t permit you to partially initialize an array.</p> <p>Unsafe Rust gives us a powerful tool to handle this problem: <code>MaybeUninit</code>. This type can be used to handle memory that has not been fully initialized yet. Example of usage:</p> <pre><code>use std::mem::{self, MaybeUninit};\n\n// Size of the array is hard-coded but easy to change (meaning, changing just the constant is\n// sufficient). This means we can't use [a, b, c] syntax to initialize the array, though, as we would\n// have to keep that in sync with `SIZE`!\nconst SIZE: usize = 10;\n\nlet x = {\n    // Create an uninitialized array of `MaybeUninit`. The `assume_init` is safe because the type we are\n    // claiming to have initialized here is a bunch of `MaybeUninit`s, which do not require initialization.\n    let mut x: [MaybeUninit&lt;Box&lt;u32&gt;&gt;; SIZE] = unsafe {\n        MaybeUninit::uninit().assume_init()\n    };\n\n    // Dropping a `MaybeUninit` does nothing. Thus using raw pointer assignment instead of `ptr::write`\n    // does not cause the old uninitialized value to be dropped.\n    for i in 0..SIZE {\n        x[i] = MaybeUninit::new(Box::new(i as u32));\n    }\n\n    // Everything is initialized. Transmute the array to the initialized type.\n    unsafe { mem::transmute::&lt;_, [Box&lt;u32&gt;; SIZE]&gt;(x) }\n};\n\ndbg!(x);\n</code></pre> <p>It\u2019s worth spending a bit more time on the loop in the middle, and in particular the assignment operator and its interaction with drop. If we wrote something like:</p> <pre><code>*x[i].as_mut_ptr() = Box::new(i as u32); // WRONG!\n</code></pre> <p>we would actually overwrite a <code>Box&lt;u32&gt;</code>, leading to drop of uninitialized data, which would cause much sadness and pain.</p> <p>The correct alternative, if for some reason we cannot use <code>MaybeUninit::new</code>, is to use the <code>ptr</code> module. In particular, it provides three functions that allow us to assign bytes to a location in memory without dropping the old value: <code>write</code>, <code>copy</code>, and <code>copy_nonoverlapping</code>.</p> <ul> <li><code>ptr::write(ptr, val)</code> takes a val and moves it into the address pointed to by ptr.</li> <li><code>ptr::copy(src, dest, count)</code> copies the bits that count T items would occupy from src to dest. (this   is equivalent to C\u2019s memmove \u2013 note that the argument order is reversed!)</li> <li><code>ptr::copy_nonoverlapping(src, dest, count)</code> does what copy does, but a little faster on the assumption   that the two ranges of memory don\u2019t overlap. (this is equivalent to C\u2019s memcpy \u2013 note that the argument   order is reversed!)</li> </ul> <p>It\u2019s worth noting that you don\u2019t need to worry about ptr::write-style shenanigans with types which don\u2019t implement Drop or contain Drop types, because Rust knows not to try to drop them. This is what we relied on in the above example.</p> <p>Note that, to use the ptr methods, you need to first obtain a raw pointer to the data you want to initialize. It is illegal to construct a reference to uninitialized data, which implies that you have to be careful when obtaining said raw pointer:</p> <ul> <li>For an array of T, you can use <code>base_ptr.add(idx)</code> where <code>base_ptr: *mut T</code> to compute the address of array   index idx. This relies on how arrays are laid out in memory.</li> <li> <p>For a struct, however, in general we do not know how it is laid out, and we also cannot use   <code>&amp;mut base_ptr.field</code> as that would be creating a reference. So, you must carefully use the <code>addr_of_mut</code>   macro. This creates a raw pointer to the field without creating an intermediate reference:</p> <pre><code>use std::{ptr, mem::MaybeUninit};\n\nstruct Demo {\n    field: bool,\n}\n\nlet mut uninit = MaybeUninit::&lt;Demo&gt;::uninit();\n// `&amp;uninit.as_mut().field` would create a reference to an uninitialized `bool`,\n// and thus be Undefined Behavior!\nlet f1_ptr = unsafe { ptr::addr_of_mut!((*uninit.as_mut_ptr()).field) };\nunsafe { f1_ptr.write(true); }\n\nlet init = unsafe { uninit.assume_init() };\n</code></pre> </li> </ul>"},{"location":"Rust/#leaking","title":"Leaking","text":"<p>Sometimes, leaking just causes\u2026 leaks. But it sometimes it leads to memory issues.</p> <ul> <li> <p>vec example: <code>drainer</code> is an entity that remembers what elements were drained, and whenever its   destructor (drop) is called, it shifts remaining elements of vector, overwriting \u201cdrained\u201d ones. The   problem is to implement this correctly in the face of code like: <code>mem::forget(drainer)</code>: if we are not   careful, user can use the elements that were drained.</p> <p>The solution is to temporarily set_len to 0 (and restore it in drainer\u2019s drop). Which means that if user <code>mem::forget(drainer)</code>, the length of vector will be 0, and the user cannot read any element.</p> </li> <li> <p>Another example is implementation of Rc. It has a reference counter. If we are allowed to <code>mem::forget</code>   then we can overflow it (which means we can make it 0 as many times as we want), but it will lead to double   free. The solution is NOT to overflow (but crash, for example).</p> </li> </ul>"},{"location":"Rust/#exceptions","title":"Exceptions","text":"<p>While Rust does not have exceptions in the sense of C++, code in Rust can panic, and one of the possibilities for what happens is exception &amp; stack unwinding. It means that unsafe code should either use low-level C-like functions which cannot throw exceptions / panic, or it should be ready for an exception.</p> <p>Example 1: Vec::push_all</p> <pre><code>impl&lt;T: Clone&gt; Vec&lt;T&gt; {\n    fn push_all(&amp;mut self, to_push: &amp;[T]) {\n        self.reserve(to_push.len());\n        unsafe {\n            // can't overflow because we just reserved this\n            self.set_len(self.len() + to_push.len());\n\n            for (i, x) in to_push.iter().enumerate() {\n                self.ptr().add(i).write(x.clone());\n            }\n        }\n    }\n}\n</code></pre> <p>Need to move set_len to after the loop, as otherwise we set_len and then x.clone() can panic.</p> <p>There is also an example of how to \u201cemulate\u201d try/catch block</p>"},{"location":"Rust/#std-types","title":"std types","text":"<p>Some \u201cnotable\u201d combinations of smart-pointers:</p> <ul> <li><code>Rc&lt;RefCell&lt;T&gt;&gt;</code>: for interior mutability in single-threaded code</li> <li><code>Arc&lt;Mutex&lt;T&gt;&gt;</code>: for interior mutability in multithreaded code</li> </ul>"},{"location":"Rust/#other_1","title":"Other","text":"<ul> <li><code>std::any</code></li> </ul>"},{"location":"Rust/#useful-crates","title":"Useful crates","text":"<ul> <li>anyhow error</li> <li>derive_builder</li> </ul>"},{"location":"English/Grammar/01.Infinitive/","title":"Infinitive","text":""},{"location":"English/Grammar/01.Infinitive/#functions-of-the-zero-infinitive","title":"Functions of the Zero Infinitive","text":""},{"location":"English/Grammar/01.Infinitive/#the-zero-infinitive-after-verbs-of-perception","title":"The zero infinitive after verbs of perception.","text":"<p>With verbs of perception, the pattern is verb + object + zero infinitive:</p> <ul> <li>He saw her fall from the cliff.</li> <li>We heard them close the door.</li> <li>They saw us walk toward the lake.</li> <li>She felt the spider crawl up her leg.</li> </ul>"},{"location":"English/Grammar/01.Infinitive/#the-zero-infinitive-after-the-verbs-make-and-let","title":"The zero infinitive after the verbs make and let","text":"<p>Also see Causative</p> <ul> <li>Her parents let her stay out late.</li> <li>Let\u2019s go to the cinema tonight.</li> <li>You made me come with you.</li> <li>Don\u2019t make me study that boring grammar book!</li> </ul>"},{"location":"English/Grammar/01.Infinitive/#the-zero-infinitive-with-why","title":"The zero infinitive with why","text":"<p>The question word why is followed by the zero infinitive when making suggestions:</p> <ul> <li>Why wait until tomorrow?</li> <li>Why not ask him now?</li> <li>Why leave before the end of the game?</li> <li>Why walk when we can go in the car?</li> <li>Why not buy a new bed?</li> </ul>"},{"location":"English/Grammar/01.Infinitive/#functions-of-infinitive","title":"Functions of Infinitive","text":""},{"location":"English/Grammar/01.Infinitive/#attribute","title":"Attribute","text":"<p>The Active Voice:</p> <ul> <li>The scientists to solve this problem work at our institute.</li> <li>He was the first to solve the problem.</li> </ul> <p>The Passive Voice:</p> <ul> <li>The problem to be solved is very interesting.</li> <li>It was the first problem to be solved.</li> </ul>"},{"location":"English/Grammar/01.Infinitive/#for-complex","title":"For complex","text":"<p>The Active Voice:</p> <ul> <li>New conditions are needed for him to solve the problem.</li> <li>For a wire to be a good conductor, it has to be made of low resistance metal.</li> <li>For him to realize this dependence is rather difficult.</li> <li>The tendency was for the substance to become ionised.</li> <li>He wanted for me to check the result.</li> </ul> <p>The Passive Voice:</p> <ul> <li>For the problem to be solved you must join forces.</li> </ul>"},{"location":"English/Grammar/01.Infinitive/#other","title":"Other","text":"<ul> <li>The phenomenon to be considered later was discovered in 1923.</li> <li>These questions will be discussed at the conference shortly to open in Moscow.</li> <li>Newton was the first to discover the law of gravitation.</li> </ul>"},{"location":"English/Grammar/01.Infinitive/#complex-object","title":"Complex Object","text":"<ul> <li>I would like the results to be given in a tabular form.</li> <li>He proved his theory to be correct.</li> <li>We take this value to be zero.</li> <li>This apparatus enables accurate measurements to be made.</li> </ul>"},{"location":"English/Grammar/01.Infinitive/#complex-subject","title":"Complex Subject","text":"<ul> <li>This scientist is known to have developed a new theory.</li> <li>His theory proved to be correct.</li> <li>There seems to be nobody there.</li> <li>There appears to be an excess of particles.</li> <li>Exact data are unlikely to have been obtained.</li> <li>An effect known to be due to the space charge is found by Meyer.</li> <li>Substances, thought to possess this property are properly investigated.</li> </ul>"},{"location":"English/Grammar/01.Infinitive/#tenses-of-infinitive-1","title":"\u201cTenses\u201d of infinitive \u2014 [1]","text":""},{"location":"English/Grammar/01.Infinitive/#simple-infinitive-1-2","title":"Simple Infinitive \u2014 [1], [2].","text":"<p>Active Voice:</p> <ul> <li>She plans to invite them.</li> <li>Mike is afraid to make mistakes.</li> </ul> <p>Passive Voice.</p> <p>It is particularly common after auxiliary verbs (may, should, could, etc.) to indicate what is possible or what is correct. The passive infinitive is formed: to be + past participle.</p> <ul> <li>They expect to be invited.</li> <li>I am expecting to be given a pay-rise next month.</li> <li>She is hoping to be elected president.</li> <li>The carpet needs to be washed.</li> <li>These doors should be shut at night.</li> <li>This window may be opened but that one must stay closed.</li> </ul>"},{"location":"English/Grammar/01.Infinitive/#continuous-infinitive-1","title":"Continuous infinitive \u2014 [1].","text":"<p>The continuous infinitive is used to express a continuing action after a verb or auxiliary which must be followed by the infinitive. The continuous infinitive is formed: to be + present participle.</p> <p>As with the present infinitive, there are situations where the zero form of the continuous infinitive is required, so the word to is omitted. This happens after most modal auxiliaries, and in other places where zero infinitives are used:</p> <ul> <li>I\u2019d really like to be swimming in a nice cool pool right now.</li> <li>I happened to be waiting for the bus when the accident happened.</li> <li>It must be nice to be going to a wedding overseas.</li> <li>You must be joking!</li> <li>We should be hurrying. We\u2019re late! (See Modal Verbs below)</li> <li>You\u2019d better be working on your report when I get there.</li> </ul>"},{"location":"English/Grammar/01.Infinitive/#perfect-infinitive-1-2","title":"Perfect Infinitive \u2014 [1], [2].","text":"<p>Active Voice.</p> <p>The perfect infinitive is most commonly found in type 3 conditional sentences as part of the conditional perfect, although it can be used in other places as well. The perfect infinitive is formed: to have + past participle. As with the present infinitive, there are situations where the zero form of the perfect infinitive is required:</p> <ul> <li>He pretended to have seen the film.</li> <li>Before I turn 40, I want to have written a book.</li> <li>I would like to have been to the Taj Mahal when I was in India.</li> <li>If I had known you were coming I would have baked a cake. (See Modal Verbs below)</li> <li>Someone must have broken the window and climbed in. (See Modal Verbs below)</li> <li>That man may have noticed the bank robbers\u2019 getaway car. (See Modal Verbs below)</li> </ul> <p>Passive Voice.</p> <ul> <li>I am happy to have been invited.</li> <li>I was on honour to have been chosen for the award.</li> </ul>"},{"location":"English/Grammar/01.Infinitive/#perfect-continuous-infinitive-1","title":"Perfect continuous infinitive \u2014 [1].","text":"<p>The perfect continuous infinitive is used to express a continuing but now completed action after a verb which must be followed by the infinitive. The perfect infinitive is formed: to have been + present participle. As with the present infinitive, there are situations where the zero form of the perfect continuous infinitive is required:</p> <ul> <li>The woman seemed to have been crying.</li> <li>He pretended to have been painting all day.</li> <li>I would have preferred to have been sleeping all afternoon.</li> <li>You must have been waiting for hours! (See Modal Verbs below)</li> <li>They might have been talking before you came in. (See Modal Verbs below)</li> <li>You should have been studying for your test. (See Modal Verbs below)</li> </ul>"},{"location":"English/Grammar/02.-ing/","title":"-ing: Gerund &amp; Present Participles","text":""},{"location":"English/Grammar/02.-ing/#present-participles-1","title":"Present Participles \u2014 [1].","text":""},{"location":"English/Grammar/02.-ing/#after-verbs-of-perception","title":"\u2026 after verbs of perception","text":"<ul> <li>We saw him swimming across the pond.</li> <li>I watched her painting Sarah\u2019s portrait.</li> <li>I couldn\u2019t hear her singing because of the noise.</li> <li>I would like to see you knitting sometime.</li> </ul>"},{"location":"English/Grammar/02.-ing/#after-verbs-of-movement-action-or-position","title":"\u2026after verbs of movement, action or position","text":"<p>\u2026 to indicate parallel activities:</p> <ul> <li>She sat looking at the sea.</li> <li>He walks reading his newspaper.</li> <li>I cook listening to the radio.</li> <li>Sally lay listening to the bugs in the grass.</li> </ul>"},{"location":"English/Grammar/02.-ing/#for-two-actions-at-the-same-time","title":"\u2026 for two actions at the same time","text":"<p>When two actions occur at the same time, and are done by the same person or thing, we can use a present participle to describe one of them. When one action follows very quickly after another done by the same person or thing, we can express the first action with a present participle:</p> <ul> <li>Whistling to himself, he walked down the road. (He whistled to himself as he walked down the road)</li> <li>They went laughing out into the snow. (They laughed as they went out into the snow)</li> <li>Dropping the gun, she put her hands in the air. (She dropped the gun and put her hands in the air)</li> <li>Putting on his coat, he left the house (He put on his coat and left the house)</li> </ul>"},{"location":"English/Grammar/02.-ing/#as-adjectives","title":"\u2026 as adjectives","text":"<ul> <li>Did you read that amazing book?</li> <li>This movie is so exciting!</li> <li>His economics class is boring.</li> </ul>"},{"location":"English/Grammar/02.-ing/#with-the-verbs-spend-and-waste","title":"\u2026 with the verbs spend and waste","text":"<ul> <li>My boss spends two hours a day travelling to work.</li> <li>Don\u2019t waste time playing computer games!</li> <li>They\u2019ve spent the whole day shopping.</li> <li>I wasted money buying this game.</li> </ul>"},{"location":"English/Grammar/02.-ing/#with-the-verbs-catch-and-find","title":"\u2026 with the verbs catch and find","text":"<ul> <li>If I catch you stealing my apples again, there\u2019ll be trouble!</li> <li>Don\u2019t let him catch you reading his letters.</li> <li>I caught him going through my bag.</li> <li>We found some money lying on the ground.</li> <li>They found their mother sitting in the garden.</li> </ul>"},{"location":"English/Grammar/02.-ing/#to-explain-a-reason","title":"\u2026 to explain a reason","text":"<p>The present participle can be used instead of a phrase starting with as, since, or because. In this usage the participial phrase explains the cause or reason for an action:</p> <ul> <li>Feeling hungry, he went into the kitchen and opened the fridge.</li> <li>Being poor, he didn\u2019t spend much on clothes.</li> <li>Knowing that his mother was coming, he cleaned the flat.</li> <li>He whispered, thinking his brother was still asleep.</li> </ul>"},{"location":"English/Grammar/02.-ing/#complex-gerund","title":"Complex Gerund","text":"<ul> <li>The trouble is his not having taken enough readings.</li> <li>I know of his (Peter\u2019s) using this method.</li> <li>The possibility of chemical energy being transformed into electric energy is evident.</li> <li>The first indication of there being such a particle was given in his paper.</li> <li>Combustion was incomplete due to insufficient oxygen being present.</li> </ul>"},{"location":"English/Grammar/02.-ing/#gerund-1","title":"Gerund \u2014 [1]","text":"<p>The gerund always has the same function as a noun, although it looks like a verb. It can be used in the same way as a noun.</p> <p>Usages of gerund after prepositions and certain specific verbs see below in \u201csomething followed by something rules\u201d.</p>"},{"location":"English/Grammar/02.-ing/#as-the-subject-of-the-sentence","title":"\u2026 as the subject of the sentence","text":"<ul> <li>Eating people is wrong.</li> <li>Hunting tigers is dangerous.</li> <li>Flying makes me nervous.</li> <li>Brushing your teeth is important.</li> <li>Smoking causes lung cancer.</li> </ul>"},{"location":"English/Grammar/02.-ing/#as-the-compliment-of-the-verb-to-be","title":"\u2026 as the compliment of the verb to be","text":"<ul> <li>One of his duties is attending meetings.</li> <li>The hardest thing about learning English is understanding the gerund.</li> <li>One of life\u2019s pleasures is having breakfast in bed.</li> </ul>"},{"location":"English/Grammar/02.-ing/#tenses-of-gerund-1-2-3","title":"\u201cTenses\u201d of gerund \u2014 [1], [2], [3].","text":""},{"location":"English/Grammar/02.-ing/#simplepresent","title":"Simple/Present","text":"<p>Active:</p> <ul> <li>I like swimming.</li> <li>I regret not calling you.</li> <li>Not being very good with cars, I asked the mechanic to take a look.</li> <li>The man driving the car is a friend of mine. (The man who is driving the car is a friend of mine)</li> <li>Students handing in their essays late will lose ten marks. (Students who hand in their essays late will lose ten marks)</li> </ul> <p>Passive:</p> <ul> <li>She hates being told what to do.</li> <li>I am tired of being insulted!</li> <li>Being robbed is an awful experience.</li> <li>The poem being read by the actor was written by my brother. (The poem that is being read by the actor was written by my brother)</li> <li>The strawberries being eaten at the wedding were grown in Scotland. (The strawberries that are being eaten at the wedding\u2026).</li> </ul>"},{"location":"English/Grammar/02.-ing/#past","title":"Past","text":"<p>Active:</p> <ul> <li>I am proud of having completed university.</li> <li>Having gone to college is one of the best things I have ever done.</li> </ul> <p>Passive:</p> <ul> <li>I am still angry about having been fired by her.</li> <li>Are not you upset about having been lied to?</li> </ul>"},{"location":"English/Grammar/02.-ing/#fifty-shades-of-gerund-1-2-3-4","title":"Fifty shades of gerund \u2014 [1], [2], [3], [4]","text":"<p>The difference in the usage of gerunds and nouns is simple and obvious:</p> <ul> <li>gerunds must be used without articles and the preposition of: I will start deleting the files.</li> <li>whereas nouns require an article before and the preposition of after: I will start the deletion of the files.</li> </ul> <p>What is not obvious is when an -ing-ending word is a gerund or a noun. Moreover, adding an article and the preposition often turns a gerund into deverbal noun:</p> <ul> <li>After I finish cleaning the bathroom I\u2019m free to go.</li> <li>After I finish the cleaning of the bathroom I\u2019m free to go.</li> </ul> <p>To be precise, there is gradation of at least 15 elements between the deverbal noun (e.g. I own 17 paintings) and the present participle in a finite verb phrase (I am painting the cat). From Quirk &amp; Greenbaum, A University Grammar of English:</p> <ol> <li>Some paintings of Brown\u2019s (ie some paintings that Brown owns)</li> <li>Brown\u2019s paintings of his daughter (ie paintings owned by Brown, depicting his daughter but painted by someone else)</li> <li>Brown\u2019s paintings of his daughter (ie they depict his daughter and were painted by him) </li> <li>The painting of Brown is as skilful as that of Gainsborough (ie Brown\u2019s (a) technique of painting or (b) action of painting)</li> <li>Brown\u2019s deft painting of his daughter is a delight to watch (ie it is a delight to watch while Brown deftly paints his daughter)</li> <li>Brown\u2019s deftly painting his daughter is a delight to watch ( = [4b] and [5] in meaning)</li> <li>I dislike Brown\u2019s painting his daughter (ie I dislike either (a) the fact or (b) the way Brown docs it)</li> <li>I dislike Brown painting his daughter ( = [7a]) </li> <li>I watched Brown painting his daughter (ie: either I watched Brown as he painted or I watched the process of Brown(\u2019s) painting his daughter)</li> <li>Brown deftly painting his daughter is a delight to watch ( = [4b] and [5]) </li> <li>Painting his daughter, Brown noticed that his hand was shaking (ie while he was painting)</li> <li>Brown painting his daughter that day, I decided to go for a walk (ie since Brown was painting) </li> <li>The man painting the girl is Brown (ie who is painting)</li> <li>The silently painting man is Brown (ie who is silently painting)</li> <li>He is painting his daughter</li> </ol> <p>Examples 1, 2 and 3 are clearly deverbal nouns. 4 and 5, and possibly 6 are clearly what people would normally call gerunds. 14 is what most people would call a gerundive and 15 is the plain old participle. The rest, to me at least, is a grey area.</p>"},{"location":"English/Grammar/02.-ing/#possessive-gerunds-1","title":"Possessive Gerunds \u2014 [1]","text":"<ul> <li>I appreciate your coming here.</li> <li>He resents Marry\u2019s being promoted.</li> <li>I am tired of Migel\u2019s complaining.</li> <li>I need to talk to you about your writing.</li> </ul>"},{"location":"English/Grammar/02.-ing/#infinitive-vs-ing-having-past-participle-vs-past-participle","title":"Infinitive vs -ing: having + past participle vs past participle","text":""},{"location":"English/Grammar/02.-ing/#having-past-participle-vs-past-participle","title":"having + past participle vs past participle","text":"<ul> <li>Finished with the book, I had a holiday.</li> <li>Having finished the book, I had a holiday.</li> </ul> <p>Seeing the red light ahead, I slowed down. Progressive participle describes something that the subject of the sentence, (I), was doing at the time the sentence refers to.</p> <p>Hating to walk, she hailed a taxi. In this case, hate is still a verb that applies at the time of the main action.</p> <p>Hated by everyone, Bob didn\u2019t have anything to do on his birthday. Here, the subject of the main verb, Bob, isn\u2019t doing the verb in the participle phrase. Bob is described by the participle phrase. It has passive meaning.</p> <p>Covered in yellow paint, the building cannot be missed. Ditto here, covered has a passive meaning, and it applies at the time of the main action, in other words, it can be said in this way: The building is covered in yellow paint. The building cannot be missed.</p> <p>In your example above, you cannot say I am finished the book. However, you might say you are finished with the book, so if you really want to use a past participle phrase, you could say: Finished with the book, I had a holiday.</p> <p>The second sentence in that example (above), it is a progressive participle phrase. You had finished the book. This is essentially creating a progressive participle phrase out of a past or present perfect, and the tense of the \u2018separated\u2019 version of that participle is set by the tense of the principal verb:</p> <ul> <li>Having finished the book, I had a holiday.</li> <li>I had finished the book. I had a holiday.</li> </ul> <p>So, back to your first example. The first version is a perfect use of a perfect participle phrase:</p> <ul> <li>Faced with a bill for $10,000, he has taken an extra job.</li> <li>He is faced with a bill for $10,000. He has taken an extra job.</li> </ul> <p>The second version introduces having completely unnecessarily. If you really, really want to use having, you need to find a way of putting where you can say He has/had\u2026. The way to do that with the idea of facing this bill would be:</p> <ul> <li>Having been faced with a bill for $10,000, he has taken an extra job.</li> <li>He has been faced with a bill for $10,000. He has taken an extra job.</li> </ul>"},{"location":"English/Grammar/02.-ing/#resume-wiki","title":"Resume. Wiki","text":"<p>-ing:</p> <ul> <li>Ving: Hating to walk, she\u2026 \u2014 active, expresses the same tense (tense-less?) and refers to the same   subject as in the main clause.</li> <li>V3: Hated by everyone, Bob\u2026 \u2014 passive, expresses the same tense (tense-less?) and refers to the   same subject as in the main clause.</li> <li>Having + V3: Having won every competition, he decided to retire. \u2014 active, expresses tense shifted   back relative to the tense in the main clause, refers to the same subject as in the main clause.</li> <li>Being + V3: The poem being read by the actor was written by my brother. \u2014 passive, expresses the   same tense (tense-less?).</li> <li>Having been + V3: Having been hunted close to extinction, the rhino is once again common in this area. \u2014   passive, tense shifted backward.</li> </ul> <p>Infinitive:</p> <ul> <li>She plans to invite them. \u2014 active, tense is unchanged.</li> <li>He pretended to have seen the film. \u2014 active, tense shifted backward.</li> <li>They expect to be invited. \u2014 passive, the same tense.</li> <li>I am happy to have been invited. \u2014 passive, tense shifted backward.</li> </ul>"},{"location":"English/Grammar/03.ModalVerbs/","title":"Modal Verbs","text":""},{"location":"English/Grammar/03.ModalVerbs/#tenses-of-modal-verbs-1","title":"\u201cTenses\u201d of modal verbs \u2014 [1]","text":"<p>Depending on the context, tenses of modal verbs can be expressed as follows (see source link for more details):</p>"},{"location":"English/Grammar/03.ModalVerbs/#can","title":"Can","text":"<ul> <li>ability: I can ride a horse.</li> <li>opportunity: We can stay with my brother when we are in Paris.</li> <li>permission: She cannot stay out after 10 PM.</li> <li>request: Can you hand me the stapler?</li> <li>possibility: Any child can grow up to be president.</li> </ul> <p>Present Positive: can</p> <p>Present Negative: can\u2019t</p> <p>Past Positive: could, was able to, was allowed to</p> <p>Past Negative: couldn\u2019t, wasn\u2019t able to, wasn\u2019t allowed to</p> <p>Future Positive: will be able to, can</p> <p>Future Negative: won\u2019t be able to, can\u2019t</p>"},{"location":"English/Grammar/03.ModalVerbs/#could","title":"Could","text":"<ul> <li>possibility: Extreme rain could cause the river to flood the city.</li> <li>past ability: Nancy could ski like a pro by the age of 11.</li> <li>suggestion: You could see a movie or go out to dinner.</li> <li>request: Could I use your computer to email my boss?</li> <li>conditional: We could go on the trip if I didn\u2019t have to work this weekend.</li> </ul> <p>Present Positive: could</p> <p>Present Negative: couldn\u2019t</p> <p>Past Positive: could have traveled</p> <p>Past Negative: couldn\u2019t have traveled </p> <p>Future Positive: could</p> <p>Future Negative: couldn\u2019t</p>"},{"location":"English/Grammar/03.ModalVerbs/#have-to","title":"Have to","text":"<ul> <li>certainty: This answer has to be correct.</li> <li>necessity: The soup has to be stirred continuously to prevent burning.</li> <li>obligation: They have to leave early.</li> </ul> <p>Present Positive: have to</p> <p>Present Negative: must not, doesn\u2019t have to</p> <p>Past Positive: ???, had to</p> <p>Past Negative: ???, did not have</p> <p>Future Positive: will have to</p> <p>Future Negative: won\u2019t have to</p>"},{"location":"English/Grammar/03.ModalVerbs/#must","title":"Must","text":"<ul> <li>certainty: This must be the right address!</li> <li>necessity: Students must pass an entrance examination to study at this school.</li> <li>strong recommendation: You must take some medicine for that cough.</li> <li>prohibition: Jenny, you must not play in the street!</li> </ul> <p>Present Positive: must</p> <p>Present Negative: must not, don\u2019t have to</p> <p>Past Positive: must have been, should have taken, had to have</p> <p>Past Negative: must not have been, shouldn\u2019t have drunk, didn\u2019t have to get</p> <p>Future Positive: should, must</p> <p>Future Negative: shouldn\u2019t, won\u2019t have to get</p>"},{"location":"English/Grammar/03.ModalVerbs/#might","title":"Might","text":"<ul> <li>possibility: Your purse might be in the living room.</li> <li>conditional: If I didn\u2019t have to work, I might go with you.</li> <li>suggestion: You might visit the botanical gardens during your visit.</li> <li>request: Might I borrow your pen?</li> </ul> <p>Present Positive: might</p> <p>Present Negative: might not</p> <p>Past Positive: might have taken</p> <p>Past Negative: might not have taken</p> <p>Future Positive: might</p> <p>Future Negative: might not</p>"},{"location":"English/Grammar/03.ModalVerbs/#should","title":"Should","text":"<ul> <li>recommendation: When you go to Berlin, you should visit the palaces in Potsdam.</li> <li>advice: You should focus more on your family and less on work.</li> <li>obligation: I really should be in the office by 7:00 AM.</li> <li>expectation: By now, they should already be in Dubai.</li> </ul> <p>Present Positive: should</p> <p>Present Negative: shouldn\u2019t</p> <p>Past Positive: should have eaten</p> <p>Past Negative: shouldn\u2019t have smoked</p> <p>Future Positive: should</p> <p>Future Negative: shouldn\u2019t</p>"},{"location":"English/Grammar/03.ModalVerbs/#may","title":"May","text":"<ul> <li>possibility: Cheryl may be at home, or perhaps at work.</li> <li>give permission: Johnny, you may leave the table when you have finished your dinner.</li> <li>request permission: May I use your bathroom?</li> </ul> <p>Present Positive: may</p> <p>Present Negative: may not</p> <p>Past Positive: may have been, were allowed to</p> <p>Past Negative: may not have been, were not allowed</p> <p>Future Positive: may</p> <p>Future Negative: may not</p>"},{"location":"English/Grammar/03.ModalVerbs/#shall","title":"Shall","text":"<p>Uses1: Offers, suggestions and advice. We use shall I and shall we to make offers and suggestions, and to ask for advice.</p> <p>Uses2: Predictions and intentions. We use shall instead of will with I and we in rather formal contexts to make predictions and to talk about intentions or decisions. It is much less common than will.</p> <ul> <li>suggestion: Shall I help you?</li> <li>promise: I shall never forget where I came from.</li> <li>predestination: He shall become our next king.</li> <li>inevitability: I\u2019m afraid Mr. Smith shall become our new director.</li> </ul>"},{"location":"English/Grammar/03.ModalVerbs/#ought-to-1-2","title":"Ought to \u2014 [1], [2].","text":"<ul> <li>recommendation: You ought to stop smoking. </li> <li>expected because he deserves it: Jim ought to get the promotion.</li> <li>probability: This stock ought to increase in value.</li> <li>advice against something (notice there is no \u201cto\u201d): Mark ought not drink so much.</li> </ul> <p>Present Positive: ought</p> <p>Present Negative:</p> <p>Past Positive: ought to have exercised</p> <p>Past Negative:</p> <p>Future Positive: ought to</p> <p>Future Negative:</p>"},{"location":"English/Grammar/03.ModalVerbs/#uses1","title":"Uses1","text":"<p>What is desired or ideal. We use ought to when talking about things which are desired or ideal:</p> <ul> <li>They ought to have more parks in the city centre.</li> <li>We ought to eat lots of fruit and vegetables every day.</li> </ul> <p>We use ought to have + V3 form to talk about things that were desired or ideal in the past but which didn\u2019t happen. It can express regret:</p> <ul> <li>We ought to have locked the gate. Then the dog wouldn\u2019t have got out. (The ideal or desired thing was that we locked the gate, but we didn\u2019t.)</li> <li>I often think that I ought to have studied medicine not pharmacy. (I would be happier now if I had studied medicine.)</li> </ul>"},{"location":"English/Grammar/03.ModalVerbs/#uses2","title":"Uses2","text":"<p>What is likely. We can use ought to when we talk about what is likely or probable:</p> <ul> <li>The concert ought to only take about two hours so we\u2019ll be home by 12 pm.</li> <li>There ought to be some good films at the cinema this weekend.</li> </ul>"},{"location":"English/Grammar/03.ModalVerbs/#the-negative","title":"The negative","text":"<p>The negative is formed by adding \u2018not\u2019 after ought (ought not to). It can be contracted to oughtn\u2019t to. The negative of ought to is not common. We usually use shouldn\u2019t or should not instead.</p>"},{"location":"English/Grammar/03.ModalVerbs/#ought-to-or-should","title":"Ought to or should?","text":"<p>Ought to and should are similar in meaning. Should is more common than ought to. Ought to is more formal than should:</p>"},{"location":"English/Grammar/03.ModalVerbs/#to-be-to-to-be-to-have-v3","title":"to be to. to be to + have V3","text":"<p>to be to expresses arrangements, plans:</p> <ul> <li>We are to meet our friend at the station.</li> <li>The meeting is to be held tomorrow.</li> <li>They were to meet outside the cinema. (It is unknown whether they succeeded in meeting or not)</li> </ul> <p>Use to be to + have V3 when previously scheduled plans were abandoned: * They were to have met outside the cinema. (They did not meet)</p>"},{"location":"English/Grammar/03.ModalVerbs/#need","title":"need","text":"<p>Need can also play a role of modal verb.</p> <ul> <li>You needn\u2019t go into details</li> <li>You needn\u2019t have waited for the manager, the secretary could have signed the papers</li> </ul>"},{"location":"English/Grammar/03.ModalVerbs/#modal-verbs-forms-1-2-3-4","title":"Modal verbs\u2019 forms \u2014 [1], [2], [3], [4].","text":""},{"location":"English/Grammar/03.ModalVerbs/#simple","title":"Simple","text":"<p>A fact is stated. No time is specified.</p> <p>Active:</p> <ul> <li>I should clean the room once a day.</li> <li>I should go home.</li> </ul> <p>Passive:</p> <ul> <li>The room should be cleaned once a day.</li> </ul>"},{"location":"English/Grammar/03.ModalVerbs/#continuous","title":"Continuous","text":"<p>We use modal verbs to make a guess or draw a logical conclusion about an activity in progress at the present time (ie during the time of speaking).</p> <p>The action should have already started or should right now start.</p> <p>Active:</p> <ul> <li>I should be cleaning the room now.</li> <li>I should be going home.</li> <li>Person A: What\u2019s all that noise?</li> <li>Person B: The neighbour\u2019s son is in a rock band. They must be practicing.</li> </ul> <p>Passive:</p> <ul> <li>The room should be being cleaned now.</li> </ul>"},{"location":"English/Grammar/03.ModalVerbs/#perfect","title":"Perfect","text":"<p>These past modal verbs are all used hypothetically, to talk about things that didn\u2019t really happen in the past.</p> <p>Active:</p> <ul> <li>I should have cleaned the room yesterday.</li> <li>Julie could have bought the book, but she borrowed it from the library instead.</li> </ul> <p>Some notes about would as modal verb.</p> <p>Part of the third conditional:</p> <ul> <li>If I had had enough money, I would have bought a car (but I didn\u2019t have enough money, so I didn\u2019t buy a car).</li> </ul> <p>Because would (and will) can also be used to show if you want to do something or not (volition), we can also use would have + past participle to talk about something you wanted to do but didn\u2019t. This is very similar to the third conditional, but we don\u2019t need an \u2018if clause\u2019:</p> <ul> <li>I would have called you, but I didn\u2019t know your number.</li> <li>A: Nobody volunteered to help us with the fair.</li> <li>B: I would have helped you. I didn\u2019t know you needed help.</li> </ul> <p>Passive:</p> <ul> <li>The room should have been cleaned yesterday.</li> </ul>"},{"location":"English/Grammar/03.ModalVerbs/#perfect-continuous","title":"Perfect Continuous","text":"<p>Active:</p> <ul> <li>I should have been cleaning the room instead of watching TV.</li> <li>Person A: I didn\u2019t hear a sound when I passed by the children\u2019s room earlier.</li> <li>Person B: They must have been sleeping.</li> </ul> <p>Passive:</p> <ul> <li>The room should have been being cleaned but nobody was there.</li> </ul>"},{"location":"English/Grammar/04.SomethingFollowedBySomething/","title":"something followed by something rules \u2014 [1]","text":""},{"location":"English/Grammar/04.SomethingFollowedBySomething/#verbs-and-phrases-followed-by-gerunds-only","title":"Verbs and phrases followed by gerunds only","text":"<ul> <li>He admitted cheating on the test</li> <li>I anticipated arriving late.</li> <li>I appreciated her helping me.</li> <li>He avoided talking to her.</li> <li>He completed renovating the house.</li> <li>She considered moving to New York.</li> <li>The lawyer defended her making such statements.</li> <li>He delayed doing his taxes.</li> <li>He denied committing the crime.</li> <li>She despises waking up early.</li> <li>We discussed working at the company.</li> <li>She dislikes working after 5 PM.</li> <li>Fancy meeting you here!</li> <li>She finished writing the letter.</li> <li>go swimming</li> <li>I don\u2019t mind helping you. / Do you mind waiting here for a few minutes.</li> <li>We enjoy hiking.</li> <li>He imagines working there one day.</li> <li>The job involves traveling to Japan once a month.</li> <li>She kept interrupting me.</li> <li>He mentioned going to that college.</li> <li>She misses living near the beach.</li> <li>He postponed returning to Paris.</li> <li>She practiced singing the song.</li> <li>Tom recalled using his credit card at the store.</li> <li>He rejected working with them.</li> <li>She recollected living in Kenya.</li> <li>Tony recommended taking the train.</li> <li>He reported her stealing the money.</li> <li>Nick resented Debbie\u2019s being there.</li> <li>He resisted asking for help.</li> <li>He risked being caught.</li> <li>They suggested staying at the hotel.</li> <li>I tolerated her talking.</li> <li>I understand his quitting.</li> </ul> <p>Also, gerund follows some expressions / phrases:</p> <ul> <li>I can\u2019t see paying so much money for a car.</li> <li>It is no use quarrelling with him.</li> <li>It\u2019s no good thinking that girls in these days are as they used to be.</li> <li>There\u2019s no point in just trying to remake the past.</li> <li>He can\u2019t help talking so loudly.</li> <li>It might be worth phoning the station to check the time of the train.</li> </ul>"},{"location":"English/Grammar/04.SomethingFollowedBySomething/#gerund-after-prepositions","title":"Gerund after prepositions","text":"<p>Prepositions are followed by gerunds (for example: I am looking forward to seeing you). See them here (Confusing prepositions).</p>"},{"location":"English/Grammar/04.SomethingFollowedBySomething/#verbs-followed-by-gerunds-or-infinitives-slightly-different-meaning","title":"Verbs followed by gerunds or infinitives (slightly different meaning)","text":""},{"location":"English/Grammar/04.SomethingFollowedBySomething/#verbs-of-the-senses-feel-see-hear-watch-someone","title":"Verbs of the senses: feel, see, hear, watch someone","text":"<ul> <li>I heard him tell you about the letter. (you see or hear the whole action)</li> <li>I saw her drinking a coffee in the bar. (you only see or hear part of the action)</li> </ul>"},{"location":"English/Grammar/04.SomethingFollowedBySomething/#other-verbssituations","title":"Other verbs/situations","text":"<p>Using a gerund suggests that you are referring to real activities or experiences (and as they are real \u2014 they are in the past / have taken place). Using an infinitive suggests that you are talking about potential or possible activities or experiences (and as they are potential \u2014 they are in the future / have not taken place).</p> <ul> <li>The British reporter likes living in New York (He lives in New York and he likes what he experiences there)</li> <li>The British reporter likes to live in New York whenever he works in the United States. (He likes the option or possibility of living in New York when he works in the United States)</li> <li>I like speaking French because it\u2019s such a beautiful language. (I like the experience of speaking French, and the way it makes me feel when I speak the language)</li> <li>I like to speak French when I\u2019m in France. (I prefer the option of speaking French when I am in France)</li> <li>I denied stealing. (I deny having stolen anything before.)</li> <li>I denied to steal. (Someone offered me to steal something in the future and I refused. So no actual stealing was made.)</li> </ul> <p>Such verbs below as forget, remember, stop and probably mean could be described with the logic above.</p>"},{"location":"English/Grammar/04.SomethingFollowedBySomething/#verbs-followed-by-gerunds-or-infinitives-different-meaning","title":"Verbs followed by gerunds or infinitives (different meaning)","text":""},{"location":"English/Grammar/04.SomethingFollowedBySomething/#forget","title":"forget","text":"<p>When forget is used with a gerund, it means to forget that you have done something. The sentence below means that she read the book when she was a kid, and that she has forgotten that fact:</p> <ul> <li>She forgot reading the book when she was a kid.</li> </ul> <p>When forget is used with an infinitive, it means to forget that you need to do something. The sentence below means that she forgot that she needed to pay the rent:</p> <ul> <li>She forgot to pay the rent this month.</li> </ul>"},{"location":"English/Grammar/04.SomethingFollowedBySomething/#remember","title":"remember","text":"<p>When remember is used with a gerund, it means to remember that you have done something. The sentence below means that I mentioned the meeting, and that I remember the fact that I did that:</p> <ul> <li>I remember mentioning the meeting yesterday.</li> </ul> <p>When remember is used with an infinitive, it means to remember that you need to do something. The sentence below means that he remembered that he needed to turn the lights off:</p> <ul> <li>He remembered to turn off the lights before he left.</li> </ul>"},{"location":"English/Grammar/04.SomethingFollowedBySomething/#stop","title":"stop","text":"<p>Stop is normally used with a gerund:</p> <ul> <li>He stopped smoking for health reasons.</li> </ul> <p>When stop is used with an infinitive, the infinitive takes on the meaning of in order to. In the sentence below, he stopped in order to rest for a few minutes:</p> <ul> <li>He stopped to rest for a few minutes.</li> </ul>"},{"location":"English/Grammar/04.SomethingFollowedBySomething/#try","title":"try","text":"<p>tl;dr:</p> <ul> <li>try to: you want to accomplish it but it is so difficult that it is 90% that you either have fail it or will fail in the future.</li> <li>try + Ving: a lot of easy experimenting to see if one of them give desired result.</li> </ul> <p>Try + gerund means to try or to experiment with different methods to see if something works.</p> <p>This is when you do something as an experiment. The thing you do is not difficult, but you want to see if doing it will have the result that you want:</p> <ul> <li>She can\u2019t find a job. She tried looking in the paper, but there was nothing. She tried asking friends and family, but nobody knew of anything. She also tried going to shop, but nobody was hiring.</li> </ul> <p>Try + gerund is often used when you experiment with something, but you do not really like it or want to do it again:</p> <ul> <li>She tried eating the snake soup, but she didn\u2019t like it.</li> </ul> <p>When you try to do something, you want to do it, but you do not succeed in actually doing it.</p> <p>This is when the thing you do itself is difficult. In the present tense or future tense, this means you might not succeed in doing it. In the past tense, it means that you made an effort to do the thing, but you did not succeed.</p> <ul> <li>She tried to climb the tree, but she couldn\u2019t even get off the ground. (an infinitive is used because she cannot successfully climb the tree)</li> </ul> <p>An infinitive is also used if you are asking someone to try something they may or may not be able to accomplish:</p> <ul> <li>Try not to wake the baby when you get up tomorrow at 5 AM.</li> </ul>"},{"location":"English/Grammar/04.SomethingFollowedBySomething/#go-on","title":"go on","text":"<p>go on Ving: to continue with the same thing:</p> <ul> <li>Go on reading the article. (Continue reading the article.)</li> </ul> <p>go on to: to change the activity:</p> <ul> <li>Whichever page you\u2019re on, go on to read the next chapter. (Continue with the next chapter.)</li> </ul>"},{"location":"English/Grammar/04.SomethingFollowedBySomething/#mean","title":"mean","text":"<p>mean with the gerund means involve:</p> <ul> <li>You can buy a new car, but it means spending a lot of money.</li> <li>If you want to win, it will mean working hard.</li> </ul> <p>mean with the infinitive shows intention:</p> <ul> <li>He means to leave his job next month</li> <li>I didn\u2019t mean to make you angry.</li> </ul>"},{"location":"English/Grammar/04.SomethingFollowedBySomething/#need","title":"need","text":"<p>When need is used with a gerund, it takes on a passive meaning. The sentence below means the house needs to be cleaned:</p> <ul> <li>The house needs cleaning.</li> </ul> <p>Need is usually used with an infinitive or an object + an infinitive:</p> <ul> <li>He needs to call his boss.</li> <li>He needs him to call his boss.</li> </ul>"},{"location":"English/Grammar/04.SomethingFollowedBySomething/#start-used-with-both","title":"start (used with both)","text":"<p>When start is used in non-continuous tenses, you can either use a gerund or an infinitive:</p> <ul> <li>Marge started talking really fast.</li> <li>Marge started to talk really fast.</li> </ul> <p>When start is used in continuous tenses, an infinitive is used:</p> <ul> <li>Marge is starting to talk really fast.</li> </ul> <p>In other situations, an infinitive means that you did not complete or continue an action:</p> <ul> <li>I started to learn Russian, but it was so much work that I finally quit the class.</li> </ul>"},{"location":"English/Grammar/04.SomethingFollowedBySomething/#begin-used-with-both","title":"begin (used with both)","text":"<p>When begin is used in non-continuous tenses, you can either use a gerund or an infinitive:</p> <ul> <li>She began singing.</li> <li>She began to sing.</li> </ul> <p>When begin is used in continuous tenses, an infinitive is used:</p> <ul> <li>She is beginning to sing.</li> </ul>"},{"location":"English/Grammar/04.SomethingFollowedBySomething/#dread-usually-used-with-a-gerund","title":"dread (usually used with  a gerund)","text":"<p>Usually dread is followed by a gerund:</p> <ul> <li>She dreaded taking the test.</li> </ul> <p>Dread is sometimes used with infinitives such as think or consider. In the sentence below, dreaded to think means did not want to think:</p> <ul> <li>He dreaded to think of the consequences of his actions.</li> </ul>"},{"location":"English/Grammar/04.SomethingFollowedBySomething/#keep-usually-with-a-gerund","title":"keep (usually with a gerund)","text":"<p>Keep is normally used with a gerund to mean that you continue doing an action.</p> <ul> <li>She kept talking.</li> </ul> <p>Keep can also be used with an object followed by an infinitive, but then the infinitive takes on the meaning of in order to\u2026 . In the sentence below, the attackers kept hostages in order to prevent the police from entering:</p> <ul> <li>The attackers kept hostages to prevent the police from entering.</li> </ul>"},{"location":"English/Grammar/04.SomethingFollowedBySomething/#regret-usually-used-with-a-gerund","title":"regret (usually used with a gerund)","text":"<p>Regret is normally used with a gerund:</p> <ul> <li>I regretted being late to the interview.</li> </ul> <p>Regret is sometimes used with infinitives such as to inform. In the sentence below, We regret to inform you means We wish we did not have to tell you (bad news):</p> <ul> <li>We regret to inform you that your position at the company is being eliminated.</li> </ul>"},{"location":"English/Grammar/04.SomethingFollowedBySomething/#verbs-followed-by-gerunds-or-nouns-infinitives","title":"Verbs followed by gerunds or nouns + infinitives","text":"<ul> <li>I advised seeing a doctor. I advised them to see a doctor.</li> <li>Ireland doesn\u2019t allow smoking in bars. Ireland doesn\u2019t allow people to smoke in bars.</li> <li>He encourages eating healthy foods. He encourages his patients to eat healthy foods.</li> <li>California doesn\u2019t permit fishing without a fishing license. California doesn\u2019t permit people to fish without a fishing license.</li> <li>The certificate requires completing two courses. The certificate requires students to complete two courses.</li> <li>They urge recycling bottles and paper. They urge citizens to recycle bottles and paper.</li> </ul>"},{"location":"English/Grammar/05.Articles/","title":"Articles","text":"<p>englishpage.com/articles/index.htm</p>"},{"location":"English/Grammar/06.Other/","title":"Other","text":""},{"location":"English/Grammar/06.Other/#pronunciation","title":"Pronunciation","text":"<p>British vs american accents.</p>"},{"location":"English/Grammar/06.Other/#silent-letters","title":"Silent letters","text":"<p>[1], [2]</p> <ul> <li>iron</li> <li>sword</li> <li>receipt</li> <li>subtle</li> <li>bomb [b\u0254m]</li> <li>climb [kla\u026am]</li> <li>comb [k\u0259um]</li> <li>dumb [d\u028cm]</li> <li>jamb [\u02a4\u00e6m]</li> <li>lamb [l\u00e6m]</li> <li>plumb [pl\u028cm]</li> <li>tomb [tu\u02d0m]</li> <li>womb [wu\u02d0m]</li> <li>crumb [kr\u028cm]</li> <li>limb [l\u026am]</li> <li>numb [n\u028cm]</li> <li>thumb [\u03b8\u028cm]</li> </ul>"},{"location":"English/Grammar/06.Other/#uncountable-nouns-1","title":"Uncountable nouns \u2014 [1]","text":"<p>Almost all uncountable nouns have singular form:</p> <ul> <li>advice, news, money and many more\u2026</li> </ul> <p>These nouns are not used with a/an or numbers and are not used in the plural:</p> <ul> <li>Here is the latest news.</li> <li>Money isn\u2019t everything.</li> </ul> <p>But there are also uncountable nouns which are usually found only in the plural:</p> <ul> <li>stairs, clothes, glasses, toiletries, outskirts, remains, shorts, pants, pyjamas, binoculars,    scissors, groceries, goods, customs, thanks, regards, police</li> </ul> <p>Examples:</p> <ul> <li>The police are searching for a white man in his twenties.</li> <li>All my clothes are packed and I\u2019m ready for my trip.</li> </ul>"},{"location":"English/Grammar/06.Other/#i-wish-i-were-if-i-was-if-i-were-1","title":"I wish I were, If I was / If I were \u2014 [1]","text":"<p>If I was/if he was/if she was \u2014 these forms are called for when the statement refers to a state of being that existed, or could have existed in actual time:</p> <ul> <li>If he was ill, no wonder he left the oysters untouched.</li> <li>If I was unkind to you in those days, please forgive me.</li> <li>If she was lost in the woods, no one can blame her for being late.</li> </ul> <p>Sometimes the speaker must decide according to intended meaning:</p> <ul> <li>If she were sensible, she\u2019d order a background check on him. (I know her and she\u2019s not sensible)</li> <li>If she was sensible, she\u2019d order a background check on him. (I don\u2019t know if she\u2019s sensible or not. She may be)</li> </ul> <p>Regrets: Use if only + would or wish + would to show we are annoyed by something now:</p> <ul> <li>If only you would be more sensible.</li> <li>I wish you would be quiet.</li> </ul>"},{"location":"English/Grammar/06.Other/#would-in-the-past-1","title":"\u201cWould\u201d in the past \u2014 [1]","text":"<p>Would = used to. But would is used only for actions, not states.</p> <ul> <li>When I was on the school soccer team, I would score at least one goal per game.</li> </ul>"},{"location":"English/Grammar/06.Other/#the-subjunctive-1","title":"The Subjunctive \u2014 [1]","text":"<ul> <li>It is important that he comes come on time. Not: \u201che comes\u201d.</li> <li>I propose that we do not go there. Not: \u201cwe do not go\u201d.</li> </ul> <p>Other verbs are: advice, ask, command, demand, desire, insist, propose, recommend, request, suggest, urge.</p>"},{"location":"English/Grammar/06.Other/#passive-verbs-with-that-clauses-it-is-thought-that-1","title":"Passive verbs with \u2018that\u2019 clauses \u2014 \u201cIt is thought that\u2026\u201d \u2014 [1]","text":"<ul> <li>It was claimed by Copernicus that we lived in a heliocentric universe.</li> <li>It is thought that Michael Jordan was the best basketball player.</li> <li>It is theorised that aliens built the pyramids.</li> </ul> <p>Allege, assume, believe, claim, fear, feel, hold, postulate, predict, say, theorise, think.</p> <p>\u2026 and without that clause:</p> <ul> <li>She was thought to be the best swimmer in the city.</li> <li>Hi is known to have been present during the crimes.</li> </ul> <p>When a that-clause begins that there\u2026, we can make a corresponding passive form there passive verb to be / to have been:</p> <ul> <li>It is thought that there are too many obstacles to peace.</li> <li>There are thought to be too many obstacles to peace.</li> </ul>"},{"location":"English/Grammar/06.Other/#passive-voice-with-get-1","title":"Passive Voice (with get) \u2014 [1]","text":"<p>get is often used instead of be in the passive voice in informal spoken English to refer to an action that happens by accident or unexpectedly:</p> <ul> <li>They will get married tomorrow. (They changed from single to married)</li> <li>Jerry got fired because he was always late for work.</li> </ul> <p>get expresses action and change and is only used with action verbs, not state verbs:</p> <ul> <li>Jerry got fired because he was always late for work. (fire is an action verb)</li> <li>Nothing is known about the thief (Wrong: Nothing gets known about the thief know is a state verb)</li> </ul> <p>As get in the passive voice expresses action, it makes it possible to differentiate between an action and a state if it is not otherwise clear:</p> <ul> <li>The living room window was broken. (state or action)</li> <li>The living room window got broken. (action)</li> </ul> <p>Also see \u201cGrammar: Causative\u201d.</p> <p>Idiomatic expressions with the get passive:</p> <ul> <li>get dressed</li> <li>get washed</li> <li>get engaged</li> <li>get married</li> <li>get divorced</li> <li>get lost</li> <li>get mixed up</li> <li>get started</li> </ul> <p>Prepositions in the passive voice:</p> <ul> <li>The doctor was sent for.</li> <li>The film was much spoken about.</li> <li>The train is acted upon by several forces.</li> <li>These data are often referred to.</li> </ul>"},{"location":"English/Grammar/06.Other/#present-perfect-vs-past-simple","title":"Present perfect vs Past Simple","text":"<p>Several complicated examples:</p> <ul> <li>I have not seen you for a long time. Where have you been?</li> <li>Dear Mum and Dad, Sorry I have not written in a while, but things are crazy here. I can\u2019t believe it was   six month ago that I left and that we have not seen each other for that long.</li> </ul>"},{"location":"English/Grammar/06.Other/#present-simple-vs-present-continuous-for-habits","title":"Present Simple vs Present Continuous for habits","text":"<p>In general, Present Continuous is used when something:</p> <ol> <li>is happening now</li> <li>differs from what is expected or usual<ul> <li>especially if it is disliked by the speaker or evokes ambivalent feelings.</li> </ul> </li> </ol> <p>However, both Present Simple as well as Present Continuous are also used to describe habits. It looks like the difference can be described wit the aforementioned criterion: something differs from what is expected or is usual. It must be different across at least one dimension: time, population, space and so on\u2026:</p> <ul> <li>At the first signs of trouble, animals always move to higher ground.   All animals do it. They do it all the time. No blips, no unusual activity =&gt; Present Simple.</li> <li>The boss is always telling us to work hard, but she does nothing. Only that particular boss (individual)   is saying it. There is a blip in population dimension =&gt; Present Continuous.   Moreover, with all likelihood it annoys the speaker.</li> <li>People in the book business are always saying how difficult it is to think of a great title.   Only people in the book business are saying it. There is a blip in population dimension =&gt; Present Continuous.</li> <li>I drink coffee every morning. No blips, it happens all the time. Permanent habit.</li> <li>I am drinking too much coffee these days because I\u2019m so busy at work. There is a blip in the time   dimension. I have started to drink more coffee recently. It is a new habit.</li> <li>Julie lives in London. Permanent situation. No blips in time =&gt; Present Simple.</li> <li>Julie is living in Paris for a few months (usually she lives in London). There is a blip in   time =&gt; Present Continuous.</li> </ul>"},{"location":"English/Grammar/06.Other/#to-in-order-to-so-as-to-1-2-3","title":"to / in order to / so as to \u2014 [1], [2], [3]","text":"<p>We use to to say why we do something:</p> <ul> <li>I\u2019m going to Ireland to visit my family.</li> </ul> <p>We can also use in order to or so as to. in order to and so as to are more common before stative verbs like: be, have, know, appear, seem, understand, etc:</p> <ul> <li>She left work early in order to be at home with the children.</li> <li>I\u2019m going to Ireland in order to visit my family.</li> <li>I went to the post office so as to buy some stamps.</li> </ul> <p>Before a negative infinitive, we normally use so as or in order:</p> <ul> <li>I am leaving now so as not to be late. (not: I am leaving now not to be late)</li> </ul>"},{"location":"English/Grammar/06.Other/#how-to-use-so-so-that-1","title":"How to use so &amp; so that \u2014 [1]","text":"<ul> <li>Bill worked hard, so he was promoted.</li> <li>Bill worked hard so that he would be promoted.</li> <li>Bill worked so hard that he had to be promoted.</li> <li>Jill is smart, so all the boys like her.</li> <li>Jill studies regularly so that she can beat the boys.</li> <li>Jill is so smart that all the boys are afraid of her.</li> </ul>"},{"location":"English/Grammar/06.Other/#that-which-1","title":"That &amp; Which \u2014 [1]","text":"<p>In defining relative clauses that and which are interchangeable. Whereas, you must use which in non-defining ones.</p> <ul> <li>The movie that/which we saw last weekend was really good.</li> <li>Harry Potter, which I finished last week, was an excellent book.</li> <li>Toronto, which is heavily populated, is a multicultural city.</li> </ul>"},{"location":"English/Grammar/06.Other/#comparing-with-like-as-1","title":"Comparing with like &amp; as \u2014 [1]","text":"<p>Like + noun, As + clause:</p> <ul> <li>He looks like a Martian.</li> <li>He speaks like a preacher.</li> <li>He speaks as a preaches does.</li> <li>She treats me like a dog.</li> <li>A: \u201cI Like it\u201d. B: \u201cAs do I\u201d. or B: \u201cSo do I\u201d.</li> <li>She is shopping as if there were no tomorrow.</li> </ul> <p>Do not mix up with:</p> <ul> <li>As your boss, I forbid you from using FB at work.</li> </ul>"},{"location":"English/Grammar/06.Other/#adjective-clauses-quantifiers-1","title":"Adjective Clauses + Quantifiers \u2014 [1]","text":"<p>Such clauses are always non-defining ones, and therefore should be in commas.</p> <ul> <li>Chris has two sisters. Both of them smoke.</li> <li>Chris has two sisters, both of whom smoke.</li> <li>Nick has two phones. One of them is broken.</li> <li>Nick has two phones, one of which is broken.</li> <li>Tom is a writer. All of his books are popular.</li> <li>Tom is a writer, all of whose books are popular.</li> </ul>"},{"location":"English/Grammar/06.Other/#didnt-need-to-ask-or-neednt-have-asked","title":"didn\u2019t need to ask or needn\u2019t have asked","text":"<ul> <li>We did not need to ask for directions. We had a map.</li> <li>We need not have asked for direction. We asked for directions, but it was unnecessary as we found a map, or directions were misleading.</li> </ul>"},{"location":"English/Grammar/06.Other/#whether-vs-if-1","title":"whether vs if \u2014 [1]","text":"<p>whether is always about two (often opposite) choices / options. if is not limited to two.</p> <p>They can mean the same thing:</p> <ul> <li>Do you know if/whether Dan is coming?</li> <li>I do not know if/whether the exam is on Friday or Saturday.</li> </ul> <p>But they can also mean different things:</p> <ul> <li>Let me know if you are coming. (if you are coming (and only if) then let me know about it).</li> <li>Let me know whether you are coming (or not). (if you are coming - let me know. If are not coming - let me know as well).</li> </ul> <p>In the latter example whether has meaning of \u201cregardless\u201d.  More examples of this meaning:</p> <ul> <li>I will come over if you want me to. (If you want, I will come. If you do not want, I will not come.)</li> <li>I will come over whether you like it or not. (If you like it, I will come. If you do not like it, I will come.)</li> </ul>"},{"location":"English/Grammar/06.Other/#had-better-1","title":"Had better \u2014 [1]","text":"<p>todo</p>"},{"location":"English/Grammar/06.Other/#conditional-clauses","title":"Conditional clauses","text":"<p>But for, if it were not for, were it not for, if it had not been for, had it not been for:</p> <ul> <li>But for hist illness he would (could, might) help us now.</li> <li>But for his illness he would (could, might) have helped us yesterday.</li> <li>If it were not for his sense of humour, his life would be awful.</li> <li>Were it not for his sense of humour , his life would be awful.</li> <li>But for his illness he would have come yesterday.</li> <li>If it had not been for his illness he would have come yesterday.</li> <li>Had it not been for his illness he would have come yesterday.</li> </ul>"},{"location":"English/Grammar/06.Other/#murphy-unit-83-if","title":"Murphy Unit 83. if:","text":"<p>We use if it were not for + noun phrase to say that one situation is dependent on another situation or on a person. When we talk about the past we can also use if it had not been for + noun phrase:</p> <ul> <li>If it were not for Nina, the conference would not be going ahead.</li> <li>If it had not been for Dad, I would not have gone to college.</li> </ul> <p>In formal language we can also use were it not for\u2026 and had it not been for\u2026:</p> <ul> <li>Were it not for Nina \u2026</li> <li>Had it not been for Dad \u2026</li> </ul> <p>We can use but for + noun with a similar meaning, particularly in formal contexts:</p> <ul> <li>The village school would have been closed years ago but for the determination of teachers and parents to keep it open.</li> </ul>"},{"location":"English/Grammar/06.Other/#future","title":"Future","text":"<ul> <li>Should he be here tomorrow, he will help us.</li> <li>Should he see us, he would help us.</li> <li>If he should come, I would speak to him.</li> <li>Should he come, I would speak to him.</li> <li>If he were to come, I would speak to him.</li> <li>Were he to come, I would speak to him.</li> <li>If he should come, I shall speak to him.</li> <li>If he should come, ask him to wait.</li> <li>Should the speed drop, there will be a rapid increase in torque.</li> </ul>"},{"location":"English/Grammar/06.Other/#emphasis","title":"Emphasis","text":"<p>it is \u2026 that \u2026:</p> <ul> <li>It is this device that is used in the tests.</li> <li>It is due to the inadequate equipment - that they failed to complete the experiment.</li> <li>It was Newton who discovered this law.</li> </ul> <p>it was not until \u2026 that \u2026:</p> <ul> <li>It was not until 1936 that physicists constructed a theory accounting for the structure of the nucleus.</li> <li>It was not until Roentgen discovered X-rays that scientists began to take interest in this subject.</li> </ul>"},{"location":"English/Grammar/06.Other/#would-rather-would-sooner-would-just-as-soon-1","title":"would rather, would sooner, would just as soon \u2014 [1]","text":"<p>We use would rather or \u2019d rather to talk about preferring one thing to another. Would rather has two different constructions:</p>"},{"location":"English/Grammar/06.Other/#same-subject","title":"Same subject","text":"<p>Future and present situations:</p> <ul> <li>We\u2019d rather go on Monday.</li> <li>More than half the people questioned would rather have a shorter summer break and more holidays at other times.</li> <li>I\u2019d rather not fly. I hate planes.</li> </ul> <p>Past situations: we use would rather + have + V3 form:</p> <ul> <li>She would rather have spent the money on a holiday. (The money wasn\u2019t spent on a holiday.)</li> <li>I\u2019d rather have seen it at the cinema than on DVD. (I saw the film on DVD.)</li> </ul>"},{"location":"English/Grammar/06.Other/#different-subjects","title":"Different subjects","text":"<p>Future and present situations: we often use the past simple:</p> <ul> <li>I would rather they did something about it instead of just talking about it.</li> <li>Would you rather I wasn\u2019t honest with you?</li> </ul> <p>Past situations: we use the past perfect:</p> <ul> <li>I\u2019d rather you hadn\u2019t rung me at work.</li> </ul>"},{"location":"English/Grammar/06.Other/#much-rather","title":"Much rather","text":"<p>We can use much with would rather to make the preference stronger. In speaking, we stress much:</p> <ul> <li>I\u2019d much rather make a phone call than send an email.</li> <li>She\u2019d much rather they didn\u2019t know about what had happened.</li> </ul>"},{"location":"English/Grammar/06.Other/#would-sooner-would-just-as-soon","title":"Would sooner, would just as soon","text":"<p>We use the phrases would sooner and would just as soon as well. They mean approximately the same as would rather:</p> <ul> <li>I don\u2019t really want to go back to France again this year. I\u2019d sooner go to Spain.</li> <li>Thanks for the invitation, but, if you don\u2019t mind, we\u2019d just as soon stay at home and watch it all on TV.</li> </ul>"},{"location":"English/Grammar/06.Other/#clauses-of-purpose","title":"Clauses of purpose","text":"<p>so that, in order, that, lest.</p> <ul> <li>Put down my address so that you should (may) write me a letter.</li> <li>He put down my address so that he might write me a letter.</li> <li>He put down my address lest he should forget it.</li> </ul>"},{"location":"English/Grammar/06.Other/#noun-clause","title":"Noun Clause","text":"<ul> <li>Paul is not what is generally considered handsome.</li> <li>I am unsure if he is coming.</li> <li>It is more a question of whom she said it to than why she said it.</li> <li>That she might be right is what frightens me.</li> <li>How you go about doing your work should not affect when you get it done.</li> </ul> <p>Conjunctions: that, which, who, whom, whose, what, if, whether, when, where, how, why, whoever, whenever, whatever, whichever.</p> <p>The conjunctions in bold could be subjects.</p>"},{"location":"English/Grammar/06.Other/#cleft-sentences-clauses","title":"Cleft sentences &amp; clauses","text":"<p>Examples:</p> <ul> <li>It is Mary that John loves.</li> <li>What happened was (that) he dropped the vase.</li> <li>It was Karin who left her bah on the train.</li> <li>It was her bag that what Karin left on the train.</li> </ul>"},{"location":"English/Grammar/06.Other/#first-part-of-the-sentence","title":"First part of the sentence","text":"<ol> <li>The verb must agree with the subject of the cleft-clause (it or what) no matter what you are talking about (object is); and</li> <li>the subject is it or what even if you are talking about people:</li> </ol> <ul> <li>Focusing with it:<ul> <li>It this is Mary that John loves.</li> <li>It was a colleague of Anne who eventually put the pieces together.</li> <li>It was were my parents I had to thank for this.</li> <li>It is those are the elections that have has given the people the opportunity to\u2026</li> <li>Lea bought the car from Olav. No, it was Olav that bought the car from Lea.</li> <li>I do not mind her criticising me, but it is how she does it that I object to.</li> <li>It was to show how much I cared for her that I bought her the necklace.</li> </ul> </li> <li>Focusing with what:<ul> <li>What is are really annoying are the arguments.</li> </ul> </li> </ul> <p>In other words, it is always is or was, not were/are.</p>"},{"location":"English/Grammar/06.Other/#second-part-of-the-sentence","title":"Second part of the sentence","text":"<p>Continue the sentence with that or who:</p> <ul> <li>It was only when he failed to arrive at work that when the alarm was raised.</li> <li>It was only yesterday that when I discovered the documents were missing.</li> <li>It was in Paris that where they first met.</li> <li>It is Mary that whom John loves.</li> <li>It was her bag that which/what Karin left on the train.</li> <li>It was heavy snow that what caused disruption to the airport.</li> <li>It is because you have such a good sense of humour that why I enjoy your company.</li> <li>It was Karin who left her bag on the train.</li> </ul> <p>\u2026 or without anything, in which case the following verb must agree with what you are talking about (plural things or singular things: What is needed are resources):</p> <ul> <li>It was my parents I had to thank for this.</li> <li>What is really annoying are the arguments.</li> <li>What is needed are additional resources.</li> <li>What happened was that he dropped the vase.</li> <li>What happened was that hundreds of students marched to protest against the new laws.</li> <li>What caused disruption to the airport was the heavy snow.</li> </ul>"},{"location":"English/Grammar/06.Other/#from-murphy-unit-98","title":"From Murphy Unit 98","text":"<p>To focus attention on an action performed by someone, we use a sentence with what + subj + do + be + to-inf clause (we cannot use an it-clause to do this):</p> <ul> <li>Luis lost his job and was short of money, so what he did was to sell his flat and move in with his brother.</li> <li>The reason hundreds of students marched through the city centre was to protest against the new laws.</li> <li>What I want to do is persuade them to come with us.</li> <li>What Jane did was invest well.</li> <li>What elections have done is give this people the opportunity to decide\u2026</li> </ul> <p>The aforementioned pattern is only usually used with what-clauses. Instead of placing other wh-clauses beginning how, when, where, who, why at the beginning of the sentence we prefer to use a noun which has a meaning related to the wh-word (e.g. reason rather than why; place rather than where) followed by a that- or wh-clause:</p> <ul> <li>The only reason (why/that) I left the party early was that I was feeling unwell.</li> <li>The place (where/that) you should play football is the playground, not the classroom.</li> <li>Somebody (who/that) I enjoy reading is Peter Carey.</li> <li>The time (when/that) I work best is early morning.</li> </ul>"},{"location":"English/Grammar/06.Other/#concession-clauses","title":"Concession Clauses","text":"<ul> <li>Difficult though it may be for students, in the future many school and university subjects are likely \u2026</li> <li>Whilst people continue to use English to communicate on the Internet, the language itself will \u2026</li> <li>I really want the car, however much it costs.</li> <li>However you look at it, technology is changing education.</li> <li>Much as we appreciate your efforts, sadly we won\u2019t be able to use the report.</li> <li>Hard as we tried, we failed to get hold of anybody.</li> <li>Difficult though it was, we eventually secured the premises.</li> </ul> <p>\u2026and other starting with despite, in spite of, whichever, though, although, while.</p>"},{"location":"English/Grammar/06.Other/#participle-clauses-1","title":"Participle Clauses \u2014 [1]","text":"<p>We can use participle clauses after a noun in the same way as relative clauses. This gives more information about the noun.</p>"},{"location":"English/Grammar/06.Other/#a-present-participle-ving","title":"A present participle (Ving)\u2026","text":"<p>\u2026can be used in the same way as an active relative clause:</p> <ul> <li>The man driving the car is a friend of mine. (The man who is driving the car is a friend of mine).</li> <li>Lorries coming over the bridge have to be careful of the wind. (Lorries that come over the bridge have to be careful of the wind).</li> <li>Who was the girl wearing the red dress? (Who was the girl who was wearing the red dress?).</li> <li>Students handing in their essays late will lose ten marks. (Students who hand in their essays late will lose ten marks).</li> </ul>"},{"location":"English/Grammar/06.Other/#gerund-participial-clause-being-v3past-participle","title":"(gerund-participial clause?) Being + V3(past participle)\u2026","text":"<p>\u2026can be used in the same way as a continuous passive relative clause:</p> <ul> <li>The poem being read by the actor was written by my brother. (The poem that is being read by the actor was written by my brother).</li> <li>The strawberries being eaten at the wedding were grown in Scotland. (The strawberries that are being eaten at the wedding ).</li> </ul>"},{"location":"English/Grammar/06.Other/#a-past-participle-v3","title":"A past participle (V3)\u2026","text":"<p>\u2026can be used in the same way as a simple passive relative clause:</p> <ul> <li>We read the email sent by the manager. (We read the email that had been sent by the manager).</li> <li>This vase, made in China in the 14th century, is very valuable. (This vase, which was made in China in the 14th century, is very valuable).</li> <li>She only eats cakes made by her mother. (She only eats cakes that are made by her mother).</li> </ul>"},{"location":"English/Grammar/06.Other/#causative-1-2-3-4-5","title":"Causative \u2014 [1], [2], [3], [4], [5].","text":"<p>We use a causative verb when we want to talk about something that someone else did for us or for another person. It means that the subject caused the action to happen, but didn\u2019t do it themselves. Maybe they paid, or asked, or persuaded the other person to do it.</p>"},{"location":"English/Grammar/06.Other/#active-causative","title":"Active Causative","text":"<p>Subject (I/you/\u2026) + CV (have, make, let, get to) + agent + verb.</p> <p>Examples:</p> <ul> <li>She lets me borrow her book.</li> <li>My mother made me do my homework.</li> <li>I will have someone cut my hair.</li> <li>My English teacher has me do the homework in a week.</li> <li>My friends get me to take the test.</li> </ul> <p>Differences between CVs (causative verbs) are:</p> <ul> <li>Let is used when we allow/give permissions someone to do something.</li> <li>Make is used when we want to force someone to do something.</li> <li>Have is used when we want to give someone the responsibility to do something. When you commision/pay somebody.</li> <li>Get is used when we want to convince/persuade to do something or to trick someone into doing something.</li> </ul>"},{"location":"English/Grammar/06.Other/#passive-causative","title":"Passive Causative","text":""},{"location":"English/Grammar/06.Other/#have-get-verbs","title":"have &amp; get verbs:","text":"<p>Subject + CV (have/get) + object + V3</p> <ul> <li>My hair is too long. You should get it cut.</li> <li>Yesterday my car broke down. I had it fixed by a mechanic.</li> <li>My teeth hurt! \u201cYou should have them looked at.</li> </ul> <p>If instead of object you want to use a person, construction will look like:</p> <ul> <li>have + person + infinitive:<ul> <li>I had the electrician look at my broken light.</li> <li>The doctor will have the nurse call the patients.</li> <li>The teacher had the students write the answers on the whiteboard.</li> </ul> </li> <li>get + person + to + infinitive:<ul> <li>She gets her son to do his homework by promising him ice cream when he\u2019s finished.</li> <li>I got the cleaner to clean under the cupboards.</li> </ul> </li> </ul>"},{"location":"English/Grammar/06.Other/#make-verb","title":"make verb","text":"<p>Subject + was/were + made + to + V1</p> <ul> <li>I was made to cry a lot by the film.   (The film made me cry a lot.)</li> <li>Tom was made to laugh a lot by my son.  (My son made Tom laugh a lot.)</li> <li>The soldiers were made to wait in the garden.</li> <li>A professional player would be made to shudder by these odds. (These odds would make a professional player shudder.)</li> </ul> <p>Some verbs (that are followed by object + bare-inf in the active) are followed by a to-inf in the passive (like make): feel, hear, help, observe, see.</p>"},{"location":"English/Grammar/06.Other/#passive-causative-gerund-1","title":"passive causative + gerund \u2014 [1]","text":"<p>Situation: I enjoy talking during movie.</p> <p>Active:</p> <ul> <li>When I talk, my friend makes me shut up.</li> <li>I am accustomed to talking.</li> </ul> <p>Passive:</p> <ul> <li>I am made to shut up.</li> <li>I am not accustomed to being made to shut up.</li> </ul>"},{"location":"English/Grammar/06.Other/#inversions-1-2-3-murphy-unit-99","title":"Inversions \u2014 [1], [2], [3], Murphy Unit 99.","text":""},{"location":"English/Grammar/06.Other/#after-negative-adverb-phrase-at-the-beginning-of-the-sentence","title":"After negative adverb (phrase) at the beginning of the sentence.","text":"<ul> <li>Hardly had I got into bed when the telephone rang.</li> <li>Never had she seen such a beautiful sight before.</li> <li>Never before did they use an alternative method.</li> <li>Seldom do we see such an amazing display of dance.</li> <li>Rarely will you hear such beautiful music.</li> <li>Only then did I understand why the tragedy had happened.</li> <li>Only now would she\u2026</li> <li>At first there was silence. Then came a voice that I knew. (Unit 76)</li> <li>Not only does he love chocolate and sweets but he also smokes.</li> <li>No sooner had we arrived home than the police rang the doorbell.</li> <li>Scarcely had I got off the bus when it crashed into the back of a car.</li> <li>Only later did she really think about the situation.</li> <li>Nowhere have I ever had such bad service.</li> <li>Little did he know!</li> <li>Only in this way could John earn enough money to survive.</li> <li>In no way do I agree with what you\u2019re saying.</li> <li>On no account should you do anything without asking me first.</li> <li>Under no circumstances can we accept credit cards.</li> <li>At no time did she say she would come.</li> </ul> <p>We also put the verb before the subject when we use adverbs expressing direction of movement, such as along, away, back, down, in, off, out, up with verbs such as come, fly, go. This pattern is found particularly in narrative, to mark a change in events:</p> <ul> <li>The door opened and in came the doctor.</li> <li>As soon as I let ho of the string, up went the balloon, high into the sky.</li> </ul> <p>In the following expressions, the inversion comes in the second part of the sentence:</p> <ul> <li>Not until I saw John with my own eyes did I really believe he was safe.</li> <li>Not since Lucy left college had she had such a wonderful time.</li> <li>Only after I\u2019d seen her flat did I understand why she wanted to live there.</li> <li>Only when we\u2019d all arrived home did I feel calm.</li> <li>Only by working extremely hard could we afford to eat.</li> </ul>"},{"location":"English/Grammar/06.Other/#after-adverbial-expression-of-place-at-the-beginning-on-the-sentence","title":"After adverbial expression of place at the beginning on the sentence","text":"<ul> <li>On the table was all the money we had lost. (All the money we had lost was on the table.)</li> <li>Round the corner came the knights. (The knights came round the corner.)</li> <li>On the doorstep was a bunch of flowers.</li> </ul>"},{"location":"English/Grammar/06.Other/#after-norneither","title":"After nor/neither","text":"<ul> <li>Carbon dioxide does not burn nor does it support combustion.</li> <li>The driver in front did not notice the sign. Neither did I.</li> </ul>"},{"location":"English/Grammar/06.Other/#after-so","title":"After so","text":"<ul> <li>He knows three foreign languages, and so does his sister.</li> <li>He was late so was his friend.</li> </ul>"},{"location":"English/Grammar/06.Other/#instead-of-if-in-conditionals-with-had-were-and-should","title":"Instead of if in conditionals with had, were and should","text":"<ul> <li>Had I been there, this problem wouldn\u2019t have happened. (If I had been there, this problem wouldn\u2019t have happened.)</li> <li>Had we arrived sooner, we could have prevented this tragedy! (If we had arrived sooner, we could have prevented this tragedy!)</li> <li>Should you need any help, do not hesitate to call. (If you need any help, do not hesitate to call.)</li> <li>Had the wheel not been invented, we would not have had cars. (Note where first \u201cnot\u201d is placed. \u201cHad not the wheel not been invented\u2026\u201d).</li> </ul>"},{"location":"English/Grammar/06.Other/#after-so-adjective-that-and-such-be-that","title":"After so + adjective \u2026 that \u2026 and such + be \u2026 that","text":"<ul> <li>So beautiful was the girl that nobody could talk of anything else. (The girl was so beautiful that nobody could talk of anything else.)</li> <li>So delicious was the food that we ate every last bite. (The food was so delicious that we ate every last bite.)</li> <li>Such is the popularity of the play that the theatre is likely to be full every night.</li> </ul>"},{"location":"English/Grammar/06.Other/#after-exclamations-with-here-and-there","title":"After exclamations with \u2018here\u2019 and \u2018there\u2019","text":"<ul> <li>Here comes the winner!</li> <li>There goes all our money!</li> </ul>"},{"location":"English/Grammar/06.Other/#in-comparisons","title":"In comparisons","text":"<p>We commonly use inversion after as and that in comparisons:</p> <ul> <li>John speaks Chinese, as does Lucy.</li> <li>More important than love is money. (Money is more important than love.)</li> <li>Paper was invented in China, as was the process of printing.</li> <li>Most young people did not vote in the election, as was the case in 2010.</li> <li>I believed, as did my colleagues, that the plan would work.</li> <li>Researcher shows that parents watch more television than do their children.</li> </ul> <p>Note that we do not invert subject and verb after as or than when the subject is a pronoun:</p> <ul> <li>We now know a lot more about the universe than we did ten years ago.</li> </ul>"},{"location":"English/Grammar/06.Other/#other-1","title":"Other 1","text":"<ul> <li>Man, is it cold out!</li> <li>Man, am I hungry!</li> </ul>"},{"location":"English/Grammar/06.Other/#be-careful","title":"Be careful!","text":"<ul> <li>In no clothes does Mary look good (Negative inversion present. It doesn\u2019t matter what Mary wears, she does NOT look good.)</li> <li>In no clothes, Mary looks good (Negative inversion absent, When Mary is nude, she looks good.)</li> <li>With no job is Fred happy (Negative inversion present. It doesn\u2019t matter which job Fred has, he is NOT happy.)</li> <li>With no job, Fred is happy (Negative inversion absent. When Fred is unemployed, he is happy.)</li> </ul>"},{"location":"English/Grammar/06.Other/#other-2","title":"Other 2","text":"<ul> <li>Included in this section is a description of a typical system.</li> <li>Acting upon a body are few forces which cannot be neglected.</li> <li>Shown in fig. 5 is the equipment \u2026</li> <li>Connected with this phenomenon are also some other changes.</li> <li>Important as this work is, it does not cover the problem on the whole.</li> <li>Possible as (though) it may be to construct a chart \u2026</li> </ul>"},{"location":"English/Grammar/06.Other/#when-present-is-not-present-past-is-not-past-future-is-not-future","title":"When present is not present, past is not past, future is not future","text":""},{"location":"English/Grammar/06.Other/#the-present","title":"The Present","text":"The Present\u2026 Perfect Simple Continuous Used for: future: Unit 3 future: timetables, 1st conditional future: scheduled and arranged plans"},{"location":"English/Grammar/06.Other/#the-future","title":"The Future","text":"The Present\u2026 Simple Continuous Perfect Perfect Continuous Used for: present: see Unit 16 present: imagining what is happening around now (see Unit 11) present: imagining what is happening around now (see Unit 11, Unit 83.) present: imagining what is happening around now (see Unit 11) past: see Unit 16 past: what we think was happening at a point in the past (see Unit 11)"},{"location":"English/Grammar/06.Other/#past","title":"Past","text":"<ul> <li>may/might + have V3 is used for future (see Unit 17)</li> </ul>"},{"location":"English/Grammar/06.Other/#other_1","title":"Other","text":"<p>There are adverbs not ending with -ly, adjectives ending with -ly: see Unit 71. Adjectives and adverbs.</p> <p>Most without the: see Unit 71. Adjectives and adverbs &amp; Unit 72. Adjectives and adverbs: comparative and superlative forms.</p> <p>When an article (for noun) must NOT be placed before its adjectives (a quiet place -&gt; quiet a place): see Unit 73. Comparative phrases and clauses.</p> <p>will in if-clause: see Unit 84.</p> <p>were instead of was: see Unit 85.</p>"},{"location":"English/Grammar/06.Other/#when-to-between-two-verbs-is-not-needed-subjunctive","title":"When to between two verbs is not needed (subjunctive?)","text":"<p>Words like suggest/recommend:</p> <ul> <li>I suggested (that) she wait (waits, waited) a few weeks.</li> <li>I suggest you call him first.</li> <li>They directed that the building be pulled down.</li> </ul> <p>Cleft sentences &amp; clauses (see above):</p> <ul> <li>What I want to do is persuade them to come with us.</li> <li>What Jane did was invest well.</li> </ul>"},{"location":"English/Grammar/06.Other/#7-classes-of-nounverb-agreement","title":"7 Classes of Noun/Verb Agreement","text":""},{"location":"English/Grammar/06.Other/#indefinite-pronouns-eitheror-and-neithernor","title":"Indefinite Pronouns &amp; either/or and neither/nor","text":"<ul> <li>Someone has left</li> <li>Everybody is entitled</li> <li>Each boy is responsible</li> </ul> <p>For some of / none of / all of / neither\u2026nor it depends on what goes after them \u2014 what is closer to the verb \u2014 plural or singular:</p> <ul> <li>All of the soup is gone. (Soup is a single entity).</li> <li>Some of the comments are favorable. The comments are counted as separate entities</li> <li>None of the jewels are missing.</li> <li>None of the jewelry is missing.</li> <li>Neither you nor I am.</li> <li>Neither the students nor the teacher remembers hearing anything.</li> <li>Either a melon or oranges are on the menu today.</li> </ul>"},{"location":"English/Grammar/06.Other/#positive-and-negative-subjects-in-combination","title":"Positive and Negative Subjects in Combination","text":"<p>A subject consisting of positive and negative sentiments that differ in singular and plural form should be followed by a verb that corresponds with the positive element:</p> <ul> <li>The delivery of the speech, not its contents, is the issue.</li> </ul>"},{"location":"English/Grammar/06.Other/#conjunctive-phrases","title":"Conjunctive Phrases","text":"<p>The doe along with its fawns is resting in the meadow.</p>"},{"location":"English/Grammar/06.Other/#inversion-expletives","title":"Inversion Expletives","text":"<p>As with there are \u2026, in sentences beginning with such expletives as here and there, the actual subject, which follows the verb, determines the verb form:</p> <ul> <li>There is a word for that.</li> <li>Here are several choices.</li> </ul>"},{"location":"English/Grammar/06.Other/#beware-of-tricky-nouns","title":"Beware of tricky nouns","text":"<p>Plural nouns that name single objects, such as scissors and pants, are matched with plural verbs unless the phrase pair of precedes the noun; in that case, pair is the subject:</p> <ul> <li>Scissors are dangerous. But: A pair of scissors is required for this activity.</li> <li>The police are investigating the case.</li> </ul> <p>Some other nouns ending in s are also singular in meaning:</p> <ul> <li>The mumps is a disease you don\u2019t hear much about anymore.</li> <li>The news was not very good.</li> </ul> <p>And some nouns have the form for plural and singular forms:</p> <ul> <li>The only means of communication was sign language.</li> <li>The political motivations and desired ends are much different, but the means are precisely the same.</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/","title":"Some units from Murphy","text":""},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-3-past-simple-and-present-perfect","title":"Unit 3. Past simple and present perfect.","text":"<p>Usually we use past simple in since clause and present perfect in the main clause:</p> <ul> <li>Since Mr Dodson became president unemployment has increased.</li> </ul> <p>But we use the present perfect in the since clause if the two situations described in the two clauses extent until the present:</p> <ul> <li>Have you met any of your neighbours since you have lived here?</li> </ul> <p>With time clauses introduced by after, when, until, as soon as, once, by the time, the minute/second/moment</p> <ul> <li>the past simple refers to past, completed events</li> <li>the present perfect refers to future events</li> </ul> <p>compare:</p> <ul> <li>After she left hospital (past), she had a long holiday. or, what is more usual: After she had left hospital, she had a long holiday.</li> <li>After she has left school (future), she will be spending six months in India. or, what is more usual: After she leaves school, she will be spending six month in India.</li> <li>The minute I got the news about Anna (past) I telephoned my parents.</li> <li>I will contact you the minute I have got my exam results (future).</li> <li>It will not be the first time she has voted against the government (future event).</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-11-future-continuous-and-future-perfect-continuous","title":"Unit 11. Future continuous and future perfect continuous","text":"<p>Use the future continuous to talk about:</p> <ul> <li>something that is predicted to start before a particular point of future time and that may continue after   this point (often the result of a previous decision or arrangement):<ul> <li>When it goes into orbit, the spacecraft will be carrying 30 kilos of plutonium.</li> <li>Anna will be helping us to organise the party.</li> </ul> </li> <li>a future activity that is part of the normal course of events or that is one of a repeated or   regular series of events:<ul> <li>Dr Lin will be giving the same talk in room 103 at ten next Thursday.</li> <li>Will you be driving to work, as usual?</li> </ul> </li> <li>when we do not want to indicate willingness, intention, invitation, etc, we prefer to use the future   continuous instead of will. For example, if guests have stayed longer than you wanted, and you   do not know when they are leaving, you might ask:<ul> <li>Will you be staying with us again tonight? (asking about their plans) rather than</li> <li>Will you stay with us again tonight? (they might think this is an invitation).</li> </ul> </li> <li>The Future Continuous also can be used (as the present continuous) to talk about arranged activities or   events in the future:<ul> <li>We will be leaving (or are leaving) for Istanbul at 7:00 in the evening (timetable).</li> </ul> </li> </ul> <p>The Future (Continuous, Perfect, Perfect Continuous) can also be used to say what we believe or imagine is happening around now:</p> <ul> <li>We could ask to borrow Joe\u2019s car. He won\u2019t be using it today \u2014 he went to work by bike.</li> <li>Most people will have forgotten the fire by now.</li> <li>Tennis fans will have been queuing at Wimbledon all day to buy tickets.</li> </ul> <p>We can use The Future Perfect Continuous to say what we think was happening at a point in the past:</p> <ul> <li>Motorist Vicky Hesketh will have been asking herself whether speed cameras are a good idea   after she was fined 100 gbp last week for driving at 33 kmh in 30 kmh zone.</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-12-be-to-inf-be-about-to-inf","title":"Unit 12. Be to + inf; be about to + inf","text":"<p>We often use  be to + infinitive in if-clauses to say that something must happen first (in the main clause) before something else can happen (in the if-clause) (in other words, to reverse usual cause&amp;effect order in \u201cif I win, I will retire\u201d):</p> <ul> <li>If the human race is to survive, we must look at environmental problems now.</li> <li>The law needs to be revised if justice is to be done.</li> </ul> <p>Compare the use of be to + infinitive and the present simple for the future in if-clauses:</p> <ul> <li>If Lopez is to win gold at the next Olympics, he needs to work on his fitness.</li> <li>If Lopez wins gold at the next Olympics, he has said that he will retire from athletics.</li> </ul> <p>Note how the order of cause and effects in if-sentences is reversed with these two tenses:</p> <ul> <li>If Lopez is to win gold result, effect, he needs to work cause.</li> <li>If Lopez wins gold cause, he has said that he will retire result, effect.</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-13-other-ways-of-talking-about-the-future","title":"Unit 13. Other ways of talking about the future","text":"<p>Useful expressions:</p> <ul> <li>with all likelihood</li> <li>is likely to</li> <li>A global disaster may well  have happened</li> <li>become a thing of the past</li> <li>the signs are</li> <li>the days of \u2026 may be over</li> <li>to be\u2026<ul> <li>due to, bound to, sure to, destined to, on the verge of, on the brink of, on the point of, about to, set to</li> </ul> </li> </ul> <p>We use be due to to say that something is expected to happen at a particular time, be sure / be bound to to say that something is likely or certain to happen, and be set to to say that something is ready to happen:</p> <ul> <li>The company\u2019s chief executive is due to retire next year, but following today\u2019s announcement of further losses she is sure to be asked to leave sooner.</li> <li>Will there be somewhere to get a coffee at the station? Oh, yes, there is bound to be.</li> <li>Her new film is set to be a great success.</li> </ul> <p>We use the following words to talk about intentions: guarantee, aim, agree, expect, hope, intend, mean, plan, promise, propose, resolve, undertake, want:</p> <ul> <li>We guarantee to refund your money if you are dissatisfied with the computer.</li> <li>We are looking to create 3000 jobs in the city over the next year.</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-14-the-future-seen-from-the-past","title":"Unit 14. The future seen from the past","text":"<p>Some examples:</p> <ul> <li>Eleni decided that she would stay at home for the summer.</li> <li>At the time, I though I would be going alone, but then Jan said he wanted to come.</li> <li>The exam was so easy that most people would have finished after 30 minutes.</li> <li>It was announced that there was to be a meeting of ministers that evening.</li> <li>Mrs Novak heard that she was to be moved to a post in a nearby school.</li> </ul> <p>To talk about an activity or event that was in the future at a particular point in the past, we can use</p> <ul> <li>either was/were to + inf \u2014 for things that actually happened:<ul> <li>At the time she was probably the best actor in the theatre company, but in fact some of her colleagues were to become much better known.</li> <li>He was to find out years later that the car he had bought was stolen.</li> </ul> </li> <li>or was/were to have + V3 \u2014 for things that were expected, but did not happen:<ul> <li>The boat, which was to have taken them to the island, failed to arrive.</li> </ul> </li> </ul> <p>In less format contexts it is more natural to use be supposed to:</p> <ul> <li>I was supposed to help, but I was ill I was to have helped, but I was ill</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-15-can-could-be-able-to-and-be-allowed-to","title":"Unit 15. can, could, be able to and be allowed to","text":"<p>To talk about the theoretical possibility of something happening we use could, not can. However, we use can, not could, to say that something is possible and actually happens:</p> <ul> <li>It could be expensive to keep a cat if we had one, it could or it may not be expensive.</li> <li>It can be expensive to keep a cat it can be, and it sometimes is.</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-16-will-would-and-used-to","title":"Unit 16. will, would and used to","text":"<p>We can use will (for the present) and would (for the past) to talk about:</p> <ul> <li>characteristic behaviour or habits:<ul> <li>Every day Dan will come home from work and turn on the TV.</li> <li>At school she would always sit quietly and pay attention.</li> </ul> </li> <li>things that are or were always true:<ul> <li>Cold weather will kill certain plants.</li> <li>During the war, people would eat all kinds of things that we do not eat now.</li> </ul> </li> </ul> <p>We can use will to draw conclusions or state assumptions about things that are the case now:</p> <ul> <li>Martina will be at home by now. Let\u2019s go and see her.</li> <li>You will know that Ewan and Lucy are engaged (I assume you already know).</li> </ul> <p>There is also alternative rules as to how make questions and negations with used to:</p> <p>A sentence written in past-habitual tense describes an occurrence that once occurred continuously or repeatedly:</p> <ul> <li>They used to agree with us.</li> <li> <p>They used to not agree with us.</p> <p>This formal usage is awkward and seldom used; we are more likely to write, \u201cThey used to disagree with us\u201d. An informal version of the sentence, more likely to be used if no direct antonym like disagree is available for a given sentence, is \u201cThey didn\u2019t use to agree with us\u201d.</p> </li> <li> <p>Used they to agree with us?</p> <p>This formal usage is rare. The informal form, much more common, is, \u201cDid they use to agree with us?\u201d.</p> </li> </ul> <p>would / will have V3:</p> <p>To talk about an unreal past situation \u2014 that is, an imaginary situation or a situation that might have happened in the past, but did not \u2014 we use would have V3:</p> <ul> <li>I would have been happy to see him, but I did not have time.</li> </ul> <p>However, to say that we think a past situation actually happened, we use will have V3:</p> <ul> <li>As it was cloudy, few people will have seen last night\u2019s lunar eclipse. rather than would have seen.</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-17-may-and-might","title":"Unit 17. may and might","text":"<p>We use may/might + have V3 and may/might + be + Ving to talk about possible events in the past, present and future:</p> <ul> <li>Do you think Laura may/might have completed the report by now? past</li> <li>His maths may/might have improved by the time the exam comes round future</li> <li>Marco is not in his office. He may/might be working at home today. present</li> <li>When I go to Vienna I may/might be staying with Max, but I am not sure yet. future</li> </ul> <p>We can use may/might have been + Ving to talk about possible situations or activities that went on over a period of past time:</p> <ul> <li>Callum did not know where the ball was, but he thought his sister might have been playing with it before she left for school.</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-18-must-and-have-to","title":"Unit 18. must and have to","text":"<p>We use must and must not in formal rules and regulations and in warnings:</p> <ul> <li>Bookings must be made at least seven days before departure.</li> <li>The government must not be allowed to appoint judges.</li> </ul> <p>In spoken English we often use must and mustn\u2019t to propose a future arrangement, such as a meeting or social event, without making detailed plans:</p> <ul> <li>We must get together more often.</li> <li>We mustn\u2019t leave it so long next time.</li> </ul> <p>We can also use I must \u2026 to remind ourselves to do something:</p> <ul> <li>I must charge my phone. I meant to do it yesterday, but I forgot.</li> </ul> <p>To draw a conclusion about\u2026</p> <ul> <li>something that happened in the past we use must have V3:<ul> <li>That is not Clara\u2019s car. She must have borrowed it from her parents.</li> </ul> </li> <li>something happening at or around the time of speaking we use must be Ving:<ul> <li>I cannot hear a noise. You must be imagining things.</li> </ul> </li> <li>something that is likely to happen in the future we use must be going to or must be Ving:<ul> <li>What are all those workmen doing? I think they must be going to dig up the road.</li> <li>I was wrong about the meeting being today. It must be happening next Friday.</li> </ul> </li> <li>a present situation we use must be:<ul> <li>Their goalkeeper must be at least two metres tall!</li> </ul> </li> </ul> <p>We can use must have to to say that we conclude something based on what we know about a present situation and must have had to to conclude something about a past situation:</p> <ul> <li>I cannot access the database. You must have to put in a password. a password is necessary</li> <li>Matt was not at home when I went round. He must have had to go out unexpectedly.</li> </ul> <p>We use have to in questions that imply a criticism. Must can also be used, although some people think this is rather old-fashioned. We usually stress have and must in sentences like this:</p> <ul> <li>Must you play your trumpet here? It is deafening!</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-21-linking-verbs-be-appear-seem-become-get","title":"Unit 21. Linking verbs: be, appear, seem, become, get","text":"<p>After the verbs come, get, and grow we can use a to-inf. Come and grow are often used to talk about gradual change:</p> <ul> <li>I eventually came / grew to appreciate his work.</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-27-negative-questions-echo-question-questions-with-that-clauses","title":"Unit 27. Negative questions; echo question; questions with that-clauses","text":"<p>In formal contexts, or when we want to give some special emphasis to the negative (perhaps to show that we are angry, very surprised, or to strongly persuade someone), we can use not after the subject in negative questions:</p> <ul> <li>Did she not realise that she had broken it?</li> <li>Can you not get there a bit earlier?</li> </ul> <p>We sometimes use negative words other that not such as never, no, nobody, nothing, nowhere:</p> <ul> <li>Why do you never help?</li> <li>Have you nowhere to go? (or Do you have nowhere to go?)</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-30-unit-31-ving-and-infinitives","title":"Unit 30. Unit 31. Ving and infinitives","text":"<p>See to as preposition on this page.</p> <p>Some verbs (feel, hear, notice, observe, overhear, see, watch) can be followed by an object and then either by an Ving form or bare inf, but the meanings may be slightly different:</p> <ul> <li>I saw them playing football from my window. (Ving indicates an action in progress) and</li> <li>I saw him smash the bottle. (bare inf indicates a completed action)</li> <li>I was able to watch them building the new car park from my office window. (Ving suggests that I watched, but not from start to finish) and</li> <li>I watched him climb through the window, and then I called the police. (bare inf suggests I watched the whole action from start to finish).</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-33-reporting-statements-that-clauses","title":"Unit 33. Reporting statements: that-clauses","text":"<p>The following reporting verbs (feel, acknowledge, assume, believe, consider, declare, expect, find, presume, report, think, understand) which are followed by a that-clause have an alternative with an object + to-inf (often to be), although the alternatives are often rather formal:</p> <ul> <li>I felt that the results were satisfactory</li> <li>I felt the results to be satisfactory</li> </ul> <p>After the verbs ask, demand and require we use of:</p> <ul> <li>The club asks of its members that they pay their fees by 31st December.</li> <li>Informal The club asks its member to pay their fees by 31st December.</li> <li>The company demands of its staff that they should be at work by 8:30.</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-34-verb-wh-clause","title":"Unit 34. Verb + wh-clause","text":"<p>In rather format contexts, particularly in writing, we can use as to with a meaning similar to about or concerning before a wh-clause. This is most common before whether:</p> <ul> <li>Opinion was divided as to whether the findings from the study were representative of the population as a whole.</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-36-reporting-offers-suggestion-orders-intention-etc","title":"Unit 36. Reporting offers, suggestion, orders, intention, etc","text":"Mistake in part A: The object usually refers to the person who -&gt; whom the offer suggestion, etc is made to;"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-38-reporting-what-people-say-using-nouns-and-adjectives","title":"Unit 38. Reporting what people say using nouns and adjectives","text":"<p>Noun + wh-clause:</p> <ul> <li>Juan raised the question of when the money would be collected.</li> <li>Our previous meeting looked at the issue of how to increase income.</li> </ul> <p>After many of the nouns: acknowledgement, advice, allegation, announcement, answer, argument,  comment, decision, explanation, forecast, guarantee, indication, observation, promise,  recommendation, reply, speculation, statement, suggestion, threat, warning, decision, instruction, order, refusal, explanation, discussion, problem we can use as to + wh-clause or as to + wh-whord + to-inf to introduce the subject of a question or topic discussed or thought about  (see also Unit 34). Note that an alternative preposition can usually be used instead of as to:</p> <ul> <li>She asked my advice as to what subject she should study at university or advice on...</li> <li>There was some discussion as to whether the price included tax or not or discussion of...</li> <li> <p>There was some disagreement as to whether he was eligible to play for France. </p> <p>Also: conflict, confusion, debate, discussion, doubt, question, speculation, uncertainty; concerned, indifferent, uncertain, undecided, unsure.</p> </li> <li> <p>Before we left we gave them strict instruction as to how to cook it or about how to...</p> </li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-39-should-in-that-clauses-the-present-subjunctive","title":"Unit 39. should in that-clauses; the present subjunctive","text":"<p>In formal contexts particularly in written English, we can often leave out should and use only the base form of the verb. This form is the present subjunctive and is used to describe bringing about the situation expressed in the that-clause:</p> <ul> <li>The have proposed that Felix move to their Munich office.</li> <li>They directed that the building be pulled down.</li> <li>We advised that the company not raise its prices.</li> </ul> <p>Other verbs used with the present subjunctive: advise, ask, beg, command, demand, insist, instruct,  intend, order, prefer, recommend, request, require, stipulate, suggest, urge, warn.</p> <p>Note: you can still use recommend you to do, but it means that it is you (not he) who is the best candidate for doing something.</p> <p>We can also use should or sometimes the subjunctive in a that-clause after it be adj:</p> <ul> <li>It is inappropriate that he should receive receives that award again.</li> </ul> <p>Also, instead of inappropriate: advisable, appalling, appropriate, (in-)conceivable, crucial,  essential, imperative, important, obligatory, (un-)necessary, urgent, vital.</p> <p>We can use should in a that-clause when we talk about our own reaction to something we are reporting particularly after be + adj:</p> <ul> <li>I am concerned that she should think I stole the money or ...that she thinks...</li> </ul> <p>Also, instead of concerned: amazed, amused, anxious, astounded, disappointed, shocked, surprised, upset.</p> <p>If we are talking about an intention or plan, we can often use a subjunctive rather that should:</p> <ul> <li>I have arranged that she come comes to the first part of the meeting. or ...that she should come... or ...for her to come...</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-41-unit-42-agreement-between-subject-and-verb","title":"Unit 41 &amp; Unit 42. Agreement between subject and verb","text":"<p>With any of, each of, either of, neither of or none of and a plural noun we use a singular verb:</p> <ul> <li>Neither of the French athletes has won this year.</li> </ul> <p>With a/the majority of, a number of, a lot of, plenty of, all (of), or some (of) and a plural noun we use a plural verb (however, we use a singular verb with the number of):</p> <ul> <li>A number of refugees have been turned back at the border.</li> <li>The number of books in the library has risen to over five million.</li> </ul> <p>After one of and a plural noun we use a singular verb. However, after one of + plural noun + who we use a plural verb:</p> <ul> <li>One of the reasons I took the job was that I could work from home.</li> <li>He is one of those teachers who insist on pupils sitting silently in class.</li> </ul> <p>With any of, none of, the majority of, a lot of, plenty of, all (of), some (of) and an uncountable noun we use a singular verb:</p> <ul> <li>All the furniture was destroyed in the fire.</li> <li>None of the equipment appears to be damaged.</li> </ul> <p>With every or each and a singular noun or coordinated noun (x and y) we use a singular verb:</p> <ul> <li>Every boy and girl takes part in the activity.</li> <li>Every room looks over the harbour.</li> </ul> <p>When a subject is made up of two or more items joined by either \u2026 or \u2026 or neither \u2026 nor \u2026 we use a singular verb if the last item is singular, and a plural verb if the last item is plural:</p> <ul> <li>Either the station or the cinema is a good place to meet.</li> <li>The President or his representatives are to attend the meeting.</li> </ul> <p>Although the words data and media (newspaper, television, etc.) are plural (singular datum and medium), they are commonly used with a singular verb. However, in formal contexts such as academic writing a plural verb is preferred. Note that other similar plurals such as criteria and phenomena (singular criterion and phenomenon) are always used with plural verbs.</p> <p>With a phrase referring to a measurement, amount or quantity we usually prefer a singular verb:</p> <ul> <li>Only three metres separates separate the runners in first and second places.</li> </ul> <p>and a singular verb must be used when the complement is a singular noun phrase (e.g. a long time):</p> <ul> <li>Three hours seems a long time to take on the homework.</li> </ul> <p>When the first noun in a complex subject is a percentage or a fraction the verb agrees with the noun closest to the verb:</p> <ul> <li>An inflation rate of only 2% makes a difference to exports.</li> <li>About  50% / half of the houses need major repairs.</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-45-aan-the-and-zero-article","title":"Unit 45. a/an, the and zero article","text":"<p>If we want to describe a particular instance of a concept in general we can use a/an:</p> <ul> <li>I could see the plane high up in the sky &lt;-&gt; When I woke up there was a bright blue sky.</li> <li>What are your plans for the future. &lt;-&gt; She dreamt of a future where she could spend more time painting.</li> </ul> <p>After the position of, the post of, or the role of we use zero article before a job title:</p> <ul> <li>Dr Simons has taken on the position of Head of Department.</li> </ul> <p>Note that a/an, or sometimes zero article, is used with a name when referring to the particular excellent qualities of the person named:</p> <ul> <li>Majid plays tennis well, but he will never be a Roger Federer.</li> </ul> <p>We also use a/an when we refer to an individual example of a product made by a particular manufacturer (e.g. I have just bought a Mercedes) or a work by a particular artist (e.g. Do you think it could be a Van Gogh / a Rembrandt?).</p> <p>You can use a/an before a person\u2019s name if you do not know the person yourself:</p> <ul> <li>Dr Lee is here for you I know Dr Lee.</li> <li>There is a Dr Amy Lee on the phone I have not heard of her before Do you want to tell to her?</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-49-no-none-of-and-not-any","title":"Unit 49. no, none (of) and not any","text":"<p>In a formal or literary style we can use not a in initial position of after and, but or that (see also Unit 100):</p> <ul> <li>Not a sound came from the room.</li> <li>She kept so quiet that not a soul in the house knew she was there.</li> </ul> <p>We can give special emphasis to no or none of using phrases like no amount of with uncountable nouns, not one\u2026 / not a single\u2026 with singular countable nouns, and not one of\u2026 with plural nouns:</p> <ul> <li>The company is so badly managed that no amount of investment will make it successful.</li> <li>Not one person remembered my birthday.</li> <li>Not one of the families affected by the noise wants to move.</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-50-much-of-many-of-a-lot-of-lots-of-etc","title":"Unit 50. much (of), many (of), a lot of, lots (of), etc.","text":"<p>In formal contexts, such as academic writing, much (of) and many (of) are often preferred to a lot of, lots of. We can also use phrases such as a large / considerable / substantial amount of (with uncountable nouns), or a large / considerable / great / substantial number of (with plural nouns):</p> <ul> <li>Much debate has been heard about Thornton\u2019s new book.</li> <li>There could be many explanations for this.</li> <li>Much of her fiction describes women in unhappy marriages.</li> </ul> <p>In formal contexts we can use much and many as pronouns:</p> <ul> <li>There is no guarantee she will recover. Much depends on how well she responds to treat.</li> <li>Many have argued that she is the fines poet of our generation.</li> <li>Not once did I see a tiger in the jungle; although I heard many.</li> </ul> <p>We can use the phrase many a with a singular noun to talk about a repeated event or a large number of people or things:</p> <ul> <li>Many a pupil at the school will be pleased that Latin is no longer compulsory.</li> </ul> <p>To emphasise that we are talking about a large number we can use a good / great many with a plural noun:</p> <ul> <li>She has a good / great many friends in New Zealand.</li> <li>A good / great deal of the exhibition was devoted to her recent work.</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-51-all-of-whole-every-each","title":"Unit 51. all (of), whole, every, each","text":""},{"location":"English/Grammar/07.UnitsFromMurphy/#every-and-each","title":"every and each","text":"<p>Often we can use every or each with little difference in meaning. However, we use every:</p> <ul> <li>with almost/virtually/etc + noun to emphasise we are talking about a group as a whole:<ul> <li>Almost every visitor stopped and stared.</li> </ul> </li> <li>with a plural noun when every is followed by a number:<ul> <li>I go to the dentist every six months.</li> </ul> </li> <li>with abstract uncountable nouns such as chance, confidence, hope, reason, and sympathy to show a   positive attitude to what we are saying. Here every means complete or total:<ul> <li>She has every chance of success in her application for the job.</li> </ul> </li> <li>in phrases referring to regular or repeated events such as: every other kilometre, every single day,   every so often, every few months, and every now and again.</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-52-few-little-less-fewer","title":"Unit 52. few, little, less, fewer","text":"<p>We can use the few and the little followed by a noun to suggest not enough:</p> <ul> <li>It is one of the few shops in the city centre when you can buy food.</li> </ul> <p>Instead of the few / the little we can use what few / little to mean the small number / amount:</p> <ul> <li>She gave what little money she had in her purse to the man.</li> <li>What few visitors we have are always made welcome.</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-58-unit-59-participle-clauses-with-adverbial-meaning","title":"Unit 58 &amp; Unit 59. Participle clauses with adverbial meaning","text":"<ul> <li>Opening her eyes, the baby began to cry.</li> <li>Faced with a bill for 10000, Ivan has taken an extra job.</li> <li>Looked after carefully, the plant can live through the winter.</li> <li>Having finished the book, I had a holiday.</li> <li>Having been hunted close to extinction, the rhino is once again common in this area.</li> </ul> <p>The in -ing clause indicates \u2018cause\u2019:</p> <ul> <li>In criticising the painting, I knew I would offend her.</li> <li>In choosing Marco, the People\u2019s Party has moved to the left.</li> </ul> <p>We can often use by + -ing or in + -ing with a similar meaning, although by + -ing is preferred in informal contexts:</p> <ul> <li>In/By writing about Spanish culture, I came to understand the county better.<ul> <li>In writing \u2026 \u2014 the consequence of writing was to understand.</li> <li>By writing \u2026 \u2014 the method I used to understand the country better was to write.</li> </ul> </li> </ul> <p>Adverbial meaning can also be added by a clause beginning with a conjunction or adjective but with no verb. This kind of clause has the same meaning as a clause beginning with a conjunction + subject + be and is used in fairly formal English:</p> <ul> <li>While in Poland, they will play two concerts in Warsaw.</li> <li>Although just two feet apart, they did not speak.</li> <li>I try to use public transport whenever possible whenever it is possible.</li> <li>Unhappy with the decision, Johnson swore at the referee.</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-69-participle-adjectives-and-compound-adjectives","title":"Unit 69. Participle adjectives and compound adjectives","text":"<p>We can use many participle adjectives immediately after nouns when they identify or define the noun. This use is similar to defining relative clauses and they are often called reduced relatives:</p> <ul> <li>We had to pay for the rooms used. (or the rooms we used)</li> </ul> <p>Some of these are rarely used before the noun:</p> <ul> <li>My watch was among the things taken.</li> </ul> <p>The list of such nouns: applying, caused, found, included, provided.</p> <p>That and those can be used as pronouns before a participle adjective:</p> <ul> <li>The flour is of a higher quality than that produced by other varieties of wheat.</li> <li>The touchscreens perform less well than those manufactured elsewhere.</li> <li>Here is some advice for those preparing to go on holiday.</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-71-adjectives-and-adverbs","title":"Unit 71. Adjectives and adverbs.","text":"<p>There are adjectives ending with -ly: cowardly, elderly, friendly, kindly, lively, lonely, lovely. We do not add -ly to it to make an adverb, instead we can use a prepositional phrase with fashion, manner, or way:</p> <ul> <li>He smiled at me in a friendly way.</li> <li>She waved her hands around in a lively fashion.</li> </ul> <p>There are adverbs NOT ending with -ly: moreover, some of them have different meanings with and without -ly:</p> <ul> <li>She gave her time free for no money. She gave her time freely willingly.</li> <li>I arrived late for the concert not on time. I have not seen Amy lately recently.</li> <li>He wandered deep a long way into the forest and got lost. He felt deeply very hurt by her criticisms.</li> <li>You do no have to change trains. You can go direct (without stopping).</li> <li>I will be with you directly (very soon).</li> <li>It sounded awful - one of the choir members was singing flat.</li> <li>This time I flatly (definitely, completely) refused to lend him any money.</li> <li>Hi kicked the ball high over the goal.</li> <li>Everyone thinks highly (very good) of her teaching.</li> <li>He has just arrived.</li> <li>You can be justly (rightly) proud of your musical achievements.</li> <li>Which of these cheeses do you like most?</li> <li>Her novels are now mostly (most of them) out of print.</li> <li>They cut short (went home early) their holiday when Lina fell ill.</li> <li>The speaker will be arriving shortly (soon).</li> <li>The door was wide open so I just went straight in.</li> <li>You won\u2019t have any problems getting the book. It is widely (in many places) available.</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-72-adjectives-and-adverbs-comparative-and-superlative-forms","title":"Unit 72. Adjectives and adverbs: comparative and superlative forms","text":"<p>When most + adj / adverb is used without the, most means something like very:</p> <ul> <li>I checked the form most carefully very carefully but did not notice the mistake.</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-73-comparative-phrases-and-clauses","title":"Unit 73. Comparative phrases and clauses","text":"<p>If we put a singular countable noun between an adjective and the second as we use a/an in front of the noun:</p> <ul> <li>Despite his disability, he tried to lead as normal a life as possible.</li> </ul> <p>The negative form of sentences like this can use either not as or sometimes not such:</p> <ul> <li>It is not as quiet a place (not such a quiet place) as it used to be.</li> </ul> <p>We can use so, too and how followed by an adjective in a similar way:</p> <ul> <li>It is not quite so straightforward a problem as it might at first seem.</li> <li>Conspiracy is perhaps too strong a word.</li> <li>How big a piece do you want?</li> </ul> <p>In rather formal English we can use too + adjective + a/an + noun:</p> <ul> <li>I hope you have not had too tiring a day.</li> </ul> <p>We can use go so / as far as + to-inf to talk about actions that are surprising or extreme:</p> <ul> <li>One furious woman went (so / as far as) to throw tomatoes at the minister.</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-80-giving-reasons-as-because-for-and-with","title":"Unit 80. Giving reasons: as, because, for and with.","text":"<p>See also Linking Words.</p> <p>In formal or literary written English we can also introduce a reason in a clause beginning for, in that, or, less commonly, inasmuch as. For is a formal alternative to because; in that and inasmuch as introduce clauses which clarify what has been said by adding detail:</p> <ul> <li>We must begin planning now, for the future may bring unexpected changes.</li> <li>The film is unusual in that it features only four actors.</li> <li>Clara and I have quite an easy life, inasmuch as neither of us has to work too hard but we earn quite a lot off money.</li> </ul> <p>The prepositions because of, due to, and owing to can also be used before a noun or noun phrase to give a reason for something:</p> <ul> <li>She was unable to run owing to / due to a leg injury.</li> <li>We have less money to spend owing to / due to budget cuts.</li> <li>The low election turnout was partly due to / owing to the bad weather.</li> <li>It was owing to / due to his encouragement that she applied for the job.</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-82-contrasts-although-though-even-though-if-while-whilst-whereas","title":"Unit 82. Contrasts: although, though, even though, if, while, whilst whereas","text":"<p>We can give special emphasis to an adjective by putting it before though in the pattern adjective + though + noun / pronoun + verb (usually a linking verb such as appear, be, become, feel, look, seem, sound, prove, etc). As (but not although) can be used instead of though:</p> <ul> <li>Hot though (or as) the night air was, they slept soundly.</li> <li>Although / Though the night air was hot, they slept soundly.</li> </ul> <p>We can use while or whereas (or less often whilst) to say that something contrasts with something in the main clause. The while/whereas clause may come before or after the main clause:</p> <ul> <li>Juan gets lots of homework from school, while / whereas Mia gets very little.</li> <li>While / Whereas I always felt I would pass the exam, I never thought I would get an A grade.</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-83-unit-84-if","title":"Unit 83 &amp; Unit 84. If","text":"<p>We can talk about possible future events with a present perfect verb in the if-clause and a future form (will, present continuous, or be going to) in the main clause. Sometimes present perfect or present simple can be used with a similar meaning:</p> <ul> <li>I will lend you War and Peace if I have finished it before you go on holiday.</li> <li>If you have not paid the bill by Friday, we are taking the carpets back.</li> </ul> <p>However, to focus on the future consequences of a past event, we use the present perfect:</p> <ul> <li>If I have failed my exam again, I am giving up the course. suggests I have already taken the exam; I do not know the result</li> <li>If I fail my exam again, I am giving up the course. I may or may not have taken the exam</li> </ul> <p>We do not usually use if \u2026 will in conditional clauses. However, we can use if \u2026 will:</p> <ul> <li>when we talk about a result of something in the main clause:<ul> <li>Open a windows if it will help you to sleep Helping you to sleep is the result of opening the window</li> <li>I will be angry if it turns out that you are wrong.</li> </ul> </li> <li>in requests or with the meaning if you are willing to (or if \u2026 would to be more polite):<ul> <li>If you will / would take your seats, ladies and gentlemen, we can begin the meeting.</li> </ul> </li> <li>in real conditionals when we want to show that we disapprove of something. In this case, will is stressed in speech:<ul> <li>I am tired. Well, if you will go to bed so late, I am not surprised.</li> </ul> </li> <li>we can use if \u2026 won\u2019t when we talk about a refusal to do something:<ul> <li>There is no point in trying to teach the class if they won\u2019t pay attention.</li> </ul> </li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-83-if-i-were-you-imagine-he-were-to-win","title":"Unit 83. If I were you \u2026; imagine he were to win","text":"<p>In unreal conditional sentences we use were after any subject in the if-clause, including singular first and third person subjects (past subjunctive):</p> <ul> <li>If your mother were here, I am sure she would not let you eat all those chocolates.</li> </ul> <p>Were is used in this way in other patterns when we talk about imaginary situations:</p> <ul> <li>when we use were + subject + to-inf or were + subject as a more formal alternative to if + subj + were:<ul> <li>Were the elections to be held today, the Liberals would win easily.</li> <li>Were I not in my seventies and rather unfit, I might consider taking up squash.</li> </ul> </li> <li>after wish:<ul> <li>I enjoy my job enormously, but I wish it were closer to home.</li> <li>Of course I am pleased that Jan has been given the award. I only wish he were not so boastful about it.</li> </ul> </li> <li>after if only when we express our regret that a situation is not different:<ul> <li>If your job is so bad, why do not you leave? If only it were that simple.</li> <li>I would really like to do accounting. If only I were not so poor at maths.</li> </ul> </li> <li>after would rather and would sooner when we talk about preferences:<ul> <li>I feel embarrassed about what happened and would rather the event were forgotten.</li> <li>I have arranged a meeting for the end of July. I would sooner it were earlier, if possible.</li> </ul> </li> <li>in sentences or clauses beginning with suppose, supposing and imagine:<ul> <li>Suppose I were to lower the price by $100. Would you consider buying the car them?</li> <li>I know it looks rather dirty now, but imagine the house were to be repainted. It would look a lot more attractive.</li> </ul> </li> <li>in comparisons we can use were after as if and as though and even if:<ul> <li>I remember stepping off the boat in New York as if it were yesterday.</li> <li>Despite losing the election, she continues to act as though she were prime minister.</li> <li>It is too late to start the work this year even if it were possible to find the  money for it.</li> </ul> </li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-90-prepositions-of-time","title":"Unit 90. Prepositions of time","text":"<p>We use until to say that something continued or will continue to a particular time, and by to say that something happened or will happen either before a particular time or at that time at the latest:</p> <ul> <li>We have to be at home until 2:30 We must not leave home before 2:30.</li> <li>We have to be at home by 2:30 We must arrive home either before or at 2:30.</li> </ul>"},{"location":"English/Grammar/07.UnitsFromMurphy/#unit-91-talking-about-exception","title":"Unit 91. Talking about exception","text":"<p>We use except, not except for, with to-inf and that-clauses:</p> <ul> <li>I rarely need to go into the city centre except to do some shopping.</li> <li>They look just like the real thing, except that they are made of plastic.</li> </ul> <p>We usually use except before prepositions, bare-inf and that-clauses including those where the word that is left out:</p> <ul> <li>There is likely to be rain everywhere today except in Wales.</li> <li>There is nothing more the doctor can do except keep an eye on him.</li> </ul>"},{"location":"English/Vocabulary/10.RareWords/","title":"Rare Words","text":""},{"location":"English/Vocabulary/10.RareWords/#barrons-sets","title":"Barron\u2019s sets","text":"Set 01 Set 02 Set 03 Set 04 Set 05 inveigh (80e-7) gesticulate (67e-7) doddering (87e-7) importune (56e-7) irate (668e-7) vacillate hirsute (132e-7) abjure (247e-7) connubial (74e-7) sinecure (139e-7) blase puissant (164e-7) recondite (255e-7) asinine (107e-7) pariah (485e-7) recant vituperation vapid (256e-7) shibboleth (125e-7) frenetic (653e-7) vitriolic procrastinate (252e-7) maim (266e-7) doleful (262e-7) qualm (119e-7) pugnacious squeamish histrionic (428e-7) perpetrate (307e-7) domicile (1354e-7) feint capitulate extol (458e-7) temerity (360e-7) fervid (159e-7) fractious nettle (385e-7) paragon (483e-7) mien (369e-7) consternation (1280e-7) nepotism lassitude felon (609e-7) irascible (376e-7) castigate (179e-7) largesse felicitous (490e-7) vivacious (634e-7) diatribe (503e-7) delude (344e-7) trenchant commodious connoisseur (675e-7) embellish (526e-7) potentate (195e-7) adroit repulse (554e-7) culminate (698e-7) prodigy (552e-7) asperity (238e-7) incontrovertible abhor (594e-7) glean (732e-7) puny (589e-7) sumptuous (1308e-7) germane sabbatical obviate (738e-7) sultry (613e-7) proffer (330e-7) succulent magnanimous inviolable (783e-7) eschew (747e-7) comely erudite (768e-7) implore (863e-7) culpable (902e-7) perfunctory obsolescence (811e-7) emaciated (967e-7) laudable (903e-7) divulge (860e-7) inveterate dexterity (1488e-7) carnage (1055e-7) Set 06 Set 07 Set 08 Set 09 Set 10 legerdemain (119e-7) complicity (2003e-7) impugn (216e-7) indoctrinate (165e-7) prognosticate (58e-7) stentorian (183e-7) consummate (1762e-7) remiss (417e-7) interject (233e-7) dulcet (123e-7) noisome (219e-7) insatiable (1455e-7) evanescent (714e-7) umbrage (279e-7) jeopardise (216e-7) turpitude (261e-7) omnipotent (1443e-7) brawl (655e-7) quip (316e-7) nonentity (222e-7) fetter (266e-7) fret (1289e-7) passe (664e-7) jaunty (465e-7) begrudge (244e-7) aspirant (529e-7) antiquated (1167e-7) infamy (917e-7) bristle (512e-7) fulsome (288e-7) profligate (656e-7) indigent (1028e-7) impertinent (930e-7) contrite (577e-7) interloper (288e-7) gregarious (683e-7) exult / exultation (952e-7) drudgery (971e-7) peruse (583e-7) surfeit (346e-7) aegis (791e-7) afflict (681e-7) demeanor (1021e-7) assiduous (589e-7) encumbrance (385e-7) emissary (813e-7) bane (675e-7) quell (1062e-7) evince (613e-7) apostate (553e-7) inordinate (1080e-7) dregs (660e-7) delve (1111e-7) nondescript (724e-7) unconscionable (584e-7) construe (1138e-7) brash (639e-7) cursory (1399e-7) supplication (958e-7) gullible (662e-7) persevere (1233e-7) cupidity (357e-7) itinerant (1419e-7) stipulate (964e-7) rabid (711e-7) complacent (1284e-7) mollify (263e-7) indiscriminate (1432e-7) frustrate (1104e-7) levity (766e-7) diminutive (1516e-7) venial (247e-7) supine (1635e-7) curtail (1117e-7) allay (932e-7) bona fide (1634e-7) potpourri (206e-7) wan (1411e-7) vestige (935e-7) perspicacious (115e-7) skirmish (1220e-7) wane (940e-7) retort (1325e-7) bulwark (953e-7) strident (996e-7) flagrant (1038e-7) indolent (1052e-7) paucity (1382e-7) sanguine (1481e-7)"},{"location":"English/Vocabulary/10.RareWords/#other","title":"Other","text":"1 2 3 4 5 schadenfreude (54e-7) lacerate (64e-7) murmuration (3e-7) shivoo (0.1e-7) crapulous (11e-7) botch (92e-7) dither (146e-7) senectitude laterigrade (0.1e-7) parergon (20e-7) collude (296e-7) sensitize handsel (9e-7) fallals (3e-7) equivoque aplomb ingratiate certifiable (85e-7) froideur cloudland skittish fumble (392e-7) skulk asseverate (12e-7) ataraxia (35e-7) benighted (-ness) vibe de rigueur fulminate contumacious loathe flaunt dabble (217e-7) ostracize umbra muddle (705e-7) grope (438e-7) adjourn lackadaisical cerulean congregate derail rescind (565e-7) bedlam antic (157e-7) petrified deplete plenitude aloofness boorish commendable cringe frolic quagmire (492e-7) corpulent fledgling brackish (673e-7) rectitude multitudinous bilious (333e-7) vindication (1289e-7) scour blatantly (984e-7) amass bellicose penchant perishing inadvertent modus operandi calamitous tally faux flair igneous baleful (445e-7) meagre affront (1235e-7) heiress garner defamatory deteriorate allotment lousy (1401e-7) egregious foreboding (1093e-7) provenance (1627e-7) subsumed (1564e-7) savvy (1778e-7) interminable (1393e-7) concomitant (3237e-7) 6 7 8 9 10 equanimous (11e-7) puckish (40e-7) paralogize (0.06e-7) oscitant (0.5e-7) cris de coeur (1e-7) hubristic platitudinous (63e-7) bonzer (3.6e-7) spoony (10e-7) fugacious (14e-7) effulgent (91e-7) mordant (236e-7) muckrake (6e-7) uxorious (37e-7) susurration (17e-7) dowdy (204e-7) pendulous (244e-7) rebarbative (23e-7) sine die (56e-7) shrive (27e-7) feckless (219e-7) munificent ruminative (83e-7) dudgeon (112e-7) beastie (42e-7) fecund impish (296e-7) risible (124e-7) noblesse oblige (116e-7) scapegrace (69e-7) gustatory querulous (319e-7) salubrious (254e-7) wheedling (140e-7) runnel (89e-7) dilatory (283e-7) petulant (480e-7) sclerotic (292e-7) turgid (248e-7) stevedore (99e-7) fulsome cranky (602e-7) taciturn voluble (340e-7) desuetude (99e-7) execrable (308e-7) parsimonious (613e-7) redolent statecraft (549e-7) aleatory (108e-7) guile(-less) nefarious sagacious (628e-7) tempestuous (598e-7) lorn (104e-7) garrulous obtuse (748e-7) serpentine ravenous (687e-7) saturnine (134e-7) histrionic propitious reticent verdant vainglorious (156e-7) effusive (437e-7) quiescent (903e-7) recalcitrant (1148e-7) voracious (769e-7) rambunctious (227e-7) incendiary frugal (927e-7) tenacious tremulous (919e-7) juggernaut (282e-7) fastidious (938e-7) auspicious (1486e-7) evocative withering (1120e-7) serendipity (334e-7) insolent noxious (1550e-7) discerning (1840e-7) zealous (2477e-7) demure (539e-7) efficacious (1820e-7) pernicious (2114e-7) obstinate (2042e-7) ubiquitous (4151e-7) meritorious (1109e-7) 11 12 13 14 15 petrichor (0.3e-7) umbrous (0.9e-7) green-collar (0.2e-7) jamboree (55e-7) nitpicky (11e-7) defenestrate (2e-7) brumous (1e-7) coruscant (2e-7) minx (66e-7) sashay (34e-7) hagridden (3e-7) sesquipedalian (11e-7) conglobate (2e-7) damnedest (160e-7) interdigitate (42e-7) obfuscatory (19e-7) tenebrous (41e-7) kerfuffle (8e-7) beeline (194e-7) tartness (61e-7) frowzy (27e-7) vagary (53e-7) pulchritude (30e-7) infest (213e-7) inundate (136e-7) dulcet (123e-7) sophomoric (78e-7) pollyanna (153e-7) repartee (259e-7) infuriate (146e-7) gloaming (147e-7) euphony (84e-7) craven (205e-7) rekindle (332e-7) deliriously (175e-7) insouciance (169e-7) irrefragable (102e-7) demur (222e-7) jettison (358e-7) splurge (188e-7) circumlocution (176e-7) pellucid (145e-7) perfidious (247e-7) clairvoyant (386e-7) immiscible (290e-7) antediluvian (218e-7) imbroglio (162e-7) scintillating (286e-7) unflinching (388e-7) innervate (350e-7) acerbic (272e-7) propinquity (173e-7) opprobrium (346e-7) artisanal (496e-7) humdrum (361e-7) celerity (319e-7) meed (175e-7) lacuna (427e-7) sheen (966e-7) squirm (448e-7) blithe (375e-7) salacious (251e-7) smattering (444e-7) impromptu (1001e-7) blankly (808e-7) abrogate (396e-7) palimpsest (281e-7) inchoate (620e-7) malevolent (1131e-7) profuse (809e-7) abstruse (553e-7) quibble (320e-7) quandary (668e-7) sophomore (1143e-7) imperceptible (888e-7) circumspect (680e-7) timorous (334e-7) avarice (823e-7) hiatus (1144e-7) thither (906e-7) inculcate (771e-7) sonorous (747e-7) onus (929e-7) nourish (1401e-7) crux (1272e-7) indefatigable (988e-7) specious (754e-7) succinct (1288e-7) tenet (1401e-7) veracity (1286e-7) 16 17 18 19 20 greeb (0.2e-7) comfortingly (132e-7) ultracrepidarian (0.3e-7) athleisure (0.2e-7) maffick (0.9e-7) tantalize (88e-7) unbeknownst (269e-7) forgettery (1e-7) notabilia (5e-7) cannikin (1e-7) toupee (93e-7) blip (281e-7) holus-bolus (3e-7) true-blue (45e-7) divagate (2e-7) mockingbird (115e-7) idiosyncrasy (295e-7) chinwag (4e-7) centenarian (54e-7) exurb (5e-7) misogynistic (245e-7) surreptitious (444e-7) moggy (6e-7) centenarian (72e-7) malinger (22e-7) impersonate (255e-7) perilously (446e-7) memoriter (12e-7) puffery (84e-7) perambulator (48e-7) prescience (338e-7) meander (580e-7) purloin (41e-7) prelapsarian (104e-7) sotto voce (131e-7) goatee (362e-7) valour (673e-7) slumberous (53e-7) brinkmanship (104e-7) dissemble (150e-7) relegate (387e-7) inequity (824e-7) oleaginous (56e-7) hireling (105e-7) ovine (203e-7) vexing (615e-7) culpable (902e-7) limerick (104e-7) immortalize (133e-7) amalgamate (206e-7) lurk (685e-7) incredulous (938e-7) Luddite (117e-7) vim (178e-7) invigorate (259e-7) candour (715e-7) sprawl (1001e-7) cantankerous (269e-7) castigate (179e-7) awestruck (289e-7) irritate (914e-7) pejorative (1009e-7) winsome (286e-7) conflate (344e-7) exculpatory (355e-7) corroborate (917e-7) implicate (1011e-7) imprimatur (308e-7) hedonism (561e-7) fete (367e-7) knack (1156e-7) compendium (1030e-7) digression (729e-7) irate (668e-7) instantiate (501e-7) permeate (1182e-7) blasphemy (1164e-7) superlative (754e-7) conflagration (746e-7) conundrum (721e-7) infiltrate (1289e-7) docile (1206e-7) placid (1023e-7) coalesce (999e-7) jumble (1009e-7) volition (1676e-7) conjugal (1329e-7) bewilderment (1201e-7) ire (1136e-7) inalienable (1203e-7) 21 22 23 24 25 lickspittle (8e-7) sole meuniere (6e-7) mussitation (0.3e-7) minatory (42e-7) smaragdine( 0.6e-7) dairymaid (21e-7) beleaguer (11e-7) incogitant (0.3e-7) jejune (71e-7) mumpsimus (1e-7) aubergine (104e-7) dingbat (28e-7) daymare (2e-7) lachrymose (74e-7) sumpsimus (1e-7) groveling (128e-7) doula (55e-7) consuetude (5e-7) meretricious chatoyant (5e-7) footloose (194e-7) pyrrhic (76e-7) kibitzer (10e-7) mendacious vulpine (23e-7) meritocracy (337e-7) satiate (102e-7) ululate (11e-7) loquacious Weltschmerz (33e-7) prowl (391e-7) plod (164e-7) banausic (17e-7) jocular (329e-7) vaunting (62e-7) gibberish (404e-7) janitorial (195e-7) confabulate (23e-7) puerile nescience (119e-7) circuitous (568e-7) commode (300e-7) hobbyhorse (39e-7) intransigent (396e-7) canard (158e-7) lustrous (584e-7) spendthrift (302e-7) verisimilar (45e-7) limpid platitude (177e-7) matrimony (672e-7) leek (344e-7) fructify (46e-7) stilted overwinter (204e-7) stupendous (701e-7) sleight (440e-7) ruth (79e-7) invidious (600e-7) orogeny (207e-7) woo (705e-7) crass (583e-7) lineament (80e-7) irksome (662e-7) malfeasance (302e-7) conspire (713e-7) florid (655e-7) sinecure (139e-7) mannered coterminous (344e-7) retaliate (878e-7) rife 1(107e-7) gravid (216e-7) resentful comportment (368e-7) purportedly (1039e-7) sluggish (1605e-7) exterminate (537e-7) obnoxious (1504e-7) ostensible (1045e-7) variegated (1061e-7) exodus (2185e-7) iconoclastic (552e-7) contemptuous (1600e-7) ameliorate (1172e-7) hamper (1241e-7) reconnaissance (2695e-7) mumbling (662e-7) 26 27 28 29 30 slugfest (22e-7) trothplight (3e-7) ultracrepidarian (0.1e-7) septenary 16 daunt skitter (62e-7) sibylline (32e-7) forgettery (1e-7) gramarye 2 obstruct regurgitate (123e-7) elate (35e-7) holus-bolus (3e-7) antinomy 301 obstreperous abstemious (160e-7) expostulate (35e-7) memoriter (4e-7) mickle 17 obdurate expunge (213e-7) mesmerize (68e-7) luddite (6e-7) incommunicado obstinate fusiform (302e-7) distend (104e-7) slumberous (27e-7) dilapidated occlude rummage (304e-7) coagulate (167e-7) oleaginous (38e-7) ramshackle draggle ardour (448e-7) miniscule (175e-7) true-blue (43e-7) imbue sulky jubilant (602e-7) flout (242e-7) ramification (201e-7) nonplussed horrendous acquiesce (901e-7) foreshadow (321e-7) winsome (210e-7) peeve insolence chagrin (961e-7) inane (363e-7) cantankerous (265e-7) befuddle imperious abomination (977e-7) sui generis (506e-7) imprimatur (338e-7) dislodge carnation promiscuous (1124e-7) hedonism (633e-7) ironclad (451e-7) prevaricate mingle haphazard (1422e-7) crevice (662e-7) yank (459e-7) mayhem preoccupy elucidate (1639e-7) encumbered (679e-7) wiggle (514e-7) recluse engross affluence (1657e-7) inconsequential (1160e-7) camaraderie (1029e-7) beguile moribund sojourn (1739e-7) insurmountable (1341e-7) poky chance upon squalid afore disparage bustling 31 32 33 34 35 merrily benevolence brumal featly patrician convene attenuate bedizen stardust objurgate livid arete bunglesome obsequiously maladroit alacrity brachylogy gadzookery sepulcher lenity intertwine pervious solitudinarian watershed kismet unsheathe palmy fantasticate vulnerary innuendo acumen logomachy oblivescence vatic deracinate ditto literatim decathect upbraid denouement flit gerontocracy paralipsis turncoat clandestine marshy abridge naissance truckle circumferential exacerbate daily-breader hyetal terse cervine exasperate mishpocha goldilock sprout berate scold apopemptic earworm silver-tongued behindhand vertigo abubble instauration reverie aerie virago valedictory cerebrate reproach aberration splinter tidings suspiration pullulate perk sliver tabernacle tattersall pestiferous obscene salver pinguid craic peculate throngs malapropism enrapture shambles aflame valiant 36 37 38 39 40 tire out moot plead ravel pant holistically deject growl courteous languid trotting avow snappishly dwindle indignantly splendour assent pretext delirium hookah scurry paramour oyster dashing hiss queer illicit succour stoop faint crease abode credulous rumbling coax borough abyss banter shriek chrysalis pliable premeditate orderly chimney buttercup embarked bristling peering fluster actuarial entrapment shrill vivisection barrowful startle inadmissible frown shatter hoarsely tedious conferred crossly gasp sternly batler cane gravely grok wretched shack heckler titter manky trample subdue inanimate thimble belch thistle sob trudge comfit dianthus serpent wriggle surfeit bow hideousness piteous nibble 41 42 43 44 45 edict livery mournfully forthright crimson impale footman treacle encroach mallet frizzy disembark bawl adage furrow mediocrity crouch unruffle glimmer eldritch egalitarian renounce adduce bespoke espouse austerity solemn shrine inflagrante fervour rabies uncivil emeritus paddle smorgasbord den lullaby tentative spinster reel affectively howl stifle candidly derision intermingle grunt preposterous clogs tread wisp fling snazzy backcomb porpoise disdain cauldron hedgerow spanner flapper trot litany muppet ratsbane drawl bough impartial wade coiffure caper thatch abruptly deliberation cognate askance meekly swift sordid oblong tureen wearily fleet adjudicator merrily dainty twinkling fallibility pristine bequeath bailout 46 47 48 49 50 flurry sanctuary keep/stay schtum paunchy cognisant diligent encomium heinous tubby mildewed rustle smithereens abominable rotund debacle vagaries epitomise resplendent pudgy entice miscreant newfangled dauntless chubby cede gimmick virulent plucky chunky divestiture admonition slovenly intrepid burly floosie mixed blessing pundit/punditry valorous waft addenda imprudent lampoon listless droll sever elation spout savoury beget remit foil jab raze befriend exhilaration flabbergasted slant enthralling abet disquieting consecrated crumble spellbind indolent scawl precariously audacious enchanting runt adulation scribble leeway bewitching exiguous yearn doodle loitering luxuriate in amiss pinnacle scrawl instigate devour assailant devour hazy stallion topple belittle admonition raucous verbiage fallacious mortified cinder vilify posthaste retract transfix 51 52 trepidation apanthropinization shirk gongoozler scoundrel kakistocracy precipice ergophobia aberrant snollygoster torporific abliguration logrolling wamblecropt atemporal grumbletonians cruciverbalist grufeling rapprochement apricate nostrum kickshaw mealy-mouthed slugabed hearth cockalorum fortitude lady-star ebullient fudgel uhtceare dysania perendinate <ul> <li>ardent - uxorious</li> <li>morass - predicament</li> <li>retch vomit gag</li> <li>screech - shriek</li> <li>sever - shear</li> <li>sling - chuck</li> <li>sotto voce - ant stentorian</li> <li>staunch - second</li> <li>tether - be at the end of your tether</li> <li>unbecoming</li> <li>unrequited</li> <li>solace</li> <li>strife</li> <li>transfigure</li> </ul>"},{"location":"English/Vocabulary/20.WordUsage/","title":"Word Usage","text":""},{"location":"English/Vocabulary/20.WordUsage/#word-of-the-day-idiosyncrasy","title":"Word of the Day: Idiosyncrasy","text":""},{"location":"English/Vocabulary/20.WordUsage/#where-or-whence","title":"Where or Whence","text":""},{"location":"English/Vocabulary/20.WordUsage/#elude-vs-allude-vs-illude","title":"Elude vs. Allude vs. Illude","text":""},{"location":"English/Vocabulary/20.WordUsage/#misfeasance-or-malfeasance","title":"Misfeasance or Malfeasance","text":""},{"location":"English/Vocabulary/20.WordUsage/#prevaricate-or-procrastinate","title":"Prevaricate or Procrastinate","text":""},{"location":"English/Vocabulary/20.WordUsage/#between-or-among","title":"Between or Among","text":""},{"location":"English/Vocabulary/20.WordUsage/#recommend-suggest","title":"recommend &amp; suggest","text":"<ul> <li>recommend you to do or recommend you do?</li> <li>suggest you for something or suggest you do?</li> </ul> <p>See ldoceonline: recommend,  stackexchange, ldoceonline: suggest.</p> <ul> <li>I recommend that you define those parameters beforehand my recommendation (to you) is that   those parameters should be defined beforehand.</li> <li>I recommend you to define those parameters beforehand my recommendation (to some other currently   unspecified person) is that you are the person best-suited to the task of defining those parameters beforehand.</li> </ul> <p>The verb recommend always takes either a noun object or a subordinate clause as a complement, never an infinitive.</p> <p>See The Subjunctive and  Should in that-clauses.</p>"},{"location":"English/Vocabulary/20.WordUsage/#work-or-job-1","title":"work or job \u2014 [1]","text":"<p>A job is a regular and official activity that you do, and receive money (a salary) for your activity. It is also called a profession or an occupation. You can have a full-time job (40 hours per week) or a part-time job (around 25 hours per week).</p> <p>To find a job, you can check the job listings online or in the newspaper. The process of trying to get a specific job \u2014 when you send your resume or CV to a company \u2014 is called applying for a job.</p> <p>Unlike work, job is a countable noun:</p> <ul> <li>Right after graduating from college, I worked two jobs so that I could pay off my student loans faster.</li> </ul> <p>The word work is more general than job \u2014 whereas job is a specific occupation/profession, work refers to general efforts and activities done to accomplish a goal. Work can be done both inside an official job and outside a job!</p> <ul> <li>You can say you work at / for (a company): \u201cI work at General Motors.\u201d</li> <li>You can say you\u2019re working on (a project / task): \u201cI\u2019m working on a market analysis\u201d or \u201cI\u2019m working on improving customer satisfaction.\u201d</li> </ul> <p>The word work also refers to the context of your place of employment:</p> <ul> <li>I start work at 7 AM.</li> <li>I finish / leave work at 4:30.</li> <li>We go to work by car.</li> <li>I went to the bar with some friends from work.</li> <li>I can\u2019t access Facebook when I\u2019m at work</li> </ul>"},{"location":"English/Vocabulary/20.WordUsage/#error-or-mistake-1","title":"error or mistake \u2014 [1]","text":"<p>There is some overlap in these terms, which both refer to a \u201cwrong\u201d action. But there are also significant differences in usage and connotation.</p> <p>A mistake, generally speaking, is a choice that turns out to be wrong. It could be something you decide to do on your own initiative that you later regret:</p> <ul> <li>You\u2019re making a mistake \u2014 you\u2019ll regret this!</li> <li>Coming here was a mistake \u2014 this trip has been a waste of my time.</li> </ul> <p>\u2026 or a misidentification or miscalculation where a wrong answer is produced:</p> <ul> <li>I thought it was her, but I was mistaken.</li> <li>That can\u2019t be his fingerprints, the computer must have made a mistake!</li> </ul> <p>A mistake is wrong because the outcome is found to be wrong. Mistakes are made when a free choice is made, and later called mistakes when they score badly in the context of the goal of determining a particular answer, or else they simply turn out to be bad choices in some later assessment.</p> <p>Errors, on the other hand, are made with reference to some ideal code, model, or set of rules that would have dictated a different action. The action was wrong because it was different from the \u201cright\u201d or normal one under the circumstances.</p> <p>In sports, particular rules violations are errors.  A mistake would be the coach or the referee making a poor strategic decision or a wrong call.</p>"},{"location":"English/Vocabulary/20.WordUsage/#bad-or-badly-1","title":"bad or badly \u2014 [1]","text":"<p>And other adverbs that can be flat (with -ly and without -ly, chaning meaning) \u2014 see the link above.</p>"},{"location":"English/Vocabulary/20.WordUsage/#happen-to-or-happen-with-1","title":"happen to or happen with \u2014 [1]","text":"<p>What happened to you means what affected you, what event had impact on you.</p> <ul> <li>A: You\u2019re really late. And you\u2019re limping. What happened to you?</li> <li>B: I fell on my way here and sprained my ankle. But, I wouldn\u2019t let that stop me from meeting you. I came anyway, late or not.</li> </ul> <p>What happened with you means what\u2019s going on with you, what\u2019s up with you.</p> <ul> <li>A: You were really ugly at the meeting today. What happened with you?</li> <li>B: Ugly? I guess I\u2019m just tired of having all the work dropped on me. One of these days, I\u2019m just going to quit.</li> </ul>"},{"location":"English/Vocabulary/20.WordUsage/#know-about-or-know-of-1-2","title":"know about or know of \u2014 [1], [2]","text":"<ul> <li>know of = heard of</li> <li>know about = know and understand a lot</li> </ul> <p>I would use the expression \u201cI know Smith\u201d if I have had personal experiences with the person.</p> <p>know about means that I have heard many things about this person, or have researched him (such as if I were to say \u201cI know about Einstein, he invented general relativity\u201d):</p> <ul> <li>I know about tensor calculus I have learned this subject and can do the calculations</li> </ul> <p>know of suggests that I have merely heard of this person in passing, or have a very limited knowledge of this person (such as if I were to say \u201cI know of Madame Curie\u201d, the emphasis being on the word of, and usually as a reply to someone asking \u201cHave you heard of Madame Curie?\u201d):</p> <ul> <li>I know of tensor calculus I have heard the name, but that is about all I know</li> </ul>"},{"location":"English/Vocabulary/20.WordUsage/#my-friend-or-a-friend-of-mine-1","title":"my friend or a friend of mine \u2014 [1]","text":"<ul> <li>my friend denotes some specific friend (the friend, my == the).</li> <li>Whereas, a friend of mine denotes some friend (one of).</li> </ul>"},{"location":"English/Vocabulary/20.WordUsage/#on-the-contrary-or-in-contrast-1","title":"on the contrary or in contrast \u2014 [1]","text":"<p>On the contrary is used to show that one idea/statement is wrong, whereas another one is right, according to speaker\u2019s point of view (speaker\u2019s point of view does exist):</p> <ul> <li>Some people think that capital punishment is a deterrent. On the contrary, it is no such thing,   as the experience of many countries has shown.</li> <li>Your friend tells you she is moving to New York and you express surprise because you thought she hated big   cities. She replies, \u201cOn the contrary, I\u2019ve always wanted to live in an urban area.\u201d</li> </ul> <p>In contrast is used to show differences between two ideas/statements. Speaker does not interpret one of them as wrong and another one as right (both of them could be true or false, it just does not matter):</p> <ul> <li>The music of Wagner and Mahler calls for large orchestras. In contrast, the music of a composer like   Mozart can be performed with a relatively small number of musicians.</li> <li>In New York, you don\u2019t need a car. In Los Angeles, in contrast, you can\u2019t really get along without   one, though you won\u2019t need a snow shovel.</li> </ul> <p>Here\u2019s a simple test: if you could possibly substitute that\u2019s wrong the phrase you want is on the contrary (or to the contrary). If not, then use in contrast.</p>"},{"location":"English/Vocabulary/20.WordUsage/#how-do-you-call-or-what-do-you-call-1","title":"how do you call or what do you call \u2014 [1]","text":"<p>It is not natural English to say \u201cHow do you call it?\u201d to mean \u201cWhat is the English word for that?\u201d The only situation I could imagine in which \u201chow do you call it?\u201d is correct is if you are asking for information about the correct manner of summoning (or \u201ccalling\u201d) something.</p> <ul> <li>How do you say/pronounce \u2018Extraordinary\u2019? Asking about a sound or a method of speech</li> <li>What do you call him? Asking about an object or person</li> </ul>"},{"location":"English/Vocabulary/20.WordUsage/#speak-in-english-or-speak-english-1","title":"speak in English or speak English \u2014 [1]","text":"<ul> <li>speak English refers to an ability.</li> <li>speak in English refers to a language choice.</li> </ul> <p>Examples:</p> <ul> <li>Do you speak English? Do you know English well enough to use it verbally?</li> <li>Could you speak in English? I'd like to request that you speak English instead of some other language.</li> </ul>"},{"location":"English/Vocabulary/20.WordUsage/#prepositions-1-2","title":"Prepositions \u2014 [1], [2]","text":"<ul> <li>She is afraid of speaking in public.</li> <li>Norma is anxious about making the presentation. (anxiety about + Ving)</li> <li>I am bored of doing the same old job.</li> <li>He is capable of winning a gold medal.</li> <li>Nancy was concerned about being late.</li> <li>Tim is content with winning second place.</li> <li>Fiona was disappointed with coming in third place.</li> <li>He was discouraged by not getting the job.</li> <li>The researcher was excited about going to Africa.</li> <li>That actor is famous for being extremely weird.</li> <li>She is fond of having picnics. (fondness for + Ving)</li> <li>She is frightened of being alone at night.</li> <li>The banker was guilty of stealing money.</li> <li>He was happy about winning the lottery.</li> <li>She is interested in becoming a doctor. (interest in + Ving)</li> <li>He was involved in making the movie.</li> <li>She was known for causing problems.</li> <li>He was proud of having completed the marathon.</li> <li>She is remembered for protecting mountain gorillas.</li> <li>He is responsible for causing the damage. (responsibility for + Ving)</li> <li>Tina is scared of being alone at night.</li> <li>The surfer is terrified of being attacked by a shark.</li> <li>She is tired from working all day.</li> <li>Margaret is tired of making dinner every night.</li> <li>The hikers were worried about not having enough water. </li> <li>He has the advantage of speaking English fluently.</li> <li>His belief in not harming animals was something he learned from his mother.</li> <li>She took credit for improving the filing system.</li> <li>The delay in processing the visa caused problems.</li> <li>The disadvantage of flying is that you can\u2019t see the scenery along the way.</li> <li>She has a great deal of experience in introducing new products to international markets.</li> <li>His fear of flying made travel difficult.</li> <li>His habit of smoking in restaurants caused many problems in California.</li> <li>Her knowledge of climbing helped her during the competition.</li> <li>His love of singing developed when he was a child.</li> <li>Their memories of traveling in Africa will stay with them forever.</li> <li>I think his preference for speaking his native language is natural.</li> <li>The criminal\u2019s regret for committing the crime did not convince the judge.</li> <li>The process of painting such a large mural is more complicated than you might think.</li> <li>The main reason for taking the course is to improve your language skills.</li> <li>The magazine\u2019s report on choosing the right car was not well researched.</li> <li>Her reputation for lying is well known.</li> <li>I don\u2019t know if I believe his story about seeing a UFO.</li> <li>His talent for learning languages was impressive.</li> <li>ask a favour of my parents</li> <li>work hard at</li> <li>He was totally focused on winning.</li> <li>get better at</li> <li>have the opportunity to do something</li> <li>practise something</li> <li>Bloggers pay attention to what is going on in the world.</li> <li>He is waiting for her girlfriend.</li> <li>She has a talent for finding a bargain.</li> <li>He has an aptitude for maths.</li> <li>The film picks up on the difficulties people experienced during the war.</li> <li>I am useless at ball sport.</li> <li>I am hopeless at geography.</li> <li>He is gifted at painting.</li> <li>We pay for the pizza.</li> <li>He is an expert in Italian art.</li> <li>He has a lot of ability as a dancer.</li> </ul>"},{"location":"English/Vocabulary/20.WordUsage/#to-as-preposition","title":"to as preposition:","text":"<ul> <li>I am looking forward to seeing you.</li> <li>I am used to waiting for buses.</li> <li>I am prone to leaving things until the last minute.</li> <li>After living in a house with a garden, it\u2019s hard to adapt to living in a flat.</li> <li>A quarter of all workers admit to taking time off when they are not ill.</li> <li>No one owned up to breaking the window.</li> <li>People become so desperate to make contact with beasts and fowl that they resort to going on nature trails.</li> <li>She didn\u2019t really take to studying English.</li> <li>When will you get around to mowing the grass?</li> <li>He is accustomed to having his own office. (addiction to + Ving)</li> <li>She is addicted to watching TV.</li> <li>She is committed to improving her English.</li> <li>The organization is dedicated to ending poverty. (dedication to + Ving)</li> <li>The money will be devoted to protecting the environment. (devotion to + Ving)</li> <li>They are opposed to building a new road in the park.</li> <li>His reaction to winning the prize was quite funny.</li> <li>I objected to having to rewrite the article.</li> <li>He confessed to having a secret admiration for his opponent.</li> <li>My parents had trouble adjusting to living in an apartment.</li> <li>He has clearly committed his government to continuing down the path of economic reform</li> </ul>"},{"location":"English/Vocabulary/30.PhrasesIdiomsCollacations/","title":"Phrases, Idioms &amp; Collacations","text":""},{"location":"English/Vocabulary/30.PhrasesIdiomsCollacations/#were-in-the-pink","title":"We\u2019re in the Pink","text":"<p>Scots speakers use pink to mean a small gleam of light, as in the expression the pink of the evening i.e., late afternoon, early evening.</p> <p>As a verb, pink has been in English since 1307 with the sense of pierce, stab, make holes in. It\u2019s from this verb that pinking shears get their name.</p> <p>Thackeray, uses the expression in the very pink of the mode to mean at the very height of fashion. Charles Dickens called an Italian town he\u2019d visited the very pink of hideousness and squalid misery.</p>"},{"location":"English/Vocabulary/30.PhrasesIdiomsCollacations/#i-got-the-blues","title":"I Got the Blues","text":"<p>Obscene language is said to be blue, yet blue laws are those that forbid activities considered irreligious to take place on Sunday. A common blue law in the United States forbids the sale of liquor on Sundays.</p> <p>A blue mood is a sad mood. To have the blues is to be sad.</p> <p>People who talk so much that others can hardly get a word in edgewise are said to talk a blue streak. (One can also \u201ccuss a blue streak).</p> <p>A blue blood is a person of aristocratic lineage.</p> <p>To say that something happens in a blue moon is to say that it rarely happens.</p>"},{"location":"English/Vocabulary/30.PhrasesIdiomsCollacations/#will-o-the-wisp","title":"Will o\u2019 the Wisp","text":"<p>Something that misleads or deludes; an illusion:</p> <ul> <li>\u201cGlobal warming: Chasing a \u201cWill o\u2019 the Wisp\u201d while ignoring a real monster in the sky\u201d.</li> </ul>"},{"location":"English/Vocabulary/30.PhrasesIdiomsCollacations/#idioms-phrases","title":"Idioms &amp; Phrases","text":"1 2 3 4 early doors treading on eggshells close shave nobody can hold a candle to bottle and bottler the boot\u2019s on the other foot red tape I\u2019ve got egg all over my face the special relationship beat around the bush barrel of laughs to go against the grain in the nick of time go the extra mile do not give up the day job on the house jump the gun pie in the sky It is a steal! on target playing up off the back of a lorry across the pond on the dot head over heels until the cows come home down the pan to give someone the benefit of the doubt sinking feeling beat the drum I am game to get out of hand all the trimmings everything but the kitchen sink in good nick to get something out of your system paint the town red have a lot on my plate there is method to my madness to get your act together call it a day look like the back end of a bus make a monkey out of me to hang in there a spanner in the works proof is in the pudding test the water let someone off the hook no strings attached eat humble pie six of one, half a dozen of other no pain, no gain catch your eye take to the cleaners a recipe for disaster pull yourself together put your money where your mouth is give the cold shoulder You are pulling my leg! go to great lengths go to town plain sailing clean up your act something has to give the writing is on the wall the skin of your teeth the last straw / final straw on a more even keel take (something) on board finding your feet close, but not cigar break the mould see red a finger in every pie have an axe to grind nothing ventured, nothing gained a leopard can\u2019t change its spots throw the book at somebody it takes two to tango cut and dried It\u2019s doing my head in! my mind has gone blank wash your dirty linen in public live on borrowed time straight from the horse\u2019s mouth things are looking up at the drop of a hat to have an axe to grind What\u2019s his face? drop dead gorgeous knock her socks off. have a ball hit the ground running he was ready to jump ship cut to the chase know your onions they were apples and oranges out o the picture be on the ball he got the short end of the stick Why the long face? keep a lid on it her bark was worse than her bite go bananas put a sock in it was run of the mill bits and bobs done and dusted he should have hitched his horse to a different wagon use your loaf go around the houses to get all of her ducks in a row take a rain check sleep on it keep his nose to the grindstone"},{"location":"English/Vocabulary/30.PhrasesIdiomsCollacations/#dating","title":"Dating","text":"<ul> <li>We are in an open relationship.</li> <li>She has taken.</li> <li>We hooked up.</li> <li>We are on a break.</li> <li>She is sleeping around.</li> <li>We are seeing each other.</li> </ul>"},{"location":"English/Vocabulary/30.PhrasesIdiomsCollacations/#30-british-phrases-that-always-confuse-americans","title":"30 British Phrases That Always Confuse Americans","text":"<ul> <li>A right bodge job \u2014 refers to something someone has done poorly.</li> <li>Getting pissed \u2014 getting drunk</li> <li>I\u2019ll give you a bell \u2014 call someone on the phone later</li> <li>Horses for courses \u2014 different people like or are made for different things</li> <li>Totally chuffed \u2014 pleased or thrilled</li> <li>Having a chinwag \u2014 having a chat or a talk</li> <li>That\u2019s pants \u2014 when something is nonsense</li> <li>Cashpoint \u2014 ATM</li> <li>Like chalk and cheese \u2014 two people or things are fundamentally different or incompatible</li> <li>Pop your clogs \u2014 to die</li> <li>Spanner in the works \u2014 someone or something messed up the plan</li> <li>Pull a blinder \u2014 to do something skillfully or give an excellent performance</li> <li>Spend a penny \u2014 you need to use the bathroom</li> <li>They\u2019re such a chav \u2014 informal (and somewhat derogatory) saying refers to someone who is brash, low-class, or cheap</li> <li>It\u2019s a real dog\u2019s breakfast \u2014 a mess</li> <li>He waffled on \u2014 speak or write in a long, vague, or trivial manner</li> <li>Taking the mickey \u2014 to make fun or someone or something</li> <li>She wants to splash out on a \u2026 \u2014 spending lots of money on a luxury item</li> <li>Sod\u2019s Law \u2014 back luck or misfortune. It\u2019s the British version of Murphy\u2019s Law.</li> <li>You\u2019re full of beans \u2014 to be in high spirits</li> <li>Have a kip \u2014 British people use \u201ckip\u201d instead of nap</li> <li>Give me a tinkle on the blower \u2014 This phrase refers to calling someone</li> <li>Fancy dress \u2014 costume</li> <li>Bob\u2019s your uncle \u2014 when everything is alright, or you\u2019re all set</li> <li>Bog-standard \u2014 the bare minimum or ordinary</li> <li>Chinese whispers \u2014 there are untrue rumors circulating a group</li> <li>This is a doddle \u2014 A \u201cdoddle\u201d is a simple task</li> </ul>"},{"location":"English/Vocabulary/30.PhrasesIdiomsCollacations/#phrasal-verbs-and-collocations","title":"Phrasal Verbs and Collocations","text":""},{"location":"English/Vocabulary/30.PhrasesIdiomsCollacations/#cause-effect-collocations","title":"Cause &amp; Effect collocations","text":"<ul> <li>The government\u2019s policy produced the results.</li> <li>The election provoked an outcry.</li> <li>The blizzard wreaked havoc.</li> <li>The strike spelled disaster.</li> <li>The Prime Minister\u2019s behaviour prompted speculation.</li> <li>The boss\u2019 favouritism bred resentment.</li> </ul>"},{"location":"English/Vocabulary/30.PhrasesIdiomsCollacations/#verb-oneself-adjective-eat-yourself-skinny","title":"verb oneself adjective: eat yourself skinny","text":"<ul> <li>eat yourself skinny (eat until you become skinny)</li> <li>sleep yourself to death (sleep until you die)</li> <li>run yourself thin (run until you become thin)</li> <li>laugh yourself silly</li> <li>run yourself ragged</li> <li>eat yourself fat</li> <li>study yourself smart</li> </ul> <p>You also can use different from yourself reflective pronouns:</p> <ul> <li>she laughed herself silly</li> <li>he ran himself ragged</li> <li>They ate themselves fat</li> </ul>"},{"location":"English/Vocabulary/30.PhrasesIdiomsCollacations/#expressions-with-verb-to-sit","title":"Expressions with verb to sit","text":"<ul> <li>to sit around means to spend time doing very little: They just sit around and do nothing all day. We sat around in the hotel until it stopped raining.</li> <li>to sit back means to wait for something to happen while deliberately not being involved: She just sat back and waited for us to do everything. You can\u2019t just sit back and expect me to do everything.</li> <li>to sit down means to lower your body into a sitting position: We looked for somewhere to sit down. She sat down beside me on the sofa and started talking.</li> <li>to sit in on something means to be present during a meeting or event but not participate: He asked me to sit in on the discussion and report back to him. When I was new to the department, I sat in on meetings to learn the procedures.</li> <li>to sit on a committee or panel means to be a member: As the representative of the personnel, I sat on the board of directors. He sat on many committees dealing with education.</li> <li>to sit out means to be outside rather than inside: While the weather was good, we sat out and had lunch. We went to the pub and sat out at the tables in the garden.</li> <li>to sit out something means to wait for it to finish: His injury meant that he had to sit out the rest of the competition. When it started raining, we decided to sit out the storm in the caf\u00e9.</li> <li>to sit over someone is to watch them very carefully to check up on them: I sat over him and made sure he took his medicine. She sat over me until I had finished everything.</li> <li>to sit through means to remain until something is finished, especially if it is unpleasant: They sat through a very long meeting. We had to sit through a very boring lecture before we could go for a drink.</li> <li>to sit up means to not go to bed until it very late: I sat up and waited for him to come home. She sat up all night to finish her project before the deadline.</li> </ul>"},{"location":"English/Vocabulary/30.PhrasesIdiomsCollacations/#expressions-with-verb-to-stand","title":"Expressions with verb to stand","text":"<ul> <li>to stand around mean to stand in a place doing very little or waiting for something: We just stood around for half an hour waiting for the concert to begin. Lots of teenagers just stand around on street corners because they have nothing to do.</li> <li>to stand aside means to move to a position where you do not block others: I told everyone to stand aside to let them pass. Everyone stood aside to let the rescue workers pass.</li> <li>to stand back means to move a short distance away from something: Please stand back from the objects. You must not touch them. You can see the paintings better if you stand back a little.</li> <li>to stand back also means to take a bit of distance from a problem in order to understand it: It\u2019s difficult to stand back and be objective when you are talking about your children. We need to stand back and think about this.</li> <li>to stand by means to be waiting and ready for something: Riot Police were standing by in case the demonstration got out of hand. Ambulance teams were standing by in case any of the participants got into difficulties.</li> <li>to stand by also means to continue to support someone or something: We stand by our decision in spite of the opposition to it. His wife stood by him through the scandal.</li> <li>to stand down mean to leave or resign from an important position: The Prime Minister stood down after the defeat in the elections. Even though he still had the support of the shareholders, he decided to stand down.</li> <li>to stand for means is an abbreviation for: BBC stands for British Broadcasting Corporation. What does PGCE stand for?</li> <li>to stand for can mean to support or represent an idea or attitude: I agree with everything that Greenpeace stand for. The Conservative Party stands for family values.</li> <li>to stand for also means to accept someone\u2019s behavior without complaining: I don\u2019t see why I should stand for his bad behaviour. I don\u2019t know how she stands for it. He\u2019s impossible to live with.</li> <li>to stand in means to replace or represent someone for a short time: I\u2019ll ask one of my colleagues to stand in while I\u2019m away. Another actor stood in for him while he was ill.</li> <li>to stand out means to be much better than similar things or people: One person stands out from all the candidates that we have met. There is one solution that stands out clearly as the best. </li> <li>to stand out also means to be noticeable because they are very different from others: With her height and red hair, she always stands out in a crowd. Children never want to stand out but to be just like everyone else.</li> <li>to stand over means to supervise closely, watch what someone is doing: She stood over me while I did the work just to be sure that I had done it properly. I had to stand over my children otherwise they didn\u2019t do their homework.</li> <li>to stand round means to spend time standing, waiting for someone or something or doing nothing: They just stood round and watched. They didn\u2019t help. We stood round in the cold for half an hour waiting for them to arrive.</li> <li>to stand up means to rise into a standing position: At school, we had to stand up whenever a teacher entered the room. When she came in the room, everyone stood up to greet her.</li> <li>to stand someone up means to fail to meet them on purpose, usually for a romantic date: He didn\u2019t come. He stood me up! I waited in the restaurant for an hour before I realised I\u2019d been stood up.</li> <li>to stand up for something means to defend it because you believe in it: You have to stand up for what you believe in. You have to stand up for yourself, no one else will.</li> <li>to stand up to means to not give in to someone in a powerful position, to argue your case: He was never afraid to stand up to his father even when he was very small. The management is too weak to stand up to the union and their demands.</li> </ul>"},{"location":"English/Vocabulary/30.PhrasesIdiomsCollacations/#expressions-with-verb-to-cut","title":"Expressions with verb to cut","text":"<ul> <li>to cut across means to take a shortcut over an area instead of going around the edge: It\u2019ll be quicker to cut across the field. She quickly cut across the car park to where he was standing.</li> <li>to cut back means to reduce the amount of money being spent: The government has cut back on education with less teachers. I\u2019ve had to cut back on my spending as I\u2019m not making any money at the moment.</li> <li>to cut down means to remove a tree or plant by cutting it near the base: To make bigger fields, the farmer has cut down a lot of the hedges. We cut down the old tree in the garden as it blocked all the light.</li> <li>to cut down also means to reduce the number or quantity of something: The article was too long and so I had to cut it down to fit the space. I have cut down the number of hours I work to only thirty a week now.</li> <li>to cut in \u2014 to interrupt someone when they are speaking: I was trying to explain it when she cut in and started talking. He really annoys me. He\u2019s always cutting in and never lets me speak.</li> <li>to cut off \u2014 to stop supplies of something like electricity or water: They didn\u2019t pay the bills and the electricity was cut off. The water was cut off while they repaired the leaking pipes.</li> <li>to cut off can also mean to stop a telephone connection: I\u2019ll ring him back. We got cut off in the middle of the conversation. I\u2019m sorry but I pressed the wrong button and cut you off.</li> <li>to cut out \u2014 when an engine or piece of machinery suddenly stops working: There\u2019s a problem with my car. The engine keeps cutting out. When I stopped at the lights, the engine cut out.</li> <li>to cut through difficulty means to be able to deal with the problems or bureaucracy quickly: To get the permits in time, we had to find a way to cut through all the bureaucracy. She can cut through the complex legal language and get to the point.</li> <li>to cut up \u2014 to divide something into smaller pieces: It was too big to go into the bin so I cut it up. At the end, there was a cake left so we cut it up and each took a piece home.</li> </ul>"},{"location":"English/Vocabulary/30.PhrasesIdiomsCollacations/#other-collocations","title":"Other Collocations","text":"<ul> <li>Directions: Why do not we retrace our steps and go back\u2026</li> <li>lifestyle fad</li> <li>well off</li> <li>It has been a shock to the system.</li> <li>\u2026 when their story of a two-month job in New York resulted in friends promising to visit them.</li> <li>\u2026 talk their way into the flat\u2026</li> <li>As is true of many of his stories, there is an autobiographical element, with the life of the main character\u2026</li> <li>Millions of women looked up to her as a role model.</li> <li>I think you should give it a go.</li> <li>fall for</li> <li>be taken in by</li> <li>be taken aback \u2014 to be very surprised about something</li> <li>caught off guard \u2014 to surprise someone by happening when they are not expecting something or prepared for it</li> <li>\u201cDo you have the time?\u201d \u2014 would be used to ask what time it is currently. \u201cDo you have time?\u201d \u2014 would be used to ask if the person has time in their schedule.</li> <li>I am from a famous family and it is not easy to live up to my name.</li> <li>He used to be a household name but he is not famous anymore.</li> <li>I put my name forward for class president.</li> <li>He was a king in name only.</li> <li>My grandmother has the same routine every day. She is very set in her ways.</li> <li>He is a whizzkid when it comes to computers.</li> <li>If i had known that statistic when I was learning the ropes, I would be selling insurance today.</li> <li>He found the portraits of the boys on the beach evocative of his childhood holidays.</li> <li>Every once in a while there will be a book that makes you \u2026, Every so often I would splurge on a box of the newfangled, expensive, disposable kind.</li> <li>Cultural identities are in danger of being lost.</li> <li>I would hazard a guess that it is \u2026</li> <li>She swore she would never set foot in his house again.</li> <li>I would like to set the record straight on a few points.</li> <li>The powers that-be don\u2019t want the media to get hold of the story.</li> <li>The police were catching the same kids stealing time and time again.</li> </ul>"},{"location":"English/Vocabulary/40.CommonWordsUncommonMeaning/","title":"Common words with uncommon meaning","text":"like the like of somebody, and the like. might power. to that end purpose, in order to do it, longman. ills to defeat the ills brought about by\u2026 long to want, longman fashion to shape or make something, using your hands or only a few tools: Children my own age didn\u2019t fashion complicated attacks. compound exacerbate, deteriorate to make a difficult situation worse by adding more problems? frequent to go to a particular place often. spare lean someone who is spare is tall and thin, a spare style of writing, painting etc is plain or basic and uses nothing unnecessary. second support, countenance formally support a suggestion made by another person in a meeting. flat directly and definitely: flat refusal, longman. flag to become tired or weak. see tired. longman. rally to become stronger again after a period of weakness or defeat, convalescent. longman. smart as a verb pain, hurts: She was still smarting from the insult. My eyes were smarting with the smoke. longman. but only: This is but one example of what can happen when things go badly wrong. It\u2019s going to be difficult. Anyway, we can but try. longman. part written to separate from someone, or end a relationship with them. longman. features visage a part of someone\u2019s face, such as their eyes, nose etc. countenance, visage. longman. scores of something a lot of people or things. longman. bid somebody good afternoon to greet someone. longman. minute/minutiae paying careful attention to the smallest details SYN (see) meticulous. longman. furnish to supply or provide something. longman. while away the hours/evening/days to spend time in a pleasant and lazy way. longman. faculty for a particular skill that someone has SYN talent. longman. have/make common cause (with/against somebody) to join with other people or groups in order to oppose an enemy. longman. cause / cause of an aim, belief, or organization that a group of people support or fight for: My father fought for the Nationalist cause. longman. hopeful as a noun <p>someone who is hoping to be successful, especially in acting, sports, politics etc: Thousands of young hopefuls were auditioned for the role.</p> <p>longman.</p> level criticism/charges/accusations etc at/against somebody to aim criticism etc at a particular person, country etc, especially publicly. longman. implement a tool, especially one used for outdoor physical work. longman. replace to put something back where it was before: He replaced the book on the shelf. longman. pain it pains somebody to do something \u2014 used to say that it is very difficult and upsetting for someone to have to do something. longman. tell / teller <p>someone who counts votes. The original sense of tell is retained in the word teller:</p> <ul> <li>One who counts or keeps tally; now esp. one who counts money; spec. an officer in a bank who receives or pays money over the counter. longman.</li> </ul> exact to demand and get something from someone by using threats, force etc. exact something from somebody: \u201cI exacted a promise from Ros that she wouldn\u2019t say a word\u201d. exact revenge (on somebody). longman. grave gravity. loose to make something unpleasant begin: \u201cAnd now the anger Maggie had feared was loosed\u201d. longman. eye to look at someone or something carefully, especially because you do not trust them or because you want something: \u201cThe man behind the desk eyed us suspiciously\u201d. longman. intent giving careful attention to something so that you think about nothing else: \u201chis intent gaze\u201d, intent on/upon. longman."},{"location":"English/Vocabulary/41.ReplacementForVery/","title":"Replacement for very","text":"<ul> <li>very bright  dazzling</li> <li>very capable  accomplished</li> <li>very clever  brilliant</li> <li>very cold  freezing</li> <li>very conventional  conservative</li> <li>very dirty  squalid</li> <li>very dry  parched</li> <li>very eager  keen</li> <li>very fierce  ferocious</li> <li>very good  superb</li> <li>very hot  scalding</li> <li>very hungry  ravenous, voracious, insatiable</li> <li>very large  immense</li> <li>very old  ancient</li> <li>very quiet  silent</li> <li>very roomy  spacious</li> <li>very rude  vulgar</li> <li>very serious  solemn</li> <li>very small  tiny, minuscule</li> <li>very strong  unyielding</li> <li>very stupid  idiotic</li> <li>very valuable  precious</li> <li>very weak  feeble</li> <li>very wet  soaked</li> <li>very wicked  villainous</li> <li>very worried  anxious</li> <li>very loud  deafening</li> </ul>"},{"location":"English/Vocabulary/42.UAndNonU/","title":"U and Non-U","text":"<ul> <li>Perfume  Scent</li> <li>Sick (in bed)  Ill (in bed)</li> <li>I was ill on the boat  I was sick on the boat</li> <li>Jacket  Coat</li> <li>Mirror  Looking-glass</li> <li>Cemetery  Graveyard</li> <li>Glasses  Spectacles</li> <li>Settee or couch  Sofa</li> <li>Toilet  Lavatory or loo</li> <li>Wealthy  Rich</li> <li>Dinner (for midday meal)  Lunch, luncheon</li> <li>Tea (for evening meal) Dinner</li> <li>Lounge  Drawing-room</li> <li>Pleased to meet you  How d\u2019you do?</li> <li>Teacher  (School)master, mistress</li> <li>very  jolly</li> <li>man  chap</li> <li>Cycle  Bike or bicycle</li> <li>Dress suit  Dinner jacket</li> <li>Greens  Vegetables</li> <li>Ice cream  Ice</li> <li>They have (got) a lovely home.  They\u2019ve a very nice house.</li> <li>Dentures  False teeth</li> <li>Pass on  Die</li> <li>Preserve  Jam</li> <li>Serviette  Napkin</li> <li>Pardon?  What?</li> <li>Cheers  Good health</li> <li>Sweet  Pudding</li> </ul>"},{"location":"English/Vocabulary/43.CollectiveNouns/","title":"Collective Nouns","text":"<p>Some of them (the see the link above for the full list):</p> <ul> <li>A murder of crows</li> <li>a crash of rhinos</li> <li>a pack of coyotes</li> <li>a business of ferrets</li> <li>a school of fish</li> <li>a wilderness of monkeys</li> <li>a parliament of owls</li> <li>a bed of oysters</li> <li>a pandemonium of parrots</li> <li>an unkindness of ravens</li> <li>a escargatoire of snails</li> <li>a spring of teal</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/","title":"Reporting Verbs \u2014 [1], [2]","text":""},{"location":"English/Vocabulary/44.ReportingVerbs/#advice","title":"advice","text":"<ul> <li>advises</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#agreement","title":"agreement","text":""},{"location":"English/Vocabulary/44.ReportingVerbs/#weaker-position","title":"Weaker position","text":"<ul> <li>admits</li> <li>concedes</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#neutral-position","title":"Neutral position","text":"<ul> <li>accepts</li> <li>acknowledges</li> <li>agrees</li> <li>concurs</li> <li>confirms</li> <li>recognises</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#stronger-position","title":"Stronger position","text":"<ul> <li>applauds</li> <li>congratulates</li> <li>extols</li> <li>praises</li> <li>supports </li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#argument-and-persuasion","title":"argument and persuasion","text":""},{"location":"English/Vocabulary/44.ReportingVerbs/#weaker-position_1","title":"Weaker position:","text":"<ul> <li>apologises</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#neutral-position_1","title":"Neutral position:","text":"<ul> <li>assures</li> <li>encourages</li> <li>interprets</li> <li>justifies</li> <li>reasons</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#stronger-position_1","title":"Stronger position:","text":"<ul> <li>alerts</li> <li>argues - row - bicker</li> <li>boasts</li> <li>contends</li> <li>convinces</li> <li>emphasises</li> <li>exhorts</li> <li>forbids</li> <li>insists</li> <li>proves</li> <li>promises</li> <li>persuades</li> <li>threatens</li> <li>warns</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#believing","title":"believing","text":""},{"location":"English/Vocabulary/44.ReportingVerbs/#weaker-position_2","title":"Weaker position:","text":"<ul> <li>guesses</li> <li>hopes</li> <li>imagines</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#neutral-position_2","title":"Neutral position:","text":"<ul> <li>believes</li> <li>claims</li> <li>declares</li> <li>expresses</li> <li>feels</li> <li>holds</li> <li>knows</li> <li>maintains</li> <li>professes</li> <li>subscribes to</li> <li>thinks see think</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#stronger-position_2","title":"Stronger position:","text":"<ul> <li>asserts</li> <li>guarantees</li> <li>insists</li> <li>upholds</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#disagreement-and-questioning","title":"disagreement and questioning","text":""},{"location":"English/Vocabulary/44.ReportingVerbs/#weaker-position_3","title":"Weaker position:","text":"<ul> <li>doubts</li> <li>questions</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#neutral-position_3","title":"Neutral position:","text":"<ul> <li>challenges</li> <li>debates</li> <li>disagrees</li> <li>questions</li> <li>requests</li> <li>wonders</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#stronger-position_3","title":"Stronger position:","text":"<ul> <li>accuses</li> <li>attacks</li> <li>complains</li> <li>contradicts</li> <li>criticises</li> <li>denies</li> <li>discards</li> <li>disclaims</li> <li>discounts</li> <li>dismisses</li> <li>disputes</li> <li>disregards</li> <li>negates</li> <li>objects to</li> <li>opposes</li> <li>see refute</li> <li>confound</li> <li>rejects</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#suggestion","title":"suggestion","text":""},{"location":"English/Vocabulary/44.ReportingVerbs/#weaker-position_4","title":"Weaker position:","text":"<ul> <li>alleges</li> <li>intimates</li> <li>speculates</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#neutral-position_4","title":"Neutral position:","text":"<ul> <li>advises</li> <li>advocates</li> <li>hypothesises</li> <li>posits</li> <li>postulates</li> <li>proposes</li> <li>suggests</li> <li>theorises </li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#stronger-position_4","title":"Stronger position:","text":"<ul> <li>asserts</li> <li>recommends</li> <li>urges</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#conclusion","title":"conclusion","text":"<ul> <li>concludes</li> <li>discovers</li> <li>finds</li> <li>infers</li> <li>realises</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#explanation","title":"explanation","text":"<ul> <li>articulates</li> <li>clarifies</li> <li>explains</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#addition","title":"addition","text":"<ul> <li>adds</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#presentation","title":"presentation","text":""},{"location":"English/Vocabulary/44.ReportingVerbs/#weaker-position_5","title":"Weaker position:","text":"<ul> <li>confuses</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#neutral-position_5","title":"Neutral position:","text":"<ul> <li>comments</li> <li>defines</li> <li>describes</li> <li>estimates</li> <li>forgets</li> <li>identifies</li> <li>illustrates</li> <li>implies</li> <li>informs</li> <li>instructs</li> <li>lists</li> <li>mentions</li> <li>notes</li> <li>observes</li> <li>outlines</li> <li>points out</li> <li>presents</li> <li>remarks</li> <li>reminds</li> <li>reports</li> <li>restates</li> <li>reveals</li> <li>shows</li> <li>states</li> <li>studies</li> <li>tells</li> <li>uses</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#stronger-position_5","title":"Stronger position:","text":"<ul> <li>announces</li> <li>promises</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#evaluation-and-examination","title":"evaluation and examination","text":""},{"location":"English/Vocabulary/44.ReportingVerbs/#neutral-position_6","title":"Neutral position:","text":"<ul> <li>analyses</li> <li>appraises</li> <li>assesses</li> <li>compares</li> <li>considers</li> <li>contrasts</li> <li>critiques</li> <li>evaluates</li> <li>examines</li> <li>investigates</li> <li>understands</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#stronger-position_6","title":"Stronger position:","text":"<ul> <li>blames</li> <li>complains</li> <li>ignores</li> <li>scrutinises</li> <li>warns</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#discussion","title":"discussion","text":""},{"location":"English/Vocabulary/44.ReportingVerbs/#weaker-position_6","title":"Weaker position:","text":"<ul> <li>comment</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#neutral-position_7","title":"Neutral position:","text":"<ul> <li>discusses</li> <li>explores</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#stronger-position_7","title":"Stronger position:","text":"<ul> <li>reasons</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#emphasis","title":"emphasis","text":"<ul> <li>accentuates</li> <li>emphasises</li> <li>highlights</li> <li>stresses</li> <li>underscores</li> <li>warns</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#other-ways-of-talking","title":"Other ways of talking","text":""},{"location":"English/Vocabulary/44.ReportingVerbs/#other","title":"other","text":"<ul> <li>answer</li> <li>fear</li> <li>repeat</li> <li>reply</li> <li>swear</li> <li>beg - beseech - lickspittle - fawn - groveling - blarney - truckle - obsequiously - plead - supplication - implore - ingratiate - adulation - tug/touch your forelock - carny</li> <li>demand</li> <li>prefer</li> <li>decide</li> <li>narrate</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#anger","title":"Anger","text":"<ul> <li>Bellowed</li> <li>Snapped</li> <li>Cautioned</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#affection","title":"Affection","text":"<ul> <li>Consoled</li> <li>Comforted</li> <li>Soothed</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#excitement","title":"Excitement","text":"<ul> <li>Babbled</li> <li>Gushed</li> <li>Exclaimed</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#fear","title":"Fear","text":"<ul> <li>Stammered</li> <li>Gasped</li> <li>Screamed</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#determination","title":"Determination","text":"<ul> <li>Declared</li> <li>Insisted</li> <li>Commanded</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#happiness","title":"Happiness","text":"<ul> <li>Sighed</li> <li>Gushed</li> <li>Laughed</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#conflict","title":"Conflict","text":"<ul> <li>Sneered</li> <li>Scolded</li> <li>Glowered</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#amusement","title":"Amusement","text":"<ul> <li>Teased</li> <li>Chortled</li> <li>Guffawed</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#storytelling","title":"Storytelling","text":"<ul> <li>Recalled</li> <li>Resumed</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#other_1","title":"Other","text":"<ul> <li>Indoctrinate - didactic - edifying - sententious - preaching - give a piece of my mind</li> <li>grunt</li> <li>inveigh - vituperation - fulminate - diatribe - blasphemy - pejorative - obscenity - castigate - objurgate - berate - scold - upbraid - reproach - vilify</li> <li>Ant: puffery - encomium - rave reviews - rave - carol - belaud - praise - see ingratiate</li> <li>expostulate - coax - persuade - wrangle</li> <li>harangue</li> <li>drawl</li> <li>pertinent</li> <li>Interject</li> <li>eloquent - silver-tongued</li> <li>brachylogy</li> <li>verbiage - logomachy</li> <li>titter</li> <li>bicker</li> <li>malapropism</li> <li>pretext - ostensibly - allegedly</li> <li>derision</li> <li>vitriolic - caustic - mordant - acerbic - quip - demur - retort - snappish. banter - derisively - quip - jest - kidding - droll on - see funny - jocular - jesting</li> <li>Question - demur: I agreed without demur.</li> <li>deject</li> <li>adduce (see explain)</li> <li>pliable - malleable - lithe</li> <li>disparage</li> <li>question - impugn</li> <li>candidly - forthright</li> <li>profess</li> <li>susurration - murmuration - mussitation - muttering - mumbling</li> <li>ululate</li> <li>paralogize - ultracrepidarian - kibitzer - bloviate - bandy about/around</li> <li>see lie</li> <li>See Describe</li> <li>see bid </li> <li>twaddle</li> <li>gruffly</li> <li>brusque</li> <li>disquisition - report</li> <li>wail</li> <li>admonish - injunction - premonition - reprimand</li> <li>purportedly - presumably - supposedly</li> <li>hoot</li> <li>prattle away</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#phrases","title":"Phrases:","text":"<ul> <li>could not get a word in edge-ways</li> <li>talk at cross purposes</li> <li>needs a good talking to</li> <li>talking shop</li> <li>run that by me one more time</li> <li>could not make head or tail of ....</li> <li>get the wrong end of stick</li> </ul>"},{"location":"English/Vocabulary/44.ReportingVerbs/#saytell","title":"Say/Tell","text":"<p>inform, notify, advise, relate, recount, narrate, explain, reveal, disclose,  declare, command, order, bid, enlighten, instruct, insist, teach, train, direct, issue, remark, converse, speak, affirm, suppose, utter, negate, express, verbalize, voice, articulate, pronounce, deliver, convey, impart, assert, state, allege, mutter, mumble, whisper, sigh, exclaim, yell, sing, yelp, snarl, hiss, grunt, snort, roar, bellow, thunder, boom, scream, shriek, screech, squawk, whine, philosophize, stammer, stutter, lisp, drawl, jabber, protest, announce, swear, vow, content, assure, deny, dispute Tell - disclose, reveal, show, expose, uncover, relate, narrate, inform, advise, explain, divulge, declare, command, order, bid, repeat, squabble</p>"},{"location":"English/Vocabulary/45.WaysOfMoving/","title":"Ways of Moving \u2014 [1], [2], [3]","text":"1 2 3 4 5 somnambulate (1.0e-7) paddle (2213e-7) ramble (375e-7) march (11866e-7) dart (1234e-7) frogmarch (1.3e-7) stalk (2288e-7) - dog swagger (388e-7) slide (13612e-7) sneak (2007e-7) divagate (2.1e-7) lumber (4205e-7) stagger (570e-7) scramble (161e-7) stump (2126e-7) mooch (30e-7) slip (14075e-7) meander (580e-7) lope (195e-7) crawl (3139e-7) skulk (56e-7) pace (17211e-7) lurch (619e-7) trip over (242e-7) hike (3462e-7) careen (86e-7) trip (34470e-7) tiptoe (620e-7) scurry (317e-7) dash (3560e-7) waddle (115e-7) walk (50635e-7) strut (911e-7) scuttle (324e-7) creep (4357e-7) prance (120e-7) edge (53431e-7) stumble (1520e-7) hop (337e-7) parade (5719e-7) saunter (165e-7) lollop (2e-7) roam (1636e-7) prowl (391e-7) pad (6411e-7) amble (170e-7) sashay (34e-7) stroll (2245e-7) lunge (487e-7) shamble hobble (220e-7) toddle (60e-7) limp (2593e-7) sprint (634e-7) skip (4044e-7) falter (638e-7) scamper (152e-7) stride (2602e-7) jog (900e-7) tear (9462e-7) trek (1790e-7) plod (164e-7) - trudge - wade wander (4163e-7) shuffle (1116e-7) rush (11808e-7) Go <p>recede, depart, disappear, move, travel, proceed</p> Come <p>approach, advance, near, arrive, reach, head, tramp, waif</p> Run <p>race, speed, hurry, hasten, sprint, rush, escape, extricate, elope, flee</p> Move <p>creep, crawl, inch, poke, drag, toddle, trot, dawdle, walk, traipse, mosey, jog, plug, trudge, slump, lumber, trail, lag, run, sprint, trip, bound, hotfoot, high-tail, streak, stride, tear, breeze, whisk, rush, dart, bolt, fling, scurry, skedaddle, scoot, scuttle, scramble, race, chase, hasten, hurry, hump, gallop, lope, accelerate, stir, budge, travel, wander, roam, journey, trek, ride, spin, slip, glide, slide, slither, coast, flow, sail, saunter, amble, stagger, paddle, slouch, prance, straggle, meander, perambulate, waddle, wobble, pace, swagger, promenade, lunge</p> <p>Other</p> <ul> <li>roaming - loitering - itinerant - nomadic - peripatetic - castaways - persecution</li> <li>footfall</li> <li>skitter</li> <li>ramble</li> <li>totter</li> <li>toil</li> <li>(at) full pelt</li> </ul>"},{"location":"English/Vocabulary/46.RelatedWords/","title":"Related Words","text":""},{"location":"English/Vocabulary/46.RelatedWords/#the-common-people","title":"The Common People","text":"<p>Bourgeoisie, Great unwashed, Hoi polloi, Little people, Mob, Peons, Plebeians, Proles, Rank and file, Riffraff</p>"},{"location":"English/Vocabulary/46.RelatedWords/#numskulls-nincompoops","title":"Numskulls &amp; Nincompoops","text":"<p>cretin, wit, half-wit, nitwit, twit, ninny, noodle, numskull, nincompoop, simpleton, dunce, gonzo, dumbass </p>"},{"location":"English/Vocabulary/46.RelatedWords/#forms-of-ridicule","title":"Forms of Ridicule","text":"<p>satire, parody. Informal: spoof, take-off, send-up, caricature, lampoon, burlesque</p>"},{"location":"English/Vocabulary/46.RelatedWords/#degrees-of-being-drunk","title":"Degrees of being drunk","text":"mildly drunk <p>tipsy, silly, tight, woozy</p> drunk <p>inebriated, intoxicated, tanked, juiced, likkered up</p> very drunk  <p>smashed, hammered, plastered, shitfaced, soused, sloshed, wasted, zonked, loaded, stinko</p> idioms <p>drunk as a lord, in his cups, feeling no pain, drunk as a skunk, three sheets to the wind</p>"},{"location":"English/Vocabulary/46.RelatedWords/#words-to-describe-fearful-recoil","title":"Words to Describe Fearful Recoil","text":"<ul> <li>flinch \u2014 to draw away in anticipation of pain.</li> <li>shrink \u2014 to draw back as if trying to make one\u2019s body smaller. One might shrink into the shadows in an   attempt to become invisible.</li> <li>wince \u2014 One might wince from pain, real or anticipated.</li> <li>blench \u2014 It means \u201cmove suddenly, wince, or dodge.\u201d</li> <li>cower \u2014 probably comes from a German word meaning \u201cto lie in wait.\u201d In current usage it conveys a cowardly   or fearful movement.</li> <li>cringe \u2014 In Old English the word could mean \u201cto fall dead in battle.\u201d Now it has the less final meaning of   \u201cto draw back\u201d or \u201cmove in a fearful manner.\u201d</li> <li>grovel \u2014 This is a word to use when the action takes place close to the ground. It conveys the sense of   demonstrating servility by dropping onto one\u2019s knees, or even going face down. Figuratively it can be used   of people too eager to please.</li> <li>quail \u2014 Although spelled the same as the name of the game bird, the verb to quail, \u201cto lose courage, to   shrink,\u201d is not related. Its origin is uncertain. Words meaning \u201cto be ill,\u201d \u201cto die,\u201d and \u201cto curdle\u201d have   been suggested. In current usage, quail means \u201cto draw away in fear or weakness.\u201d</li> </ul>"},{"location":"English/Vocabulary/46.RelatedWords/#rebut-refute-deny","title":"Rebut, Refute, Deny","text":"<p>To deny a statement is simply that. If I say \u2018all dogs are grey\u2019, then if you deny or contradict that statement all you have to do is say: \u2018No, they\u2019re not.\u2019</p> <p>However, if you wanted to rebut my statement, you would have to provide a well thought out and reasoned argument that suggests that I might be wrong. This is used in debates, where speakers present evidence that supports a counter argument.</p> <p>In order to refute my statement about dogs, you would have to prove it wrong, perhaps by showing me a dog of a different color.</p>"},{"location":"English/Vocabulary/46.RelatedWords/#how-to-describe-gibberish","title":"How to Describe Gibberish","text":"<p>Double Dutch is another expression meaning \u201cincomprehensible speech.\u201d The \u201cDutch\u201d refers to the idea that a foreign language is incomprehensible to one who hasn\u2019t learned it. The \u201cdouble\u201d is an intensifier. \u201cDouble Dutch\u201d is a language twice as difficult to understand as \u201cplain \u2018Dutch\u2019\u201d.</p> <p>babble: probably an imitative word suggesting baby talk. I used to think it came from the story of the Tower of Babel, but apparently no etymological connection can be traced. The meaning \u201cto repeat oneself incoherently\u201d is known from about 1418.</p> <p>balderdash: originally referred to a jumbled mix of liquors, for example milk and beer or beer and wine. In 1674 it meant \u201csenseless jumble of words.\u201d</p> <p>baloney: warning: American slang!</p> <p>bilge: \u201cstupid talk or writing\u201d The bilge is the \u201clowest internal part of a ship.\u201d A lot of nasty stuff accumulates there.</p> <p>blather: \u201cnonsensical talk\u201d May have come into English via Scots dialect from a Scandinavian word meaning \u201cbabble.\u201d</p> <p>bull: Most of us probably think of \u201cbull\u201d as short for \u201cbullshit,\u201d but bull with the meaning \u201ctrivial or false statements,\u201d has been around since Middle English. The ME word probably derived from French boul meaning \u201cfalse talk, fraud.\u201d It may be connected to modern Icelandic bull meaning \u201cnonsense.\u201d Bullshit is American slang dating from 1915 with the meaning \u201celoquent and insincere rhetoric.\u201d</p> <p>bunk: warning: American slang!</p> <p>drivel: \u201cstupid or senseless talk.\u201d This one comes from OE dreflian, \u201cto dribble or run at the nose.\u201d</p> <p>eyewash: \u201cblarney, humbug.\u201d According to the OnlineEtymologyDictionary, this expression is chiefly British, is perhaps from the notion of \u201csomething intended to obscure or conceal facts or true motives.\u201d But this, and expression my eye also may be the verbal equivalent of the wink that indicates one doesn\u2019t believe what has been said (cf. Fr. mon oeil in same sense, accompanied by a knowing pointing of a finger to the eye).</p> <p>gibberish: probably another imitative word suggesting the sound of chatter. Gibberish is totally unintelligible.</p> <p>gobbledygook: \u201cunclear, wordy jargon.\u201d This is another word we owe to the sphere of politics. In another post I mentioned the eponym \u201cmaverick\u201d that comes from the surname of rancher Samuel Maverick (1803-1870). The word gobbledygook was coined in 1944 by one of his grandsons, Texas representative Maury Maverick. In a memo dated March 30, 1944, he banned the use of \u201cgobbledygook language\u201d and threatened to shoot anyone who used the words activation or implementation. He said he based the word on the sound a turkey makes.</p> <p>guff: \u201cempty talk, nonsense.\u201d This is another word of imitative origin, possibly based on puff.</p> <p>hogwash: \u201cworthless, false or ridiculous speech or writing.\u201d Originally hogwash was slops fed to pigs. Then it came to mean \u201ccheap liquor.\u201d The meaning \u201cinferior writing\u201d dates from 1773.</p> <p>jargon: The word entered English with the meaning \u201cunintelligible talk, gibberish\u201d in 1340. It derives from a French word meaning \u201ca chattering of birds.\u201d Now it can mean technical terminology associated with a specific occupation. Practitioners understand jargon, but to those not in the know, it\u2019s gibberish.</p> <p>mumbo jumbo: \u201cunintelligible or incomprehensible language.\u201d The term is supposed to derive from an African idol in the Niger region, but no likely source has been found. The meaning \u201cbig, empty talk\u201d is documented from 1896.</p> <p>piffle: \u201cfoolish or futile talk or ideas.\u201d Probably an imitative word derived from a contemptuous blowing sound, or it could be a conflation of trifle and piddle.</p> <p>poppycock: \u201csenseless talk, nonsense.\u201d This one sounds comical, but if you think about it, it\u2019s as disgusting as bilge.</p> <p>prattle: \u201cidle or meaningless chatter.\u201d This is another imitative word. The verb is prate.</p> <p>tripe: \u201csomething of no value.\u201d The literal meaning of tripe is the rubbery lining of the stomach of cattle or other ruminants, used as food. \u2014Answers.com</p> <p>twaddle: \u201csilly talk.\u201d The origin is unknown.</p>"},{"location":"English/Vocabulary/46.RelatedWords/#words-to-describe-degrees-of-religiosity","title":"Words to Describe Degrees of Religiosity","text":"<p>religious \u2014 \u201cdedicated to religious practice; observant practitioner of a particular religion.\u201d</p> <p>pious \u2014 in earlier writers, pious was used in a positive sense of loyalty to religion, family, and those things for which a person might be expected to feel reverence. Current usage tends to tinge the word with hypocrisy.</p> <p>godly \u2014 pleasing to God. One speaks of a godly person or a godly life.</p> <p>fervent \u2014 derives from a Latin word meaning \u201cto boil\u201d or \u201cto be very hot.\u201d A fervent person is one that feels very intensely about a subject. The subject does not need to be religious in nature. One can be a fervent Catholic, or a fervent environmentalist. Or both.</p> <p>zealous\u2014 This adjective derives from the noun Zealot. The Zealots were fanatics who resorted to assassination and other acts of terrorism that eventually resulted in the destruction of the Temple and the expulsion of the Jews from Jerusalem. Zealous, therefore, can carry the sense of intense fanaticism that will stop at nothing to promote its cause.</p> <p>devout \u2014 from the verb devote, \u201cto set apart.\u201d The word connotes a sense of consecration. A devout person practices religion from genuine feeling of reverence for the object of worship.</p> <p>sanctimonious \u2014 It derives from the Latin word for \u201choly.\u201d A sanctimonious life could be one that reflects good deeds and devout religious observance. In current usage, however, sanctimonious carries the sense of hypocrisy. Indeed, a common expression is \u201csanctimonious hypocrite.\u201d A sanctimonious person is like the Pharisee who prays and gives alms in public so that everyone can admire him for it. A sanctimonious person is always reminding people of their shortcomings.</p> <p>fanatic\u2014 A \u201cfanatic\u201d is out of control, at least as regards a particular subject. Winston Churchill defined a fanatic as \u201csomeone who can\u2019t change his mind and won\u2019t change the subject.\u201d</p>"},{"location":"English/Vocabulary/46.RelatedWords/#the-difference-between-eg-and-ie","title":"The Difference Between e.g. and i.e.","text":""},{"location":"English/Vocabulary/46.RelatedWords/#dangerous","title":"Dangerous","text":"<p>perilous precarious, hazardous, risky, unsafe</p>"},{"location":"English/Vocabulary/46.RelatedWords/#decide","title":"Decide","text":"<p>determine, settle, choose, resolve</p>"},{"location":"English/Vocabulary/46.RelatedWords/#fall","title":"Fall","text":"<p>drop, descend, plunge, topple down, tumble</p>"},{"location":"English/Vocabulary/46.RelatedWords/#new","title":"New","text":"<p>fresh, unique, original, unusual, novel, modern, current, recent</p>"},{"location":"English/Vocabulary/46.RelatedWords/#awful","title":"Awful","text":"<p>culpable, dreadful, terrible, poor, unpleasant, hideous, abominable, repulsive, grunge, sordid, rebarbative reprehensible, (see bad)</p>"},{"location":"English/Vocabulary/46.RelatedWords/#definite","title":"Definite","text":"<p>certain, sure, positive, determined, clear, distinct, obvious</p>"},{"location":"English/Vocabulary/46.RelatedWords/#great","title":"Great","text":"<p>noteworthy, worthy, distinguished, remarkable, grand, considerable, powerful, much, mighty, resplendent, see beautiful</p>"},{"location":"English/Vocabulary/46.RelatedWords/#thin","title":"Thin","text":"<p>gaunt, slim, slender, lean, spare, skinny, slight, scrawny, voracious - ravenous - insatiable - emaciated - nourish - malnourished, skeletal</p>"},{"location":"English/Vocabulary/46.RelatedWords/#gross","title":"Gross","text":"<p>improper, rude, coarse, indecent, crude, vulgar, outrageous, egregious, flagrant, extreme, grievous, shameful, uncouth, obscene</p>"},{"location":"English/Vocabulary/46.RelatedWords/#moody","title":"Moody","text":"<p>temperamental, changeable, short-tempered, glum, morose, sullen, mopish, irritable, testy, peevish, fretful, spiteful, sulky, touchy</p>"},{"location":"English/Vocabulary/46.RelatedWords/#happy","title":"Happy","text":"<p>pleased, contented, satisfied, delighted, elated, joyful, cheerful, ecstatic, jubilant, gay, tickled, gratified, glad, blissful, overjoyed, shivoo, jamboree, fete, maffick, exultation, jaunty, jovially, genial, sanguine, gleefully, upbeat, blithesome - blithe, grateful, merry (see merrily), cheerful, elated / elation, euphoria, exhilaration, see excitement, with bated breath - agog, boisterous, tempestuous, exult, ebullient, abubble, craic, (see merrily)</p>"},{"location":"English/Vocabulary/46.RelatedWords/#neat","title":"Neat","text":"<p>clean, orderly, tidy, trim, dapper, natty, smart, elegant, well-organized, uper, desirable, spruce, shipshape, well-kept, shapely, immaculate, spotless</p>"},{"location":"English/Vocabulary/46.RelatedWords/#mischievous","title":"Mischievous","text":"<p>puckish, frolic / frolicsome, antic, impish, serenity?, puerile, airily, levity, verdant (?), prankish, playful, naughty, roguish, waggish, sportive, obnoxious - pester - importune - badger - peeve - rag</p>"},{"location":"English/Vocabulary/46.RelatedWords/#sad","title":"Sad","text":"<p>cheerless, somber, low-spirited, gloomy, doleful, forlorn, dismal, depressed, bereaved, frown, sulky, crossly, mournfully, sobbed, moaned, lamented (lamentation), lachrymose, grieve, bemoan, disconsolate</p>"},{"location":"English/Vocabulary/46.RelatedWords/#angry","title":"Angry","text":"<p>sullen, impassioned, displeased, offended, resentful, vexed, indignant, enraged, outraged, furious, livid</p>"},{"location":"English/Vocabulary/46.RelatedWords/#confused","title":"Confused","text":"<p>dazed, muddled, puzzled, to be beleaguered - beset?, perplexed, baffled, rattled, flustered, confounded - refute - rebut, abash, dumbfounded, bewildered, see surprised, befuddle, disconcert, flummox</p>"},{"location":"English/Vocabulary/46.RelatedWords/#amazing","title":"Amazing","text":"<p>incredible, unbelievable, improbable, fabulous, wonderful - wondrous, fantastic, astonishing, astounding, extraordinary, inconceivable, ineffable, see chimerical</p>"},{"location":"English/Vocabulary/46.RelatedWords/#tasty","title":"Tasty","text":"<p>delicious, scrumptious, savoury, delectable, appetising, palatable, delightful, enjoyable, toothsome, mouth-watering</p>"},{"location":"English/Vocabulary/46.RelatedWords/#hate","title":"Hate","text":"<p>despise, loathe, detest, abhor, disfavor, dislike, disapprove, abominate, grudge, (see bad, awful)</p>"},{"location":"English/Vocabulary/46.RelatedWords/#mark","title":"Mark","text":"<p>label, tag, price, ticket, impress, effect, trace - vestige, imprint, stamp, brand, sign, note, heed, notice, designate</p>"},{"location":"English/Vocabulary/46.RelatedWords/#have","title":"Have","text":"<p>hold, possess, own, contain, acquire, gain, maintain, believe, bear</p>"},{"location":"English/Vocabulary/46.RelatedWords/#cause","title":"Cause","text":"<p>ramifications, beget - engender, see instigate, consequences, repercussions, result in, It originated in/from\u2026, It all started \u2026, It has its origins/roots in \u2026, It can be traced back / attributed to \u2026, It stems from \u2026</p>"},{"location":"English/Vocabulary/46.RelatedWords/#help","title":"Help","text":"<p>aid, avail, assist, support - espouse, encourage, back, wait on, serve, relieve, succour, benefit, befriend, abet</p>"},{"location":"English/Vocabulary/46.RelatedWords/#make","title":"Make","text":"<p>create, originate, invent, see beget, form, construct, design, fabricate, manufacture, produce, build, develop, do, effect, execute, compose, perform, accomplish, earn, gain, obtain, acquire, get</p>"},{"location":"English/Vocabulary/46.RelatedWords/#destroy","title":"Destroy","text":"<p>ruin, demolish, raze, waste, eradicate, obliterate, exterminate, deracinate, root out, devour</p>"},{"location":"English/Vocabulary/46.RelatedWords/#describe","title":"Describe","text":"<p>see the reporting verbs above.</p> <p>portray, characterise, picture, narrate, relate, recount, represent, report</p>"},{"location":"English/Vocabulary/46.RelatedWords/#beginstart","title":"Begin/start","text":"<p>set off, set about, open, launch, initiate, commence, inaugurate, originate, embarked, instigate, see goad, loose, bring about, the onset of something, ferment, stir up, incite, spark off, ignite, propel</p>"},{"location":"English/Vocabulary/46.RelatedWords/#difference","title":"Difference","text":"<p>disagreement, inequity, contrast, dissimilarity, incompatibility, discrepancy, far cry</p>"},{"location":"English/Vocabulary/46.RelatedWords/#surprised","title":"Surprised","text":"<p>awestruck, agape, shocked, aghast, taken aback, stunned, alarmed, nonplussed, bepuzzle, overwhelmed, floored, speechless, flabbergasted, bedazzle / bedazzled, befool, caught off guard, dumbstruck, see confused, see beguile, suspense</p>"},{"location":"English/Vocabulary/46.RelatedWords/#dark","title":"Dark","text":"<p>shadowy, unlit, murky, gloomy, dim, dusky, shaded, sunless, black, dismal, sombre</p>"},{"location":"English/Vocabulary/46.RelatedWords/#funny","title":"Funny","text":"<p>humorous, amusing, droll, comic, comical, laughable, silly</p>"},{"location":"English/Vocabulary/46.RelatedWords/#old","title":"Old","text":"<p>feeble, frail, ancient, weak, aged, used, worn, ramshackle, run-down, derelict, shabby, dingy, seedy?, dilapidated, ragged, faded, broken-down, former, old-fashioned, outmoded, passe, veteran, mature, venerable, primitive, traditional, archaic, conventional, customary, stale, musty, obsolete, extinct, poky, squalid, dismal, squalor</p>"},{"location":"English/Vocabulary/46.RelatedWords/#hide","title":"Hide","text":"<p>conceal, cover, mask, cloak, camouflage, screen, shroud, veil, disguise, conceal</p>"},{"location":"English/Vocabulary/46.RelatedWords/#part","title":"Part","text":"<p>portion, apportion, allocate, share, piece, allot/allotment, section, fraction, fragment, impart, give</p>"},{"location":"English/Vocabulary/46.RelatedWords/#secretly","title":"Secretly","text":"<p>clandestine, collude, conspire</p>"},{"location":"English/Vocabulary/46.RelatedWords/#place","title":"Place","text":"<p>space, area, spot, plot, region, location, situation, position, residence, dwelling, set, site, station, status, state</p>"},{"location":"English/Vocabulary/46.RelatedWords/#do","title":"Do","text":"<p>execute, enact, carry out, conclude, accomplish, conduct</p>"},{"location":"English/Vocabulary/46.RelatedWords/#fair","title":"Fair","text":"<p>just, impartial, unbiased, objective, unprejudiced, honest</p>"},{"location":"English/Vocabulary/46.RelatedWords/#fly","title":"Fly","text":"<p>soar, hover, flit, wing, flee, waft - see emanate, glide</p>"},{"location":"English/Vocabulary/46.RelatedWords/#enjoy","title":"Enjoy","text":"<p>appreciate, delight in, be pleased, indulge in - condone, luxuriate in, bask in, revel, relish, savour, like</p>"},{"location":"English/Vocabulary/46.RelatedWords/#explain","title":"Explain","text":"<p>elaborate, clarify, define, interpret, justify, account for, contemplate, elucidate, construe, adduce</p>"},{"location":"English/Vocabulary/46.RelatedWords/#end","title":"End","text":"<p>stop, finish, terminate, close, halt, cessation, discontinuance, desuetude, obsolescence, lorn, extinct, moribund, senectitude, senile - doddering, in the sere and yellow - of advanced years, elderly, shrivelled, decrepitude, terminus, obsolete, passe, gadzookery, antiquated, draw on - come to the end, cease, stay, pause discontinue, conclude, quit</p>"},{"location":"English/Vocabulary/46.RelatedWords/#hurry","title":"Hurry","text":"<p>trot, rush, run, speed, race, hasten, urge, accelerate, bustle, see fast</p>"},{"location":"English/Vocabulary/46.RelatedWords/#disappointed","title":"Disappointed","text":"<p>feel let down, disillusioned, disenchanted, gutted, crestfallen / crest-fallen</p>"},{"location":"English/Vocabulary/46.RelatedWords/#hurt","title":"Hurt","text":"<p>damage, harm, injure, wound, distress, afflict, pain, scathe, harrow</p>"},{"location":"English/Vocabulary/46.RelatedWords/#idea","title":"Idea","text":"<p>thought, concept, conception, notion, understanding, apprehension, opinion, plan, view, belief</p>"},{"location":"English/Vocabulary/46.RelatedWords/#love","title":"Love","text":"<p>adore, like, admire, esteem, fancy, care for, cherish, treasure, worship, appreciate, savour, carol</p>"},{"location":"English/Vocabulary/46.RelatedWords/#important","title":"Important","text":"<p>necessary, vital, critical, indispensable, valuable, essential, significant, primary, principal, considerable, famous, crucial, distinguished, notable, well-known, to be of paramount importance, to be imperative that, momentous</p>"},{"location":"English/Vocabulary/46.RelatedWords/#beautiful","title":"Beautiful","text":"<p>pretty, lovely, handsome, attractive, gorgeous, dazzling, splendid, magnificent, comely, fair, ravishing, graceful, elegant, fine, exquisite, aesthetic, pleasing, shapely, delicate, stunning, glorious, heavenly, celestial, sublime, inimitable</p>"},{"location":"English/Vocabulary/46.RelatedWords/#boring","title":"Boring","text":"<p>dull, tiring, tiresome, uninteresting, slow, dumb, stupid, unimaginative, lifeless, dead, insensible, tedious, wearisome, listless, expressionless, plain, monotonous, humdrum, platitudinous, mundane, mediocre, bland, rigmarole, dreary, see blase - nonchalant - \u2026, see jaded</p>"},{"location":"English/Vocabulary/46.RelatedWords/#big","title":"Big","text":"<p>immense, enormous, huge, gigantic, vast, colossal, gargantuan, large, sizeable, grand, great, tall, substantial, mammoth, astronomical, ample, broad, expansive, spacious, tremendous, titanic, mountainous</p>"},{"location":"English/Vocabulary/46.RelatedWords/#look","title":"Look","text":"<p>gaze, see, glance, watch, survey, study, seek, search for, peek, peep, glimpse, stare, contemplate, examine, gape, ogle, scrutinize, inspect, behold, observe, view, witness, perceive, spy, sight, discover, notice, recognise, peer, eye, gawk, peruse, explore, scowl at, leer - askance, squint, dart, behold, gawp, see frown</p>"},{"location":"English/Vocabulary/46.RelatedWords/#brave","title":"Brave","text":"<p>courageous, fearless, dauntless, intrepid, plucky - decisive, resolute, daring, heroic, valorous, audacious, bold, valiant, doughty, mettlesome, brash, impertinent, incogitant - folly?, rash - hasty, deliriously, imprudent, stout, as bold as brass, see adamant</p>"},{"location":"English/Vocabulary/46.RelatedWords/#calm-see-lazy","title":"Calm (see Lazy)","text":"<p>quiet, peaceful, still, tranquil, mild, serene - limpid?, smooth, composed, collected, unruffled, level-headed, unexcited, detached, aloof, lackadaisical, blase, lukewarm, benumb(?), tepid, jaded, nonchalant, unconcerned, insouciance, abstemious, slumberous, lassitude, remiss, languid, torporific sooth, mollify, placate, assuage, reassure - allay ((somebody\u2019s) fear / concern / suspicion)</p> <p>ant: spry, see senectitude</p>"},{"location":"English/Vocabulary/46.RelatedWords/#kill-see-destroy","title":"Kill (see Destroy)","text":"<p>slay, execute, assassinate, murder, destroy, cancel, abolish</p>"},{"location":"English/Vocabulary/46.RelatedWords/#plan","title":"Plan","text":"<p>plot, scheme, design, draw, map, diagram, procedure, arrangement, intention, device, contrivance, method, way, blueprint</p>"},{"location":"English/Vocabulary/46.RelatedWords/#keep","title":"Keep","text":"<p>hold, retain, withhold, preserve, maintain, sustain</p>"},{"location":"English/Vocabulary/46.RelatedWords/#lazy-see-calm","title":"Lazy (see Calm)","text":"<p>dilatory, tardy, indolent, slothful, idle, inactive, sluggish</p>"},{"location":"English/Vocabulary/46.RelatedWords/#little","title":"Little","text":"<p>tiny, small, diminutive, miniscule, runt, miniature, puny - futile, exiguous, dinky, limited, microscopic, slight, petite, minute, belittle - downplay - depreciatory</p>"},{"location":"English/Vocabulary/46.RelatedWords/#popular","title":"Popular","text":"<p>well-liked, approved, accepted, favourite, celebrated, common, current</p>"},{"location":"English/Vocabulary/46.RelatedWords/#good","title":"Good","text":"<p>excellent, fine, superior, wonderful, marvellous, apt, satisfactory, safe, advantageous, valid, salubrious, beneficial, splendid, great, noble, worthy, first-rate, top-notch, sterling, superb, edifying, see commendable - commendation, meritorious, meed?, laudable, lofty, gratifying</p>"},{"location":"English/Vocabulary/46.RelatedWords/#get","title":"Get","text":"<p>acquire, obtain, secure, procure, provide, gain, fetch, find, score, accumulate, win, earn, catch, derive, collect, gather, glean, pick up, regain, amass, garner</p>"},{"location":"English/Vocabulary/46.RelatedWords/#bad","title":"Bad","text":"<p>atrocious, evil, immoral, wicked, corrupt, sinful, vice - vicious, depraved, rotten, contaminated, spoiled, tainted, harmful, injurious, unfavourable, defective, inferior, imperfect, substandard, faulty, improper, inappropriate, unsuitable, untenable, disagreeable, unpleasant, cross, nasty, unfriendly, horrible, outrageous, scandalous, infamous, see wrong, noxious, sinister, putrid, deplorable, heinous, nefarious (see behaviour), obnoxious, detestable, despicable, contemptible, foul, execrable, (see awful)</p>"},{"location":"English/Vocabulary/46.RelatedWords/#interesting","title":"Interesting","text":"<p>compelling, gripping, fascinating, intriguing, captivating, sapid, engaging, keen, attractive, intriguing, provocative, though-provoking, challenging, inspiring, exciting, entertaining, engrossing, absorbing, enthralling, curious, appealing, beguile, riveting, exhilarating, thrilling</p> <p>tantalise, seduce, tempt, bait, lure, allure, mesmerise, spellbind, enchanting, attracting, bewitching, entice (enticing), transfixed, preoccupied, to be infatuated with, besot?, ~rapt, engrossedr, enraptured, enthralled, riveted upon, see surprising</p>"},{"location":"English/Vocabulary/46.RelatedWords/#bright","title":"Bright","text":"<p>shining, shiny, brilliant, shimmering, vivid, colourful, luminous, incandescent, effulgent, sheen, lustrous - ant lacklustre - glisten, glint, sparkling, gleaming, coruscant, scintillating, glitter, twinkling, glimmer, radiant, glowing, blooming</p> <p>intelligent, knowing, quick-witted, smart, intellectual, discerning,, perspicacious, omniscient, shrewd / shrewdly, astute, acute, acumen, sagacious, trenchant, pellucid, knowledgeable, cognisant, grok, (see think)</p>"},{"location":"English/Vocabulary/46.RelatedWords/#want","title":"Want","text":"<p>long, strive, yearn, itch, aspire/aspirant , plod, wade, crave, hanker after/for, somebody\u2019s penchant for something, see ardour</p>"},{"location":"English/Vocabulary/46.RelatedWords/#predicament","title":"Predicament","text":"<p>quagmire, plight, quandary, predicament, flounder, precipice, abyss, dilemma, pickle, problem, spot, scrape, jam, chasm, the toils of something</p>"},{"location":"English/Vocabulary/46.RelatedWords/#put","title":"Put","text":"<p>place, set, attach, establish, assign, keep, save, set aside, effect, achieve, do, build</p>"},{"location":"English/Vocabulary/46.RelatedWords/#quiet","title":"Quiet","text":"<p>silent, still, soundless, mute, tranquil, peaceful, calm, restful</p>"},{"location":"English/Vocabulary/46.RelatedWords/#right","title":"Right","text":"<p>correct, accurate, factual, true, good, just, honest, upright, lawful, moral, proper, suitable, apt, legal, fair, aright</p>"},{"location":"English/Vocabulary/46.RelatedWords/#true","title":"True","text":"<p>veracity - verisimilar - verisimilitude, truthfulness, verity, sincerity, candour, honesty, accurate, right, proper, precise, exact, valid, genuine - bona fide, real, actual, trusty, steady, loyal, dependable, sincere, see staunch, see stalwart</p>"},{"location":"English/Vocabulary/46.RelatedWords/#slow","title":"Slow","text":"<p>unhurried, gradual, leisurely, late, behind, tedious, slack</p>"},{"location":"English/Vocabulary/46.RelatedWords/#story","title":"Story","text":"<p>tale, myth, legend, fable, yarn, account, narrative, chronicle, epic, sage, anecdote, record, memoir</p>"},{"location":"English/Vocabulary/46.RelatedWords/#strange","title":"Strange","text":"<p>odd, peculiar, unusual, unfamiliar, uncommon, quirky, queer - qeer, weird, outlandish, curious, unique, exclusive, irregular, preposterous, see bad</p>"},{"location":"English/Vocabulary/46.RelatedWords/#take","title":"Take","text":"<p>hold, catch, seize, grasp, win, capture, acquire, pick, choose, select, prefer, remove, steal, lift, rob, engage, bewitch, purchase, buy, retract, recall, assume, occupy, consume</p>"},{"location":"English/Vocabulary/46.RelatedWords/#trouble","title":"Trouble","text":"<p>distress, anguish, anxiety, worry, wretchedness, pain, danger, peril, disaster, grief, misfortune, difficulty, concern, pains, inconvenience, exertion, effort, see predicament</p>"},{"location":"English/Vocabulary/46.RelatedWords/#annoy","title":"Annoy","text":"<p>exasperate, get my dander up, grates on my ear</p>"},{"location":"English/Vocabulary/46.RelatedWords/#ugly","title":"Ugly","text":"<p>see hideous, frightful, frightening, shocking, horrible, unpleasant, monstrous, terrifying, gross, grisly, ghastly, horrid, unsightly, plain, homely, evil, see repulsive, repugnant, gruesome</p>"},{"location":"English/Vocabulary/46.RelatedWords/#unhappy","title":"Unhappy","text":"<p>miserable, uncomfortable, wretched, heart-broken, unfortunate, poor, downhearted, sorrowful, depressed, dejected, melancholy, glum, see gloomy, dismal, discouraged, see sad, see disappointed</p>"},{"location":"English/Vocabulary/46.RelatedWords/#use","title":"Use","text":"<p>employ, utilize, exhaust, spend, expend, consume, exercise, dispose</p>"},{"location":"English/Vocabulary/46.RelatedWords/#wrong","title":"Wrong","text":"<p>incorrect, inaccurate, mistaken, erroneous, improper, unsuitable, go awry</p>"},{"location":"English/Vocabulary/46.RelatedWords/#false","title":"False","text":"<p>fake, fraudulent, counterfeit, spurious, untrue, unfounded, erroneous, deceptive, groundless, fallacious, hoax, con(-man), bogus, purloin, heist, delude, snide</p>"},{"location":"English/Vocabulary/46.RelatedWords/#famous","title":"Famous","text":"<p>household name, well-known, renowned, celebrated, famed, eminent, illustrious, distinguished, noted, notorious, celebrity</p>"},{"location":"English/Vocabulary/46.RelatedWords/#fast","title":"Fast","text":"<p>at the drop of a hat, dashing, fleet, quick, rapid, speedy, hasty, rash, instantaneous, evanescent, snappy, swiftly, lickety-split, posthaste, hastily, expeditiously, like a flash, flit, apace, see run, fly, hurry</p>"},{"location":"English/Vocabulary/46.RelatedWords/#fat","title":"Fat","text":"<p>stout, corpulent, fleshy, beefy, paunchy, plump, full, rotund, tubby, pudgy, chubby, chunky, stubby, burly, pinguid, oleaginous</p>"},{"location":"English/Vocabulary/46.RelatedWords/#fear","title":"Fear","text":"<p>fright, dread, terror, alarm, dismay, anxiety, scare, awe, trepidation, horror, panic, apprehension, vibe, foreboding, bespeak, harbinger, smell a rat, misgiving, doubt, presentiment, impending - imminent, menace, eerie, otherworldly, omen, ill-omen, awestruck, consternation, gloomy, menacing, eldritch, ghastly, horrendous, have a feeling in/at the pit of your stomach, browbeat, bully, intimidate, see subdue</p>"},{"location":"English/Vocabulary/46.RelatedWords/#come-to-existence","title":"Come to existence","text":"<p>flourish, pullulate, burgeon, proliferate, arise from, stem from, emerge (from), nascent, emanating / emanate, incipient, beginning, commence</p>"},{"location":"English/Vocabulary/46.RelatedWords/#use_1","title":"Use","text":"<p>draw on</p>"},{"location":"English/Vocabulary/46.RelatedWords/#tired","title":"Tired","text":"<p>exhausted - exhausting, debilitate / debilitating, laborious, torment (-ed), weary</p>"},{"location":"English/Vocabulary/46.RelatedWords/#scared","title":"Scared","text":"<p>afraid, frightened, alarmed, terrified, panicked, fearful, unnerved, insecure, timid, shy, skittish, jumpy, disquieted, worried, vexed, troubled, disturbed, horrified, terrorized, shocked, petrified, haunted, timorous, shrinking, tremulous, stupefied, paralyzed, stunned, apprehensive, ovine</p>"},{"location":"English/Vocabulary/46.RelatedWords/#show","title":"Show","text":"<p>display, exhibit, present, expose, note, point to, indicate, explain, reveal, prove, demonstrate</p>"},{"location":"English/Vocabulary/46.RelatedWords/#think","title":"Think","text":"suppose <p>reckon, deem, conjecture, suspect, presume, suppose, believe, assume, guess, I\u2019ll wager, I\u2019ll be bound, surmise, guess, sure, bet, venture, methinks, bethink, consider, see bright - perspicacious, see Reporting &amp; Speaking verbs</p> thought process: <p>fathom, judge, reflect, mediate, pore over, mull over, talk over, contemplate, elaborate, deliberate, cerebrate, premeditate, gather, peruse, scrutinise, study, scrutinise, delve, pensive, circumspect</p> <p>come up with, We have hit on a new idea for, His mind alighted in several possible answers, devise, conceive, contrive</p>"},{"location":"English/Vocabulary/46.RelatedWords/#personal-qualities","title":"Personal qualities","text":"<ul> <li> <p>adamant - unwavering - impregnable - intransigent - recalcitrant - tenacious/tenacity (perseverance -    pursue - robust) - contumacious - obstinate - disobedient - relentless? - reluctant? - rambunctious -    unflinching - staunch - flout - intractable - stubborn - stark - fortitude - inexorable? - sturdy.   stalwart/allegiance - defiant - headstrong - indefatigable.</p> <p>Ant: falter/faltering - wishy-washy - irresolute / irresolution - pendulous - vacillate - qualm - not sure - ambivalent (see teeter on the brink of)</p> </li> <li> <p>frenzy - frenetic - impetuous - rabid - frantically munificent - largesse - lavish? fractious - bilious - petulant - querulous - cranky fastidious - squeamish - nitpicky - cantankerous - meticulous - see minute - thorough - diligent - assiduous - intently/intent (see bright above)</p> </li> <li> <p>Enemy:</p> <ul> <li>bellicose - pugnacious - hostile - belligerent - slugfest - feuding - carnage - gory - pyrrhic -   virulent - brawl - skirmish - bloodbath - (see argue) - squabble - scuffle - altercation - set-to</li> <li>adversary</li> <li>antagonist</li> <li>belligerent</li> <li>combatant</li> <li>foe</li> <li>mercenary</li> <li>factuality</li> <li>authenticity</li> <li>certitude</li> </ul> </li> <li> <p>inveterate - avid ?</p> </li> <li>ardour - fervid - vehemently - fervent - fervour - fiery - aflame - zeal - see want</li> <li>pompous - turgid - highfalutin - florid - see mealy-mouthed</li> <li>salacious - whoorish - meretricious - sultry - minx - profligate - turpitude - lewd(-ness) - floosie - harlot - lewdness</li> <li>compassion - lenity - benevolence</li> <li>\u0441upidity</li> <li>(see calm)</li> <li> <p>cordially</p> </li> <li> <p>rotten apple</p> </li> <li>loose cannon</li> <li>couch potato</li> <li>wet blanket</li> <li>big cheese</li> <li>tough cookie</li> <li>yes-man</li> <li>whizzkid</li> <li>busybody</li> <li>chatterbox</li> <li>dark horse</li> <li>old hand</li> <li>set in her ways</li> <li>black sheep</li> </ul>"},{"location":"English/Vocabulary/46.RelatedWords/#behaviour","title":"Behaviour","text":"<ul> <li>comportment - aplomb - mien - conduct - demeanor - carriage</li> <li>meekly (see obsequiously)</li> <li>defamatory/defame - denigrate - malign - truckle - aspersion - libel - cast aspersion</li> <li>succumb - acquiesce - assent - avow - consent - concur - cede</li> <li>infamy - nefarious</li> <li>disdain - opprobrium - malevolent - schadenfreude - disparage - insolence - contemptuous - condescendingly -   hubristic - scorn - conceited - bumptious - look down on</li> <li>snappishly - capricious - shenanigans</li> <li>imperious - omnipotent</li> <li>(see obsequiously)</li> <li>(see contrite)</li> </ul>"},{"location":"English/Vocabulary/46.RelatedWords/#church","title":"Church","text":"<ul> <li>absolution - shrive - penance - penitent - repentant - clergyman - sanctuary - contrite - shrine - consecrated - tabernacle - solitudinarian (see secluded)</li> <li>sepulchre - graveyard - cemetery</li> <li>creed - faith</li> <li>ecclesiastic</li> </ul>"},{"location":"English/Vocabulary/46.RelatedWords/#colours","title":"Colours","text":"<ul> <li>smaragdine</li> <li>cerulean</li> <li>chatoyant</li> <li>carnation</li> <li>crimson</li> <li>mahogany</li> <li>sallow</li> <li>flaxen-haired</li> <li>florid</li> <li>scarlet</li> <li>navy</li> <li>fair-haired</li> <li>flaxen-haired</li> <li>hectic</li> </ul>"},{"location":"English/Vocabulary/46.RelatedWords/#family-wife-husband","title":"Family - Wife - Husband","text":"<ul> <li>connubial</li> <li>uxorious</li> <li>conjugal</li> <li>misogynistic</li> <li>trothplight</li> <li>matrimony</li> <li>paternal</li> <li>gravid</li> <li>betrothal</li> <li>progeny - offspring - kith and kin - crony</li> <li>paramour - mistress</li> <li>decathect</li> <li>kin</li> <li>wedlock / wed / newlywed</li> <li>celibate</li> <li>antecedents - ant posterity</li> </ul>"},{"location":"English/Vocabulary/46.RelatedWords/#animals","title":"Animals","text":"<ul> <li>fox - vixen - vulpine</li> <li>cervine</li> <li>feline</li> </ul>"},{"location":"English/Vocabulary/46.RelatedWords/#other-2","title":"Other 2","text":"<ul> <li>pithy - jejune - bland</li> <li>disclaim - dismiss - disregard - neglect - discount</li> </ul>"},{"location":"English/Vocabulary/46.RelatedWords/#job","title":"Job","text":"<ul> <li>menial</li> <li>hireling</li> <li>peons</li> </ul>"},{"location":"English/Vocabulary/46.RelatedWords/#court-crime-law","title":"Court / Crime / Law","text":"<ul> <li>litigation</li> <li>imputation</li> <li>subpoena</li> <li>incarceration</li> <li>internment</li> <li>injunction</li> <li>complicity</li> <li>Illicit</li> <li>petit theft - minor crime</li> <li>convicted</li> <li>acquitted</li> <li>conman</li> <li>arson</li> <li>burglary</li> <li>domestic abuse</li> <li>embezzlement</li> <li>felony</li> <li>forgery</li> <li>larceny</li> <li>manslaughter</li> <li>moral turpitude</li> <li>murder</li> <li>robbery</li> <li>stalking</li> <li>treason</li> <li>apostate</li> <li>traitor</li> <li>trespass - interloper</li> <li>receiving</li> <li>shenanigans</li> </ul>"},{"location":"English/Vocabulary/46.RelatedWords/#house-live","title":"House, live","text":"<ul> <li>housing</li> <li>habitat</li> <li>shack</li> <li>slum</li> <li>abode - sojourn - domicile - aerie - lodging - reside</li> <li>premises</li> <li>boroughs</li> <li>shack</li> </ul>"},{"location":"English/Vocabulary/46.RelatedWords/#predictions","title":"Predictions","text":"<ul> <li>with all likelihood</li> <li>is likely to - A global disaster may well  have happened</li> <li>become a thing of the past</li> <li>the signs are</li> <li>to be\u2026<ul> <li>due to + inf</li> <li>bound to</li> <li>destined to</li> <li>on the verge of</li> <li>teeter on the brink of</li> <li>on the point of</li> <li>about to</li> <li>sure to: </li> <li>set to:</li> </ul> </li> <li>the days of \u2026 may be over</li> <li>prognosticate/prognosticator - foretell - forebode - foreshadow - herald - predict - betoken - presage - seer - clairvoyant - bespeak</li> <li>see impending</li> <li>15 Terms for Those Who Tell the Future<ul> <li>augur</li> <li>Cassandra</li> <li>crystal gazer</li> <li>doomsayer</li> <li>fortune-teller</li> <li>futurist</li> <li>Jeremiah</li> <li>oracle</li> <li>palm reader/palmist</li> <li>prophesier</li> <li>prophet</li> <li>sibyl</li> <li>soothsayer</li> </ul> </li> </ul>"},{"location":"English/Vocabulary/46.RelatedWords/#estimates","title":"Estimates","text":"<ul> <li>just under</li> <li>in the region of</li> <li>upwards of</li> <li>in the vicinity of</li> </ul>"},{"location":"English/Vocabulary/46.RelatedWords/#would-be-prospective-something-to-be","title":"would-be - prospective - something-to-be","text":"<ul> <li>Before they joined the course, the would-be spies were allowed to tell only\u2026</li> <li>Tom meets his wife-to-be when he \u2026</li> <li>for prospective gun owners</li> </ul>"},{"location":"English/Vocabulary/46.RelatedWords/#describing-graphs","title":"Describing graphs","text":"<ul> <li>has increased dramatically</li> <li>risen sharply</li> <li>dropped alarmingly</li> <li>There has been a surge / a drop / an increase</li> <li>\u2026 have plummeted / soared / grown</li> <li>There has been a relative surge / decline / drop</li> <li>Number have rocketed / exploded / collapsed</li> <li>There has been a steady / sharp / gradual increase</li> </ul>"},{"location":"English/Vocabulary/46.RelatedWords/#truth-lie-myths","title":"Truth / lie / myths","text":"<ul> <li>see true, see right</li> <li>conventional wisdom</li> <li>avowed - well-known - well-established</li> <li>disprove a myth / debunk a myth</li> <li>uncover the truth</li> <li>a commonly held perception / long-held perception</li> <li>fallacy - misconception - aberrant/aberration (?) - fallibility - see fallacious</li> <li>telltale</li> <li>He let it slip that they were planning to get married.</li> <li>Lynn gave the game away by laughing when Kim walked in</li> <li>Inadvertently perhaps, the BiE report lets the cat out of the bag.</li> <li>spill the beans</li> <li>bewray</li> <li>keep/stay schtum</li> <li>come clean</li> <li>set the record straight</li> <li>make a clean breast of it/things - admit</li> <li>abrogate - abjure - abolish - abdicate - rescind - recant - renounce - renege - change your mind - lie - perjure - repudiate</li> <li>confabulate</li> <li>canard - deceit - fable - falsehood - falsity - mendacity - misstatement - perjury</li> <li>ambiguity - equivocation (equivocal) - mealy-mouthed - prevarication - fudge</li> </ul>"},{"location":"English/Vocabulary/46.RelatedWords/#relaxing","title":"Relaxing","text":"<ul> <li>let your hair down</li> <li>put my feet up</li> <li>have a breather</li> <li>respite - hiatus - repose</li> </ul>"},{"location":"English/Vocabulary/46.RelatedWords/#opinions","title":"Opinions","text":"<ul> <li>in my experience - in my opinion - from what I can gather - as far as I am concerned - to my knowledge</li> <li>if you want my honest opinion</li> <li>have an axe to grind</li> <li>impartial</li> <li>It if was up to me</li> <li>I\u2019d sooner</li> <li>I\u2019d just as soon \u2026 as \u2026</li> <li>If I ever found myself in \u2026</li> <li>This would be by far the best option</li> <li>Without a shadow of a doubt, I\u2019d \u2026</li> <li>Given the choice, \u2026</li> <li>No way would I \u2026</li> </ul>"},{"location":"English/Vocabulary/46.RelatedWords/#ambitions-success","title":"Ambitions &amp; Success","text":"<ul> <li>to have a burning desire to</li> <li>set her heart on becoming</li> <li>hog the limelight</li> <li>hit the big time</li> <li>to have a stroke of luck</li> <li>a one-hit wonder</li> <li>paid off</li> <li>to be a legend in her lifetime</li> <li>crave fame and fortune</li> <li>hander after fame</li> <li>be in the spotlight</li> <li>to be held in high esteem</li> <li>to be renowned for</li> <li>become an overnight success</li> <li>shoot to fame / shoot to stardom</li> <li>to be set on becoming</li> <li>see aspire</li> </ul>"},{"location":"English/Vocabulary/46.RelatedWords/#comparative","title":"Comparative","text":"<p>Big difference:</p> <ul> <li>considerably</li> <li>infinitely</li> <li>decidedly</li> <li>significantly</li> <li>nowhere near: She is nowhere near as good as me at chess.</li> <li>nothing like: He is nothing like as obstinate as his brother.</li> <li>every bit as</li> </ul> <p>Small difference:</p> <ul> <li>marginally</li> </ul>"},{"location":"English/Vocabulary/46.RelatedWords/#other-phrases","title":"Other Phrases","text":"<ul> <li>all but - almost completely</li> <li>it is time, it is high time she left her boyfriend, it is about time you found a job. Also see what if, suppose, would rather, would sooner, as if, as though.</li> <li>Why not give the world a piece of your mind?</li> <li>\u2026and never drew rein until\u2026, have/keep your beady eye(s) on somebody/something - kept an eye?</li> <li>He bid her adieu - said goodbye</li> <li>fair-haired boy, blue-eyed boy - the man or boy in a group who is most liked and approved of by someone in authority</li> <li>not by any manner of means - not at all</li> <li>for two pins I\u2019d - old-fashioned used to say that you would like to do something to someone because they have annoyed you</li> </ul>"},{"location":"English/Vocabulary/46.RelatedWords/#clothes","title":"Clothes","text":"<ul> <li>cravat</li> <li>turtleneck</li> <li>tunic</li> <li>neckcloth</li> <li>waistcoat</li> <li>frock coat</li> <li>bowler hat</li> <li>broadcloth</li> </ul>"},{"location":"English/Vocabulary/46.RelatedWords/#facto-expressions","title":"Facto expressions","text":"<ul> <li>de facto</li> <li>de jure</li> <li>ipso facto</li> <li>ex post facto</li> </ul>"},{"location":"English/Vocabulary/46.RelatedWords/#pleasant","title":"Pleasant","text":"<ul> <li>For food: dainty, tasty, scrumptious, savoury</li> <li>For sound: dulcet</li> </ul>"},{"location":"English/Vocabulary/46.RelatedWords/#money","title":"Money","text":"<ul> <li>send money - remit</li> <li>peculate - spendthrift</li> </ul>"},{"location":"English/Vocabulary/46.RelatedWords/#other-synonyms","title":"Other Synonyms","text":"<ul> <li>multitudinous - plenitude - fulsome - effusive - prodigious - affluence (opulent?) - profuse - abundant - inordinate - undue - rife - overabundance, overflow - overmuch - over-plus - superfluity - surfeit - overkill - ample - surplus - excess - welter - a lot of - unconscionable - many - much - very - sore - exuberant - bristle</li> <li>calamitous - baleful - noxious - pernicious - deleterious - pestiferous</li> <li>stilted - mannered - histrionic - recondite - abstruse - sonorus - sesquipedalian - sibylline</li> <li>incendiary - igneous (?) - irascible</li> <li>ruminative - contemplative</li> <li>ubiquitous - pervasive</li> <li>garrulous - glib - voluble - loquacious - gregarious - talkative</li> <li>incontrovertible - inviolable - infallible - irrefragable - tenet - precept - premise</li> <li>pertinent - appropriate - germane - befit - behove - beseem - felicitous - aptly - expedient - featly - suitable - ant: inappropriate, infelicitous</li> <li>commodious - spacious</li> <li>succulent - luscious</li> <li>juggernaut - sockdolager</li> <li>evocative - reminiscent</li> <li>auspicious - propitious - conducive</li> <li>prolific - fecund</li> <li>taciturn - reticent - reverie</li> <li>jejune - irksome</li> <li>extort - elicit</li> <li>benightedness - nescience - illiteracy - gramarye</li> <li>kerfuffle - commotion - bustling - fuss - turmoil - tumult - clamour - brisk - mayhem - merrily - rough-and-tumble - hectic - obstreperous - raucous - noisy</li> <li>hamper - balk - hinder</li> <li>asperity - rigour</li> <li>craze - jump on the bandwagon</li> <li>vapid - inane</li> <li>wane - abate - allay (see calm)</li> <li>sumpsimus - iconoclastic - ant: mumpsimus</li> <li>nettle - vexing - irritate</li> <li>flair - knack</li> <li>shun - avoid - eschew</li> <li>potent - puissant</li> <li>blip - anomaly</li> <li>embellish - fallal - fudge the issue - bedeck - adorn - bejewel - deck out - bedizen</li> <li>salient - conspicuous - discernable - eminent - stand out - ledge - jut out - prognathous - protrude</li> <li>chagrin - doleful - shame - see deplorable</li> <li>opulent/opulence - sumptuous - affluent - exuberance</li> <li>damndest - utmost</li> <li>flaunt - splurge</li> <li>inundate - infest - deluge?</li> <li>sensitize - innervate</li> <li>regurgitate - burp - belch</li> <li>surreptitiously - artisanal - furtive? - dissemble - feign - malinger. artisan - craftsman.</li> <li>dexterity - legerdemain - sleight - adroit - maladroit (ant) - faculty for - aptitude for - propensity - nimble - agile - ruse - prowess</li> <li>intrinsic - extrinsic - inherited - trait - idiosyncrasy - indigenous - sui generis (?) - inalienable - lineament - congenital - inscape (?) - ingrained</li> <li>coalesce - cohesive - conflate - amalgamate - confluence - mingle - intermingle - intertwined - interdigitated</li> <li>ire - irate</li> <li>perpetuate - immortalise - atemporal</li> <li>dearth - scarce - meagre - paucity - scant - exiguous</li> <li>crevice - fissure</li> <li>nepotism - meritocracy - gerontocracy - kakistocracy</li> <li>correct - fix - redress - reimburse - reparation - improve - ameliorate - enhance - retaliate - face the music</li> <li>satiate - imbue</li> <li>digression - divagate - inconsequential - impertinent (?) - amiss</li> <li>florid - burgeoning</li> <li>circumspect - wary - considerate - discreet - conscientious - courteous - suave</li> <li>in bed - abed - ant: astir</li> <li>afar - afield</li> <li>afire - ablaze</li> <li>to be going on - happen - afoot</li> <li>askance - askew - oblique - aslant - aslope - athwart</li> <li>disparate - motley</li> <li>turn into - veer into</li> <li>abode - sojourn - domicile - aerie</li> <li>perfunctory - smattering - cursory - remiss - superficially - desultory - facile remark - ad hoc</li> <li>congregate - convene - muster</li> <li>divulge - unsheathe - divestiture</li> <li>parsimonious - frugal</li> <li>bane - plague</li> <li>frustrate - foil - derail - see confused</li> <li>show - evince - exhibit</li> <li>farewell - goodbye - valedictory - apopemptic</li> <li>shatter - smithereens - scrap - piece - sliver</li> <li>bequeath - testament</li> <li>stifle - trample - quell - subdue - clampdown - subjugate - curb</li> <li>moggy - feline</li> <li>invigorating - animated - spirited - inviting - lively - racy - vivacious</li> <li>tailored - custom - handcrafted - bespoke</li> <li>fate - destiny - kismet</li> <li>jab - impale</li> <li>permeable - pervious - infiltrate - percolate</li> <li>giddy - vertigo</li> <li>comprehensive - holistically</li> <li>doodle - scribble - scrawl</li> <li>jumble up - potpourri</li> <li>adage - saying - proverb</li> <li>miscreant - scoundrel</li> <li>dwindle - curtail - decrease - contract - abridge - cut</li> <li>bunglesome - cumbersome - burdensome - onerous</li> <li>environment - milieu</li> <li>rule - decree, edict</li> <li>unspoilt - pristine - intact</li> <li>worry - fret - fluster - ruffle - upset - see pain (as a verb)</li> <li>state - stipulate</li> <li>usually - customarily - as per usual</li> <li>agreement - covenant</li> <li>crowds - throngs</li> <li>middle - midst</li> <li>heed - take into account</li> <li>mysterious - enigmatic</li> <li>unfettered - unleash</li> <li>shrill - shriek - scrunch</li> <li>nurture - foster</li> <li>in regard to - in terms of</li> <li>embody - epitomise - reify - implement - enshrine - store - keep</li> <li>fortuitous - perchance - serendipity - lucky</li> <li>desolate - deserted - secluded - incommunicado - recluse - rusticate - rural - destitute/destitution/desolation - poor. lacking - wanting. do not have - be destitute of something</li> <li>condolence - commiseratingly / commiserate</li> <li>picturesque - scenic - vista</li> <li>make up - conjure something up - imagine - concoct</li> <li>turn of mind - mindset</li> <li>chimerical - impossible - infeasible</li> <li>botch - mess up - bungle - fail - debacle - folly - founder - fall short</li> <li>impress - dazzle</li> <li>a trifle - slightly</li> <li>surmounted - above</li> <li>indirect - vicarious</li> <li>geezer - chap - lad - cove - guy - man - pass (girl)</li> <li>tally with - corroborate - match - to be consistent with</li> <li>indelible - permanent - constant - indefinite - eternity - infinite</li> <li>copy - facsimile</li> <li>misty - bleary</li> <li>virago - crone</li> <li>to be full - gorge yourself (on something)</li> <li>unintentional - purposely - unwitting - deliberately - willfully - accidentally - incidentally - by chance - by accident</li> <li>incentive / incentivise - stir up - whip - abet - spark off - force - coerce - make - goad - see propel, instigate - </li> <li>adversity - vagary/vagaries - ills - whim</li> <li>sinewy - wiry</li> <li>inure somebody to something - get used to - endure?</li> <li>avert - prevent - ward off - forfend</li> <li>debacle - fail - mistake - folly</li> <li>basin - sink</li> <li>sprang to his feet - stand up</li> <li>sling - chuck - throw - fling - hurl</li> <li>whither - whence - thither</li> <li>rasp - creak - jangle</li> <li>paroxysm - effusion</li> <li>up to now - hitherto</li> <li>violate - infringe</li> <li>refrain - abstain - forbear</li> <li>\u201cused to\u201d when it is inconvenient - inure to</li> <li>droop - sag</li> <li>about - apropos of - regarding - concerning</li> <li>safe and sound - unscathed - intact</li> <li>encumber - impede - burden - make it more difficult</li> <li>cull - collate - aggregate - compile</li> <li>harsh - inclement</li> <li>be up-to-date - keep abreast of something</li> <li>wily - cunning</li> <li>allows - lends itself to</li> <li>do - commit - perpetrate</li> <li>have taste - smacks of</li> </ul>"},{"location":"English/Vocabulary/46.RelatedWords/#cv-buzz-words","title":"CV buzz words","text":"<p>Why say led when you can claim to have spearheaded, propelled, pioneered, orchestrated, officiated, optimized, instituted, inspired, headed, governed, enacted, directed, crafted, controlled, championed, built, or supervised.</p> <p>Why say you developed something when you can use cultivated, advanced, evolved, fostered, amplified, promoted, expanded, actualized, refined, augmented, enriched, extended, magnified, or strengthened.</p> <p>Why handle something when you can address, advance, alter, apply, centralize, compile, conduct, construct, coordinate, determine, execute, exhibit, formalize, govern, oversee, or establish it.</p>"},{"location":"English/Vocabulary/46.RelatedWords/#expressions-phrases","title":"Expressions / Phrases","text":"<ul> <li>Here in London we have lots of Government detectives and lots of private ones. When these fellows are at fault they come to me,</li> <li>I manage to put them on the right scent</li> <li>They have their knives into one another too - personal grudges.</li> <li>with the most minute exactness</li> <li>Hail a cab</li> <li>give vent to something</li> <li>grow up quickly out of necessity</li> <li>to defeat the ills brought about by</li> <li>\u201cI will now cut one of these pills in two,\u201d said Holmes, and drawing his penknife he suited the action to the word.</li> <li>by way of example</li> <li>resulted in an ingrained sense of the</li> <li>The sun was barely peeping through the clouds</li> <li>They were buzzards, the vultures of the west, whose coming is the forerunner of death.</li> <li>and were surrounded by crowds of the pilgrims \u2014 pale-faced meek-looking women, strong laughing children, and anxious earnest-eyed men.</li> <li>While our cab had been threading its way through a long succession of dingy streets and dreary by-ways.</li> <li>Puerile as such an exercise may seem, it sharpens the faculties.</li> <li>if only because - Media studies is regarded as a more exciting subject, if only because it\u2019s new.</li> <li>make a killing - laughing all the way to the bank</li> </ul>"},{"location":"English/Vocabulary/50.LinkingWords/","title":"Linking Words \u2014 [1], [2], [3]","text":""},{"location":"English/Vocabulary/50.LinkingWords/#showing-cause","title":"Showing cause","text":"<ul> <li>As a result of</li> <li>Due to (the fact that)</li> <li>Resulting from</li> <li>Since</li> <li>for the purpose of</li> <li>with this intention</li> <li>seeing / being that</li> <li>in view of</li> <li>to the end that</li> <li>for fear that</li> <li>owing to</li> <li>inasmuch as</li> </ul>"},{"location":"English/Vocabulary/50.LinkingWords/#showing-contrast","title":"Showing contrast","text":"<ul> <li>Yet</li> <li>Despite</li> <li>In spite of</li> <li>Even though</li> <li>By comparison</li> <li>By contrast</li> <li>Conversely</li> <li>Nevertheless</li> <li>Nonetheless</li> <li>be that as it may</li> <li>still</li> <li>albeit</li> <li>notwithstanding</li> </ul>"},{"location":"English/Vocabulary/50.LinkingWords/#emphasis-examples","title":"Emphasis / examples","text":"<ul> <li>Undoubtedly</li> <li>Indeed</li> <li>Generally</li> <li>Admittedly</li> <li>Clearly</li> <li>to put it differently</li> <li>for one thing</li> <li>as an illustration</li> <li>to put it another way</li> <li>that is to say</li> <li>notably</li> <li>namely</li> <li>chiefly</li> <li>markedly</li> <li>expressly</li> </ul>"},{"location":"English/Vocabulary/50.LinkingWords/#showing-condition","title":"Showing condition","text":"<ul> <li>Provided that</li> <li>Providing</li> <li>in the event that</li> <li>granted (that)</li> <li>on (the) condition (that)</li> <li>Unless</li> <li>Whether or not</li> </ul>"},{"location":"English/Vocabulary/50.LinkingWords/#showing-similarity","title":"Showing similarity","text":"<ul> <li>Likewise</li> <li>Similarly</li> </ul>"},{"location":"English/Vocabulary/50.LinkingWords/#showing-time-beginning-during-ending","title":"Showing time, beginning, during, ending","text":"<ul> <li>So long as</li> <li>As long as</li> <li>as soon as</li> <li>Since</li> <li>By the time</li> <li>Afterward(s)</li> <li>Meanwhile</li> <li>Meantime</li> <li>Simultaneously</li> <li>Eventually</li> <li>in due time</li> <li>hence - from now on</li> <li>henceforth</li> <li>forthwith</li> <li>straightaway</li> <li>presently - soon</li> </ul>"},{"location":"English/Vocabulary/50.LinkingWords/#adding-information","title":"Adding information","text":"<ul> <li>Besides</li> <li>as a matter of fact</li> <li>in like manner</li> <li>coupled with</li> <li>in the light of</li> <li>not to mention</li> <li>to say nothing of</li> <li>by the same token</li> <li>comparatively</li> </ul>"},{"location":"English/Vocabulary/50.LinkingWords/#showing-effect","title":"Showing effect","text":"<ul> <li>resulting in</li> <li>Consequently</li> <li>Hence</li> <li>henceforth</li> <li>Therefore</li> <li>thereupon</li> <li>forthwith</li> <li>Thus</li> <li>It gave rise to \u2026</li> <li>It brought about \u2026</li> </ul>"},{"location":"English/Vocabulary/50.LinkingWords/#showing-a-sequence","title":"Showing a sequence","text":"<ul> <li>As soon as</li> <li>Ever since</li> <li>Following</li> <li>Once</li> <li>Subsequently</li> <li>Thereafter</li> <li>To begin</li> </ul>"},{"location":"English/Vocabulary/50.LinkingWords/#showing-conclusion","title":"Showing conclusion","text":"<ul> <li>all in all</li> <li>To conclude</li> <li>as has been noted</li> <li>as can be seen</li> <li>in a word</li> <li>after all</li> <li>by and large</li> </ul>"},{"location":"English/Vocabulary/55.Conjunctions/","title":"Conjunctions","text":"<ul> <li>herein</li> <li>inward</li> <li>onward</li> <li>onwards</li> <li>outwards</li> <li>skywards</li> <li>toward</li> <li>towards</li> <li>thereafter</li> <li>thereby</li> <li>therein</li> <li>thereof</li> <li>thereto</li> <li>theretofore</li> <li>thereunder</li> <li>thereunto</li> <li>thereupon</li> <li>therewith</li> <li>upward</li> <li>upwards</li> <li>untoward</li> <li>whence</li> <li>where</li> <li>whereafter</li> <li>whereby</li> <li>wherein</li> <li>whereof</li> <li>whereto</li> <li>whereunto</li> <li>whereupon</li> <li>wherewith</li> <li>whether</li> <li>which</li> <li>while</li> </ul>"},{"location":"English/Vocabulary/90.Prefixes/","title":"Prefixes","text":"a- be- con- de- dis- en- un- aback become concede deactivate disband enable unabated abet because conceive debark - disembark disciple enacts unable abide bedeck - adorn concentration debase disconcert encamp unabridged ablaze - afire - aflame bedevil concentric debate discontent encased unaccented across bedraggled concession decadence discourse enchain unadorned adrift befall conciliate decamp discursive enchant - enchanting unadulterated afield before concur decant disembark encircle unafraid afloat befriend concurrent deceased disembodied enclose unalterable afoot beget condense decided disenchantment encode unbecoming !!! afore - aforementioned - aforesaid - aforethought begrudge condescend declaim disengage encompass unbelief afoul beguile conduce declare disentangle encore unbend afresh - anew behalf conducive decline disequilibrium encounter unblushing agape behave conduct decompose disfavour encourage unburden aglow behead confederate decoupling disfigure encrypt unchaste ahead behest conference - confer decreased disgorge encumber unerring alight - alighted behind - hindsight confide decree disgraces endanger unfazed - unruffled? alike behold confine decry disguise endear unfeeling alive behove confirm deduce disheartened endive unframed aloft bejewelled confluence deduct disincentive endurance unfrequented alone belabour conform deface disinclination enfeeble unheeded along belated confound defame disingenuous enfold unhinged aloud belittle confraternity default disinterest enforce unhistorical amass beloved confr\u00e8re defeat disjoined engage unhitched amend bemoan confront defect dislodge engender unholy amidst bemused confuses defend disloyal engrave unhurt amiss bender !!! congenial deference - defiance dismantle engross unlatched amongst beneath congestion deferment dismember engulfs unostentatious amuse benumbing congress deficient disobedience enjoin unpremeditated apace bequest - bequeath conjoining - conjoint - conjunction defy disobeying enjoy unpropitious apart berated conjurer define disown enkindle unquiet apiece besets connotations definite dispassionate enlarge unremunerative aplenty beside conquest deformation dispatch enlighten unrequited !!! aright besmeared conscience deformed disperse enlists unresectable arise beseech consensus defray - refund displease enliven unreserved around bespeak consent defuse dispose ennoble unresisted ascribe bespoke consequence degenerate dispraise enough unresisting ashamed bestow conserve degrade disproved enrage unresolvable ashore betake consider dejected disquiet enrich unresolved aside bethink considerable delay disregard enroll unresponsive askew betide consign delegate disrepute enroute unresponsiveness aslant betoken consist deliberate disrobe ensemble unresting asleep betray conspire delight dissection enshrine - perpetuate unrestrained aspire betroth constant delimit dissent enshrouded unrestricted astringent between constitution delineate dissentient ensign unrevealed asunder betwixt constrain deliver dissevered enslave unrevealing atone bewail constrict deluxe dissimilar ensnare unrewarded avenue beware construct demand dissolute ensue unrighteous averse bewilder consumer demise distally ensure unripe avert bewitch contains demystify distaste entail unsavoury avoid beyond contemplate denial distemper entangle unseaworth avowed contempt denote distend entire unsere await contend denounce disunited entitle unshackled awake contest depart entrain unsparing awhile continue depend entrap unstained contoured depicts entreat unstinting contract deplete entree unstratified contrary deploy entrench unstructured contribute deposit entrust unsubdued contrite depredation entwine untainted control depress envelope untenable convenient deprive envious untenanted converge derail envision untested convolution derange enticing - entice unthankful confection derelict - ramshackle unthinkable conflating deride unthinking contrive derive unthought descent unthreatening describe untidy desert untied deserve untill design untimely desire untrodden desist unvaried despite unvarnished despoil - detract unwarily despot unwavering detain unwell determinate - determine unyielding detest detour deviant devious devoid devour devote dewatering ex- out- over- re- up- bi- exclaim outbound overabundance relapse upbeat biaxial exempted outbreak overarching reverie upbraid bicycle exhale outburst overbalance reawakening upcoming bidirectional exhort outcast overbearing rebate update bifocal expend outcome overcome recherche upfront bilateral expense outcry overconfidence reenactment upgrade bilinear expert outcrop overconsumption regale upheaval bilingual expire outdoors overcooked rekindle reawaken uphill bimodal explain outflank overcrowded rekindled uphold bimonthly explosive outgoing overdependence relish upland binary export outgrow overdosing remorse uplift biphasic expose outgun overdrafts reproach uploading biplane expositions outhouse overestimate requite uppity bipolar expostulate outlast overexposure resent upraise biracial expound outline overhauled resound upright bisector express outlive overlap retain uprise biserial extant outlook overlook retort upriver bisexual extempore outlying overreach retorts uproar bishop extend outnumber overshadow reverie upsala biweekly extent outpace overshoot revivify upside exterior outpatient oversight reawakening upslope exterminate outperform overstated resection upstage extinct outrage overstep upstairs extort outreach overstrain upstart extract outright oversubscribed upstream extradition outshine overtaking uptake extremely outsider overthrow uptight outskirts overvalued uptown outsmart overwhelming upturn outsource overwinter upwind outspoken overworked outspread overwrought outstanding outstrip outvote outweigh outwitted outwork cor- apo- il- def- ef- manu- omni correlate apolipoprotein illicit deflate efface manufactory omnipotent correspond apomorphine illiterate deflect effete manuscript omnipresence aponeurotic illumine defrayed effluent manumission omniscience apostate apostrophe on- arch- by- ever- equi- for- mal- onboard archbishop bygone ever-changing equivalences forbear to not do malabsorption oncoming archpriest byline evergreens equidistant forgo to not do malcontent ongoing archdeacon bypass ever-growing equilateral forsakes malformed onrush archdiocese byproduct ever-increasing equivalence forsooth malfunction archangels bystander everlasting equipotential forswear malnourished byways equivalent malpractice byword maltreat ac- af- al- app- down- as- back- accede affable allocate appealing downsizing ascent backsliding acclaim affair allure appear downstream ascertain backgammon accompany affirm altered appease downloaded aspire background account affixes alterman append - prepend downgraded assail backscatter accredit affluent almost applaud - plaudits downtrodden assemble - semblance backwoodsmen accumulate afflux already applying downloading assent backbreaking accustom affray although appointment downstairs assented backstairs acknowledge affront altogether appraise assert backhanded acquaint afther always approach assess backcountry acquiescence approval assign acquis - quisling assorted acquit assure asunder co- dia- em- fore- im- coeducation diagenesis ematter foreboding immanent coefficient dialogue embark foreclose immense coequal diathesis embattled forefather impair coexist diametric embitter forefinger impale cofactor dialysate emblazoned foregather impalpable cofounded diachronically embody foreknowledge impart cogently diatonic embrace forementioned impatient cohere diacritical embroil forerunner impede - impediment coincidence diapause emetic foresee impending coinsurance diatribes employ foreshadow imperfect coital diagrammatically empower forestall imperil cooperate diameter empress impermeable coordinate diatribe impersonate copious dialogical impertinent coprocessor dialogic impiety cosine diagnostic impose covalent diagenetic impound covariance improper imprudent in- mis- ob- sur- inalienable miscarry object surcharge inanimate misapprehension obligation surfaces inapparent misappropriate obliterate surficial inapposite mischance oblong surmount incongruous mischief obnoxious surname inconspicuous misconceived obscene surpass indolent misdemeanour observe surplus induct misdoing - misdeed obsess surprise inexplicable misfire - backfire obstruct surrealism inmost misfortune obtain surrender innate misgiving obverse surround misprint misshapen misspend mistake"},{"location":"English/Vocabulary/91.Suffixes/","title":"Suffixes","text":""},{"location":"English/Vocabulary/91.Suffixes/#-escent","title":"-escent","text":"<ul> <li>fluorescent \u2014 having a type of luminescence caused by the absorption of radiation</li> <li>iridescent \u2014 having a lustrous, rainbow like play of color</li> <li>pearlescent \u2014 having a pearly luster</li> <li>opalescent \u2014 reflecting an iridescent light</li> <li>phosphorescent \u2014 the quality of luminescence without heat</li> <li>incandescent \u2014 white or glowing with intense heat</li> <li>luminescent \u2014 low temperature emission of light</li> <li>obsolescent \u2014 becoming obsolete</li> <li>quiescent \u2014 becoming quiet</li> <li>arborescent \u2014 resembling a tree</li> <li>effervescent \u2014 beginning to boil or bubble</li> <li>adolescent \u2014 becoming an adult</li> <li>convalescent \u2014 recovering health gradually after being ill</li> <li>florescent \u2014 beginning to flower</li> </ul>"},{"location":"English/Vocabulary/91.Suffixes/#-ocracyies-meritocracy","title":"-ocracy\u2018ies: meritocracy","text":"1 2 3 4 5 6 leftocracy hypocracy gerontocracy slavocracy gynocracy emocracy istocracy slaveocracy aristodemocracy squattocracy stratocracy technocracy partitocracy pigmentocracy nomocracy eurocracy theatrocracy atistocracy cosmocracy pornocracy lemocracy postdemocracy edemocracy ideocracy gyneocracy mediocracy denocracy hierocracy undemocracy prodemocracy theocracy tocracy semidemocracy socialdemocracy ochlocracy statocracy mocracy cottonocracy pseudodemocracy politocracy plutodemocracy pantocracy paedocracy femocracy quangocracy meritocracy kakistocracy teledemocracy gynecocracy administocracy christocracy idiocracy shopocracy militocracy antidemocracy sugarocracy moneyocracy monocracy partyocracy hocracy beaurocracy frailocracy plantocracy expertocracy timocracy physiocracy parentocracy aristrocracy ethnocracy pejorocracy nondemocracy autocracy kleptocracy bibliocracy pedantocracy phallocracy ocracy anocracy teleocracy pantisocracy protodemocracy landocracy partocracy biocracy marketocracy priestocracy hagiocracy adhocracy corpocracy opendemocracy liberaldemocracy domocracy sociocracy anddemocracy ristocracy thalassocracy androcracy pseudoaristocracy democracy juvenocracy artistocracy bureauocracy nocracy protocracy gynaecocracy cyberdemocracy demonocracy usurocracy bankocracy hyperdemocracy punditocracy ergatocracy millocracy burocracy plutocracy ultrademocracy virtuocracy theodemocracy mobocracy aristocracy netocracy ariftocracy corporatocracy logocracy robinocracy snobocracy ofdemocracy"},{"location":"English/Vocabulary/91.Suffixes/#-hoods-gentlehood","title":"-hood\u2019s: gentlehood","text":"7 8 9 10 11 12 monkshood twinhood ehildhood moshood disciplehood guesthood bovhood shepherdhood doctorhood namehood messengerhood verbhood intraneighborhood riderhood chlldhood eventhood beasthood rishihood kittenhood ihood hood grandfatherhood elementhood argumenthood virginhood infanthood nighborhood arhathood naborhood saviourhood bodhisattvahood bridehood thegnhood chilhood lihood cubhood sonhood godparenthood classhood prostatehood borhood walhood solutionhood nonpersonhood angelhood egohood falshood buddhahood cathood neigborhood midchildhood termhood unhood negrohood widdowhood elderhood daughterhood matehood naberhood spirithood thelikelihood antimotherhood stepmotherhood robinhood monsterhood wormhood earthhood ksatriyahood peasanthood outsiderhood gentlemanhood nonselfhood provincehood bodyhood avatarhood falfhood brahminhood seerhood falihood ildhood grandparenthood maidenhood nieghborhood livelihood systemhood ldhood lionhood ch1ldhood survivorhood girlhood neighboorhood ohildhood theoremhood herohood moranhood adepthood anhood unclehood bourhood falfehood widowerhood chidhood siddhahood lawhood actorhood aduhhood livehood firehood patienthood livelyhood priesthood shood manlihood priestesshood godhood hoyhood loglikelihood ghborhood parthood gentlehood preadulthood sainthood apprenticehood witchhood agenthood princehood salshood buddahood professionhood horsehood pcrsonhood tatterhood mountainhood neighhood hrotherhood salsehood grouphood rabbithood colthood poethood singleparenthood teenagerhood authorhood nationhood prophethood fatherhood brutehood apostlehood foalhood nichood warriorhood knighthood personhood godmanhood soulhood fallhood ladyhood brahmanhood familyhood ancestorhood neigbourhood dominionhood subsethood elitehood kinghood strangerhood ownhood unlikelihood clienthood entityhood farhood humanhood neighbothood quasilikelihood specieshood aunthood novicehood pothood languagehood islandhood sehood counterparthood thinghood postparenthood celebrityhood neighhourhood brahmahood siblinghood bloodbrotherhood beggarhood pseudolikelihood tablehood burgherhood youthhood postchildhood couplehood substancehood guruhood signhood beinghood maximumlikelihood likelthood neighhorhood terhood indianhood nighbourhood cronehood orahood bachelorhood swinehood brotherhood ghosthood spinsterhood mashood hopehood saviorhood peoplehood cowhood doghood brahmanahood godfatherhood falsehood sisterhood chood seniorhood brothethood subadulthood nounhood erhood womenhood neghbourhood greenhood muslimhood hardihood priefthood nelghborhood answerhood malehood singlehood wordhood neighbouthood stepfatherhood adulthood barrierhood niggerhood wifehood likelyhood topichood victimhood chattelhood ikelihood sivahood toddlerhood nonmotherhood fumehood underhood teacherhood widowhood otherhood nethood neighborhood mcwhood audiencehood selfhood nationstatehood likehood ridinghood yahood chiefhood interneighborhood froghood pagehood femalehood slavehood queenhood soldierhood arabhood greekhood creatorhood theneighborhood deafhood gianthood bhood lustihood eighborhood livlihood rhood mayhood orhood serfhood physicianhood animalhood jivahood highpriesthood motherhood coparenthood thood nonneighborhood subjecthood tathagatahood lifehood headhood therhood midadulthood teenagehood supermanhood preparenthood cousinhood hermithood birdhood loverhood masterhood mahood orphanhood folkhood demonhood plannedparenthood studenthood ofwomanhood constituenthood racehood worldhood likelihood matronhood maidhood puppyhood squirehood ighborhood manhood fairyhood chickenhood nunhood citizenhood mothethood planethood kshatriyahood sentencehood faljhood liklyhood dhood spousehood alienhood powerhood swanhood neighorhood germanhood apehood creaturehood attawanhood hildhood middlechildhood printhood arthood nerhood subneighborhood dahood snakehood sagehood christhood refugeehood teenhood treehood youngmanhood calfhood kidhood holyhood statehood dragonhood neighourhood objecthood parenthood ofchildhood artisthood liklihood childhood fingerhood tigerhood hobbledehoyhood whood willinghood foolhardihood grandmotherhood husbandhood lahood oxyhood cityhood monkhood livilihood hborhood preisthood enthood nederhood boyhood neighbourhood shamanhood nerghborhood earlychildhood falschood facthood neghborhood babyhood womanhood servanthood prestatehood nonparenthood stepparenthood monkeyhood mawhood"},{"location":"English/Vocabulary/91.Suffixes/#-journs-sojourn","title":"-journ\u2019s: sojourn","text":"<ul> <li>sojourn</li> <li>adjourn</li> <li>rejourn</li> </ul>"},{"location":"English/Vocabulary/91.Suffixes/#-nounce-denounce","title":"-nounce: denounce","text":"<ul> <li>enounce</li> <li>denounce</li> <li>pronounce</li> <li>renounce</li> <li>repronounce</li> <li>mispronounce</li> <li>announce</li> <li>anounce</li> </ul>"},{"location":"English/Vocabulary/91.Suffixes/#-somes-queersome","title":"-some\u2019s: queersome","text":"13 14 15 16 17 18 handsome trouhlesome burthensome ubiquitinproteasome unventuresome pinosome rhabdosome proacrosome timorsome lothsome oligonucleosome dictyosome kansome schistosome hindersome plasmosome cytosome hemidesmosome monosome primosome darksome informosome ychromosome healthsome haudsome repairosome replisome oosome osome cumhersome fortysome toilsome lonesome cellulosome hromosome troublsome andsome phycobilisome venturesome shuddersome lothesome torturesome frightsome chrisome longsome bersome heterochromosome awsome lithosome nonburdensome mitosome toylesome frolicksome proteoliposome immunoliposome autosome lesome atsome nontroublesome ifsome disome apoptosome immunoproteasome glyoxysome fullsome thermosome niosome ransome minichromosome ayresome sarcosome quarrelsome aggresome fiercesome spliceosome premelanosome hurdensome mettlesome unwholesome irksome plaguesome lumbersome halesome isochromosome chronosome lissome loathsome unwholsome furthersome waesome striosome centrosome leucosome degradosome ugsome dinsome tricksome brightsome burdensome polynucleosome wearysome stichosome hydrosome holsome urosome blithesome relaxosome melsome leisome ansome phagosome sandsome raunsome eightsome blythesome symbiosome gildersome gladsome awesome resome havesome harnsome wearisome whitsome overburdensome phallosome bransome joysome winsome endosome loansome phagolysosome gamesome chloragosome handsome blossome playsome chrysome persome boresome dubersome vexsome insome meddlesome tosome forsome lightsome fusome randsome thatsome lewsome microsome cumbersome threesome kirisome eaglesome perisome unhandsome flavoursome parenthesome nectosome antischistosome paleosome foursome carboxysome consome humorsome trypanosome doubtsome letsome kinetosome drearisome prosome issome isome dexamethasome aresome butsome gruesome unadventuresome spherosome enhanceosome untroublesome transpososome chomosome idiosome elaiosome wondersome assome bucksome troblesome fulsome hydrogenosome dolesome darkesome wheedlesome polyribosome nucleosome loathesome fromsome some bansome sixsome flaysome hounsome throublesome withsome timbersome bloxsome sexchromosome newsome mesosome lithesome toylsome jetsome chromatosome bandsome gonosome liposome frolicsome reapsome inflammasome ventursome chromosome karyosome ribosome outsome phyllosome virosome besome intasome ledsome polysome lsome ticklesome thensome rollicksome balsome tarsome welsome autolysosome pranksome quantasome desmosome chromsome blithsome onsome jsome noisesome opisthosome esome ownsome phragmosome fearsome lovesome fsome wholesome chlorosome protosome transome csome lysosome adventuresome mosome bunglesome peculiarsome turesome riddlesome holesome blesome hansome cuddlesome leptosome tiresome exosome editosome proteasome unburdensome eansome troublesome cytolysome jussome receptosome folsome flavorsome neosome laboursome episome delightsome magnetosome densome ambisome lettsome signalosome onesome fensome oversome hahnsome trisome noysome relsome chondriosome hassome cyclosome woesome proteosome epsome humoursome worrysome lichtsome gleesome cephalosome podosome tsome milsome angiosome nbosome autophagosome othersome bysome landsome dangersome grewsome rsome woodsome combersome asome worrisome yrkesome offsome thecosome invertasome toothsome ssome unhansome acrosome sansome vsome tysome lomasome rowsome xchromosome bsome ofsome eosome wholsome laborsome randlesome bosome melanosome vinsome peroxisome metasome diplosome lifesome hadsome twasome olesome bothersome axosome unquarrelsome branksome leasome twentysome nettlesome telosome cbromosome timersome ectosome muddlesome palaeosome noisome trophosome glycosome twosome fivesome orsome jessome idiochromosome synaptosome leesome mononucleosome irkesome quarelsome nandsome unholsome heartsome choanosome likesome microchromosome thirtysome"},{"location":"English/Vocabulary/91.Suffixes/#-izens-bedizen","title":"-izen\u2019s: bedizen","text":""},{"location":"Linux/alternatives/","title":"Alternatives","text":""},{"location":"Linux/alternatives/#great","title":"Great","text":"<ul> <li><code>cat</code>: <code>bat</code></li> <li><code>du</code>: <code>ncdu</code> \u2014 interactive <code>du</code></li> <li><code>df</code>: <code>duf</code></li> </ul>"},{"location":"Linux/alternatives/#staging","title":"Staging","text":"<ul> <li><code>find</code>: <code>fd</code></li> <li><code>grep</code>: <code>ag</code>, <code>fzf</code></li> <li><code>top</code>: <code>bottom</code>, <code>glances</code>, <code>gtop</code></li> <li> <p>benchmarking \u2014 <code>hyperfine</code></p> </li> <li> <p>diff: <code>icdiff</code></p> </li> </ul>"},{"location":"Linux/alternatives/#other","title":"Other","text":"<ul> <li><code>ps</code>: <code>procs</code></li> <li><code>ls</code>: <code>exa</code></li> <li><code>du</code>: <code>dust</code></li> </ul>"},{"location":"Linux/apt_repos/","title":"apt repos","text":""},{"location":"Linux/apt_repos/#list-installed-packages","title":"List installed packages","text":"<pre><code>apt list --installed\n</code></pre>"},{"location":"Linux/apt_repos/#find-package-by-name-apt-search-qt5-dev","title":"Find package by name: <code>apt search \"qt.*5.*-dev\"</code>","text":"<p>For example find all <code>qt5 dev</code> packages needed for development: <pre><code>apt search \"qt.*5.*-dev\" | grep -v \"i386\" | grep -v \"py\"\n</code></pre></p> <p>or find all corresponding packages with debug symbols: <pre><code>apt search \"qt.*5.*-dbg\" | grep -v \"i386\"\n</code></pre></p>"},{"location":"Linux/apt_repos/#find-package-by-name-apt-search-names-only","title":"Find package by name: <code>apt search --names-only</code>","text":"<p>Another alternative, to search only in package names: <pre><code>apt search --names-only python\napt list | grep -i bazel\n</code></pre></p>"},{"location":"Linux/apt_repos/#find-package-by-file-apt-file-find-or-dpkg-s","title":"Find package by file: <code>apt-file find</code> or <code>dpkg -S</code>","text":"apt-filedpkg <pre><code>$ apt-file find psql | grep so\nlibqt4-sql-psql: /usr/lib/x86_64-linux-gnu/qt4/plugins/sqldrivers/libqsqlpsql.so\n</code></pre> <pre><code>$ dpkg -S /usr/bin/nvidia-container-cli\nlibnvidia-container-tools: /usr/bin/nvidia-container-cli\n</code></pre>"},{"location":"Linux/apt_repos/#find-files-by-package-apt-file-list-or-dpkg-l","title":"Find files by package: <code>apt-file list</code> or <code>dpkg -L</code>","text":"apt-filedpkg <pre><code>$ apt-file list davfs2\ndavfs2: /etc/davfs2/davfs2.conf\n...\n</code></pre> <pre><code>$ dpkg -L puppet-agent\n/etc/default\n...\n</code></pre>"},{"location":"Linux/apt_repos/#add-a-repo","title":"Add a repo","text":"<pre><code>sudo add-apt-repository \"deb http://us.archive.ubuntu.com/ubuntu/ saucy universe multiverse\"\n</code></pre>"},{"location":"Linux/apt_repos/#list-all-active-repositories","title":"List all active repositories","text":"<pre><code>grep -v '^$\\|^\\s*\\#' /etc/apt/sources.list /etc/apt/sources.list.d/*\n</code></pre>"},{"location":"Linux/apt_repos/#remove-a-repo","title":"Remove a repo","text":"<pre><code>sudo apt-add-repository --remove \"deb http://llvm.org/apt/utopic/ llvm-toolchain-utopic main\"\n</code></pre> <p>Remove both \u2014 packages installed from a repo and repo itself: <pre><code>sudo ppa-purge ppa:webapps/preview\n</code></pre></p>"},{"location":"Linux/apt_repos/#securely-add-repo-keys","title":"Securely add repo keys","text":"<p>Source articles: Ubuntu.SecureApt, Debian.SecureApt.</p> <p>Checking trust path:</p> <pre><code>$ GET https://download.owncloud.org/download/repositories/8.2/Ubuntu_15.10/Release.key | gpg --import\n$ gpg --check-sigs --fingerprint 5180350A\npub   2048R/5180350A 2015-10-08 [expires: 2017-12-16]\n      Key fingerprint = BCEC A903 25B0 72AB 1245  F739 AB7C 32C3 5180 350A\nuid                  ce OBS Project &lt;ce@s2.owncloud.com&gt;\nsig!3        5180350A 2015-10-08  ce OBS Project &lt;ce@s2.owncloud.com&gt;\n\n1 signature not checked due to a missing key\n</code></pre> <p>Now you can verify and check imported key info, download other keys, for example:</p> <pre><code>$ gpg --list-sigs --fingerprint 5180350A\npub   2048R/5180350A 2015-10-08 [expires: 2017-12-16]\n      Key fingerprint = BCEC A903 25B0 72AB 1245  F739 AB7C 32C3 5180 350A\nuid                  ce OBS Project &lt;ce@s2.owncloud.com&gt;\nsig 3        5180350A 2015-10-08  ce OBS Project &lt;ce@s2.owncloud.com&gt;\nsig 3        479BC94B 2015-10-08  [User ID not found]\n\n\n$ gpg --recv-keys 479BC94B\ngpg: requesting key 479BC94B from hkp server keys.gnupg.net\ngpg: key 479BC94B: public key \"ownCloud build service &lt;obsrun@localhost&gt;\" imported\ngpg: Total number processed: 1\ngpg:               imported: 1  (RSA: 1)\n\n$ gpg --check-sigs --fingerprint 5180350A\npub   2048R/5180350A 2015-10-08 [expires: 2017-12-16]\n      Key fingerprint = BCEC A903 25B0 72AB 1245  F739 AB7C 32C3 5180 350A\nuid                  ce OBS Project &lt;ce@s2.owncloud.com&gt;\nsig!3        5180350A 2015-10-08  ce OBS Project &lt;ce@s2.owncloud.com&gt;\nsig!3        479BC94B 2015-10-08  ownCloud build service &lt;obsrun@localhost&gt;\n</code></pre> <p>and then I check the trust path from my key to at least one of the keys used to sign the archive key. Only if I find an acceptable path will I then tell APT to trust the key:</p> <pre><code>$ gpg --export -a 5180350A | sudo apt-key add -\n</code></pre>"},{"location":"Linux/certificates/","title":"Certificates","text":""},{"location":"Linux/certificates/#kubernetes","title":"Kubernetes","text":"<p>source</p> <p>Using CloudFlare\u2019s PKI toolkit, cfssl</p> Generate Certificate Authority that can be used to generate additional TLS certificates ca-config.json<pre><code>{\n  \"signing\": {\n    \"default\": {\n      \"expiry\": \"8760h\"\n    },\n    \"profiles\": {\n      \"kubernetes\": {\n        \"usages\": [\"signing\", \"key encipherment\", \"server auth\", \"client auth\"],\n        \"expiry\": \"8760h\"\n      }\n    }\n  }\n}\n</code></pre> ca-csr.json<pre><code>{\n  \"CN\": \"Kubernetes\",\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    {\n      \"C\": \"US\",\n      \"L\": \"Portland\",\n      \"O\": \"Kubernetes\",\n      \"OU\": \"CA\",\n      \"ST\": \"Oregon\"\n    }\n  ]\n}\n</code></pre> <pre><code>cfssl gencert -initca ca-csr.json | cfssljson -bare ca\n</code></pre> Generate client and server certificates for each Kubernetes component and a client certificate for the Kubernetes admin user <p>Admin:</p> admin-csr.json<pre><code>{\n  \"CN\": \"admin\",\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    {\n      \"C\": \"US\",\n      \"L\": \"Portland\",\n      \"O\": \"system:masters\",\n      \"OU\": \"Kubernetes The Hard Way\",\n      \"ST\": \"Oregon\"\n    }\n  ]\n}\n</code></pre> <pre><code>cfssl gencert \\\n  -ca=ca.pem \\\n  -ca-key=ca-key.pem \\\n  -config=ca-config.json \\\n  -profile=kubernetes \\\n  admin-csr.json | cfssljson -bare admin\n</code></pre> <p>Client / Node certificates:</p> <pre><code>for instance in worker-0 worker-1 worker-2; do\n   cat &gt; ${instance}-csr.json &lt;&lt;EOF\n      {\n        \"CN\": \"system:node:${instance}\",\n        \"key\": {\n          \"algo\": \"rsa\",\n          \"size\": 2048\n        },\n        \"names\": [\n          {\n            \"C\": \"US\",\n            \"L\": \"Portland\",\n            \"O\": \"system:nodes\",\n            \"OU\": \"Kubernetes The Hard Way\",\n            \"ST\": \"Oregon\"\n          }\n        ]\n      }\n   EOF\n\n   EXTERNAL_IP=$(gcloud compute instances describe ${instance} \\\n     --format 'value(networkInterfaces[0].accessConfigs[0].natIP)')\n\n   INTERNAL_IP=$(gcloud compute instances describe ${instance} \\\n     --format 'value(networkInterfaces[0].networkIP)')\n\n   cfssl gencert \\\n     -ca=ca.pem \\\n     -ca-key=ca-key.pem \\\n     -config=ca-config.json \\\n     -hostname=${instance},${EXTERNAL_IP},${INTERNAL_IP} \\\n     -profile=kubernetes \\\n     ${instance}-csr.json | cfssljson -bare ${instance}\ndone\n</code></pre>"},{"location":"Linux/disks/","title":"Disks","text":""},{"location":"Linux/disks/#format-a-disk","title":"Format a disk","text":"<ul> <li> <p>gpt partitions:</p> <pre><code>sudo parted /dev/sda mklabel gpt\nsudo parted -a opt /dev/sda mkpart primary 0% 100%\nsudo mkfs.ext4 -L TempStorage /dev/sda1\n</code></pre> </li> <li> <p>mbr/dos</p> <pre><code>sudo parted /dev/sdb mklabel msdos\nparted -a opt /dev/sdb mkpart primary 0% 100%\nsudo mkfs.vfat /dev/sdb1\n</code></pre> <p>You might need to change partition type to HPFS//NFFS/exFAT (you can check it in the output of <code>sudo fdisk -l /dev/sdb</code>):</p> <pre><code>set dev /dev/sdb\nsudo dd if=/dev/zero of=$dev bs=4M status=progress\nsudo sync\nsudo parted --script $dev mklabel msdos\nsudo parted --script -a opt $dev mkpart primary 0% 100%\necho -e \"t\\n7\\nw\" | sudo fdisk $dev\nsudo mkfs.exfat -L ASDF $dev\"1\"\nsudo sync\n</code></pre> </li> </ul>"},{"location":"Linux/disks/#move-image-to-a-drive","title":"Move image to a drive","text":"<pre><code>dd if=./src-filename of=/dev/sdb status=progress conv=fsync\n</code></pre>"},{"location":"Linux/disks/#get-the-list-of-physical-disks","title":"Get the list of physical disks","text":"lsblk -d -o NAME,TYPE,SIZE -e 7,11<pre><code>NAME    TYPE   SIZE\nsda     disk 223.6G\nnvme0n1 disk   3.6T\n</code></pre> sudo lshw -class disk<pre><code>  *-namespace:2\n       description: NVMe disk\n       physical id: 1\n       bus info: nvme@0:1\n       logical name: /dev/nvme0n1\n       size: 3726GiB (4TB)\n  *-disk\n       description: ATA Disk\n       product: INTEL SSDSC2\n       physical id: 0.0.0\n       bus info: scsi@1:0.0.0\n       logical name: /dev/sda\n</code></pre> <p><code>lsblk --fs</code> \u2014 shows all block devices along with uuids.</p>"},{"location":"Linux/disks/#erase-disk","title":"Erase disk","text":""},{"location":"Linux/disks/#hdd-sd-cards","title":"HDD &amp; SD cards","text":"<ul> <li><code>sudo dd if=/dev/zero of=/dev/sdX bs=1M status=progress</code></li> <li><code>sudo shred -v -n 3 /dev/sdX</code> (might need to install <code>coreutils</code>)</li> </ul>"},{"location":"Linux/disks/#nvme","title":"NVME","text":"<ul> <li><code>sudo nvme format /dev/nvme0n1 --ses=1  # or --ses=2</code> (might need to install <code>nvme-cli</code>)</li> </ul>"},{"location":"Linux/disks/#resize-a-gpt-with-a-ext4","title":"Resize a GPT with a ext4","text":"<ol> <li>Run parted: <code>parted /dev/sdX</code></li> <li>Change display unit to sectors: <code>unit s</code>.</li> <li>Print current partition table and note the start sector for your partition: <code>p</code></li> <li>Delete your partition (won\u2019t delete the data or filesystem): <code>rm &lt;number&gt;</code></li> <li>Recreate the partition with the starting sector from above: <code>mkpart primary &lt;start&gt; &lt;end&gt;</code></li> <li>Exit parted: <code>quit</code></li> <li>Check the filesystem: <code>sudo e2fsck -f /dev/sdXX</code></li> <li>Resize filesystem: <code>sudo resize2fs /dev/sdXX</code></li> </ol>"},{"location":"Linux/disks/#add-encrypted-disk","title":"Add encrypted disk","text":"<pre><code>sudo cryptsetup luksFormat /dev/nvme0n1\nsudo cryptsetup open /dev/nvme0n1 nvme0_crypt\nsudo mkfs.ext4 -L VortexHome /dev/mapper/nvme0_crypt\n</code></pre> <p>then add it in <code>/etc/crypttab</code>:</p> sudo nano /etc/crypttab<pre><code>nvme0_crypt UUID=dd3a78d4-1085-422f-abd4-e42a1bf50073 none luks,discard\n\n# Or\n# nvme0_crypt UUID=c652c9c4-54a0-440f-824a-ec1d8e0d2d50 none luks,keyscript=/usr/share/yubikey-luks/ykluks-keyscript,discard\n</code></pre> <p>Update initramfs: <code>sudo update-initramfs -u</code></p> <p>and finally in fstab:</p> sudo nano /etc/fstab<pre><code>/dev/mapper/nvme0_crypt    /home2          ext4    errors=remount-ro 0       1\n</code></pre>"},{"location":"Linux/disks/#disk-health-checks","title":"Disk health checks","text":""},{"location":"Linux/disks/#non-destructive-disk-health-check-with-smartctl","title":"Non-destructive disk health check (with <code>smartctl</code>)","text":"<ul> <li>Start test: <code>sudo smartctl -t long /dev/sdf # or sudo smartctl -t short /dev/sdf</code></li> <li>Check results: <code>sudo smartctl -l selftest /dev/sdf or sudo smartctl -a /dev/sdf</code></li> </ul> <p>Note. If <code>smartctl</code> test says that disk is healthy, it does not necessarily mean so. See the section below.</p>"},{"location":"Linux/disks/#destructive-disk-health-check-with-badblocks","title":"Destructive disk health check (with <code>badblocks</code>)","text":"<p>Docs: Source1, Source2</p> <pre><code>sudo badblocks -c 32768 -p 3 -b 4096 -wvs /dev/sdX # (1)!\nReading and comparing: done\nTesting with pattern 0x55: done\nReading and comparing: done\nTesting with pattern 0xff: done\nReading and comparing: done\nTesting with pattern 0x00: done\nReading and comparing: 1506379640ne, 51:25:53 elapsed. (0/0/0 errors)\n1506379641ne, 51:25:56 elapsed. (1/0/0 errors)\n1506379642ne, 51:25:59 elapsed. (2/0/0 errors)\n1506379643ne, 51:26:02 elapsed. (3/0/0 errors)\n</code></pre> <ol> <li> <ul> <li> <p><code>-b</code> \u2013 block size.</p> </li> <li> <p><code>-w</code> \u2014 use write-mode test.</p> </li> <li> <p><code>-c</code> \u2014 is the number of blocks which are tested at a time.</p> </li> <li> <p><code>-v</code> \u2014verbose mode.</p> </li> <li> <p><code>-s</code> \u2014 show the progress.</p> </li> <li> <p><code>-p</code> \u2014 number of passes.</p> </li> </ul> </li> </ol> <p>Later, you can verify unreadability of particular sector with <code>hdparm</code> command:</p> <pre><code>sudo hdparm --read-sector 3012759284 /dev/sdf # (1)!\n/dev/sdf:\nreading sector 3012759284: FAILED: Input/output error\n</code></pre> <ol> <li> <p>Note that if do not set <code>-b</code> option properly <code>badblocks</code>, you have to adjust sector here.</p> <p>The default block size in badblocks is 1024 bytes (from <code>badblocks</code> man: <code>-b block-size Specify the size of blocks in bytes. The default is 1024.</code>), whereas Logical block size is 512 bytes (<code>sudo hdparm -I /dev/sdf: Logical  Sector size: 512 bytes</code>), hence 3012759284 (= 1506379642 * 2).</p> </li> </ol>"},{"location":"Linux/disks/#mdadm-raid","title":"mdadm &amp; RAID","text":""},{"location":"Linux/disks/#replacing-a-faultyfailing-hdd-in-an-mdadm-raid","title":"Replacing a faulty/failing HDD in an mdadm RAID","text":"<p>Docs: Source1, Source2.</p> <p>Determine removed by mdadm disk:</p> <ul> <li>How to determine removed by mdadm disk.</li> <li>Light up the led of the failed HDD (assuming you know the failed disk, see the link above): <code>cat /dev/sdz &gt;/dev/null</code></li> </ul>"},{"location":"Linux/network/","title":"Network","text":""},{"location":"Linux/network/#utils-tools","title":"Utils &amp; tools","text":""},{"location":"Linux/network/#ip-commands","title":"ip commands","text":"<p>10 Useful IP commands:</p> <ul> <li><code>ip addr show</code> \u2014 show all IP Addresses of all interfaces.</li> <li><code>ip addr add 192.168.50.5 dev eth1</code> \u2014 assign a IP Address to a specific interface.</li> <li><code>ip addr del 192.168.50.5/24 dev eth1</code> \u2014 remove an IP Address.</li> <li><code>ip link set eth1 up</code> \u2014 enable a network interface.</li> <li><code>ip link set eth1 down</code> \u2014 disable a network interface.</li> <li><code>ip route show</code> \u2014 show route table.</li> <li><code>ip route add 10.10.20.0/24 via 192.168.50.100 dev eth0</code> \u2014 add a static route.</li> <li><code>ip route del 10.10.20.0/24</code> \u2014 remove a static route.</li> <li><code>ip route add default via 192.168.50.100</code> \u2014 add default gateway.</li> </ul>"},{"location":"Linux/network/#ipftrace2","title":"ipftrace2","text":"<p>ipftrace2 is a tool which allows you to trace the journey of packets inside the Linux kernel</p>"},{"location":"Linux/network/#container-kubernetes-network","title":"Container &amp; Kubernetes Network","text":"<p>A great explanation of how networking is done in k8s clusters.</p>"},{"location":"Linux/secure_boot/","title":"Truly  Secure boot","text":"<p>TL;DR</p> <p>We are going to sign everything pertaining to the boot process (including <code>grub.cfg</code> and <code>initrd</code>) with your own keys.</p> <p>You can jump directly to Step-by-step instructions.</p>"},{"location":"Linux/secure_boot/#boot-process-digest","title":"Boot process \u2014 digest","text":""},{"location":"Linux/secure_boot/#cpu-firmware","title":"CPU firmware","text":"<ol> <li> <p>Loosely speaking, a \u201cCPU inside CPU\u201d starts first. More precisely, Firmware inside PCH (1) or BMC (2) is executed first. Intel Management Engine runs in the PCH and starts before the CPU.</p> <ol> <li>platform controller hub</li> <li>baseboard management controller</li> </ol> </li> <li> <p>It performs basic hardware configuration and allows the CPU to come out of reset.</p> </li> <li> <p>The first instruction that CPU executes is the instruction from 16-bytes below 4GB.</p> What is there? <ul> <li>SPI flash memory is mapped to the top of the 32-bit address space.</li> <li>Reads are forwarded by the chipset to the flash device.</li> <li>The instruction at 0xFFFFFFF0 is a JMP instruction to the start of the UEFI platform initialization code (SEC phase)</li> </ul> <p>Other relevant low-level things and keywords:</p> <ul> <li>The Boot Block: SEC and PEI phase code.</li> <li>Variable store for UEFI Variables and default settings.</li> <li>SEC Phase sets up the UEFI environment and passes control to PEI Core.</li> <li>PEI Dispatcher dispatches PEI Modules (PEIMs) that perform early hardware and memory initialization.</li> <li>PEI Core passes control to DXE Core.</li> <li>DXE drivers perform additional hardware initialization and configuration.</li> </ul> </li> </ol>"},{"location":"Linux/secure_boot/#uefi-firmware","title":"UEFI firmware","text":"<p>UEFI firmware allows users to enroll (add) their own SSL certificates (this should be protected with a password). So, given certificates it verifies everything up to (and including) first-stage bootloader (<code>shim</code>).</p> <ol> <li> <p>UEFI firmware mounts first partition (1). UEFI-bootable binaries are then stored as files in the <code>/EFI/BOOT/</code> directory.</p> <ol> <li>The first partition is expected to have partition ID of <code>0xEF00</code> and be formatted as a FAT32 filesystem</li> </ol> </li> <li> <p>UEFI firmware verifies signatures of the EFI executables using SSL certificates and hashsums.</p> <ul> <li>There are several types of certificates and hashsum stores:<ul> <li>Platform Key (PK) stores (usually) a single certificate. Does not sign executables directly, but signs other keys.</li> <li>Key Exchange Key (KEK) can store multiple certificates.</li> <li>Blacklist (dbx) and whitelist (db). They can store both certificates and hashsums.</li> </ul> </li> </ul> What is certificate and how UEFI verifies signatures? <p>A certificate is a public key. Below is how signing and verification works. Remember that only you have private key, and everyone else (including UEFI firmware) - public key.</p> <ul> <li>Signing: You calculate a hash of a module and encrypt it with your private key. Then you attach the result   (signature) to a file (UEFI module in our case).</li> <li>Verification: The idea is to get (presumably) the same hash in two independent ways and compare them.    The 1st way: decrypt the attached signature with the public key (which UEFI has). The 2nd way: calculate hash    ourselves (given the module file). If they are equal UEFI knows that the module was created and placed there by    whoever poses and controls private key.</li> </ul> <p>A certificates has certain capabilities. For example, certificates generated by <code>update-secureboot-policy</code> can only sign kernel modules (KeyUsage OID (1.3.6.1.4.1.2312.16.1.2)). They are stored at local file-system.</p> </li> <li> <p>(Unless UEFI firmware is configured for multi-boot), UEFI executes a EFI binary with the default name, which is   <code>BOOTX64.EFI</code>. In case of Linux, the binary is <code>shim</code>.</p> <ul> <li>To add a new EFI binary to your firmware\u2019s list of available binaries, you should use the <code>efibootmgr</code> utility.</li> </ul> </li> </ol> <p>At this point, there are two alternatives: (1) control can be passed to shim, which passes control to grub, which passes control to kernel or (2) control can be passed directly to kernel (EFI Stub &amp; Systemd-boot):</p> Shim -&gt; GRUB -&gt; Kernel &amp; InitrdEFI Stub &amp; Systemd-boot <p>There is another option, however. Linux kernel is provided as a EFI binary, and therefore can be verified and loaded directly by UEFI firmware. This has a number of advantages:</p> <ul> <li>This approach is much simpler</li> <li>fewer moving parts</li> <li> <p>faster boots (1)</p> <ol> <li>in qemu VM 57s in case of shim/GRUB vs 11s in case of unified kernel image</li> </ol> </li> <li> <p>decreased surface for helpful \u201cfeatures\u201d (such as MokManager)</p> </li> <li>Fewer files to sign:<ul> <li>surface for mistake is less.</li> <li>no need to create GPG keys.</li> </ul> </li> </ul> <p>The only thing that needs to be addressed in this scenario is initrd. Luckily, it is possible to create a \u201cunified kernel image\u201d that includes everything that is needed to start kernel (kernel itself, initrd, kernel start options). The image then can be signed as usual and loaded by UEFI firmware.</p> <p>To give you a taste of how simpler this option is, below a complete example of making non-unified kernel boot: (in case of unified kernel image, we need one invocation of <code>objcopy</code> command before):</p> <pre><code>$ efibootmgr -c -L MyEFIStubLinux -l /vmlinuz.efi -u 'initrd=\\initrd.img root=/dev/mapper/vgkubuntu-root ro'\n</code></pre> <ul> <li>Where the value of the <code>-u</code> option can be copied from <code>/proc/cmdline</code>.</li> <li>And <code>vmlinuz.efi</code> and <code>initrd.img</code> should be copied from <code>/boot</code> to <code>/boot/efi</code>.</li> </ul> Other info <p>Note, that some TPMs (Titan M) can start even before (1), checking integrity of itself and UEFI, and only then starting CPU.</p> <p>There are also several types of boot:</p> <ul> <li>Thorough or Full Boot provides the maximum amount of protection by using Secure Boot throughout the boot process. Integrity, signature, and hash checks are performed.</li> <li>Fast Boot or Minimal Boot minimizes boot time by skipping numerous checks, which may or may not include Secure Boot checks. Boot speed is prioritized over some security features and/or additional features and peripheral support at boot time. Malware like LoJax can slip by on some systems (Schlej 2018). When Fast Boot is a configurable toggle, disabling Fast Boot typically results in Thorough Boot.</li> <li>Automatic Boot attempts to detect when changes have occurred to the early stages of UEFI boot. Automatic Boot invokes Fast/Minimal Boot when no changes are detected. Thorough/Full Boot is invoked once after each significant change is detected.</li> </ul>"},{"location":"Linux/secure_boot/#shim","title":"Shim","text":"<p>In addition to the aforementioned PK/KEK/DB/DBX, <code>shim</code> uses its own storage of keys and certificates called MOK (1). Shim is supposed to verify everything else: second-stage bootloader (GRUB), kernel, kernel drivers. Shim can:</p> <ol> <li>machine owner keys</li> </ol> <ul> <li>start <code>MokManager</code>. <code>MokManager</code> allows a user to enroll keys, remove trusted keys, enroll binary hashes and toggle Secure Boot validation at the <code>shim</code> level. Unfortunately, <code>MokManager</code> does not have any protection from an adversary \u2014 it allows anyone to enroll new certificates, and does not require any protection \u2014 it is too helpful. So, in this guide we will remove it completely.</li> <li>or <code>shim</code><ol> <li>verifies GRUB and Linux kernel.</li> <li>and then passes execution to GRUB.</li> </ol> </li> </ul>"},{"location":"Linux/secure_boot/#grub","title":"GRUB","text":"<p>This is the point where UEFI\u2019s SecureBoot starts to fade away. While GRUB performs checks of some files (linux kernel, <code>vmlinuz</code>) using UEFI\u2019s certificates, it does not check everything that it loads and uses with UEFI certificates. Luckily, GRUB has an option to check everything that it loads with GPG keys (a mechanism that is completely unrelated to UEFI certificates, but conceptually similar to what UEFI does). So, GRUB:</p> <ol> <li>Reads and loads its own config from <code>/boot/grub/</code> (which means that the the configs has to be protected from tampering \u2014 we are going to sign GRUB config with GPG).</li> <li>Provides user with a bunch of options (including rescue shell) as to how to proceed (so, this is another thing that has to be protected \u2014 we will create a special GRUB superuser + password).</li> <li> <p>Loads initrd (1) and kernel in memory and passes execution to the kernel (we will sign both initrd and kernel with GPG). Only kernel is verified with UEFI certificates in default configuration. So, Initrd should be signed with GPG.</p> <ol> <li>initrd is a tiny part of user-space of a real OS, the only purposes of which is to figure-out how to proceed booting     (mounting disks, decrypting, loading from NFS, handling DHCP and so on\u2026). The <code>init</code> script is the main entry point.     More info here.</li> </ol> </li> </ol>"},{"location":"Linux/secure_boot/#kernel-initrd","title":"Kernel &amp; Initrd","text":"<p>Kernel then:</p> <ol> <li>Executes init script from initrd.</li> <li>The init scripts does whatever it needs to mount real FS.</li> <li>And finally, replaces itself with real <code>/sbin/init</code> from real FS.</li> </ol>"},{"location":"Linux/secure_boot/#the-plan","title":"The plan","text":"<p>Below we are going to:</p> <ul> <li>Generate our own SSL keys and certificates. The keys can be stored on filesystem or Yubikey.</li> <li>Only if you chose to use GRUB Generate our own GPG keys. The keys can be stored on filesystem or Yubikey.</li> <li>Remove existing signatures from UEFI binaries (in <code>/boot/efi</code>) and sign them and Linux kernel (<code>vmlinuz-</code>) with SSL.</li> <li>Only if you chose to use GRUB Sign Linux kernel, initrd, grub configs with GPG.</li> <li>Only if you chose to use GRUB Configure GRUB in such a way that it verifies everything it loads, and create   a password-protected <code>root</code> user for GRUB.</li> <li>Only if you chose to use EFI stub / unified kernel Create a unified kernel image.</li> <li>Reboot and enroll SSL certificates in UEFI.</li> </ul> <p>We also want to simplify and automate the process because we will need to run it repeatedly (potentially, on each system update).</p>"},{"location":"Linux/secure_boot/#customisation-points-low-level-tools","title":"Customisation points &amp; Low-level Tools","text":"<p>We are going to use a helper script, but it is always useful to understand how to accomplish each step yourself. You might need it in case something goes wrong and you need to fix it from a live usb.</p>"},{"location":"Linux/secure_boot/#ssl-certificates-in-uefi","title":"SSL Certificates in UEFI","text":""},{"location":"Linux/secure_boot/#get-the-list","title":"Get the list","text":"<p>Get the list of existing and enrolled certificates in UEFI:</p> <p>Using <code>efi-readvar</code> (Install via: <code>sudo apt install efitools</code>)</p> <ul> <li><code>efi-readvar</code> \u2014 will print everything.</li> <li>Extract PK/KEK/db via:  <code>efi-readvar -v PK -o PK.old.esl</code> and save the files somewhere.</li> <li>Extract der certificates from ESL with: <code>sig-list-to-certs sec_out/KEK.old.esl KEK</code></li> </ul> <p>Using <code>mokutil</code>: <code>mokutil --pk</code>, <code>mokutil --kek</code>, <code>mokutil --db</code>, <code>mokutil --list-enrolled</code>.</p>"},{"location":"Linux/secure_boot/#view-details","title":"View details","text":"<ul> <li><code>openssl x509 -inform pem -in PK.crt -text</code></li> <li><code>openssl x509 -inform der -in /var/lib/shim-signed/mok/MOK.der -text</code></li> </ul>"},{"location":"Linux/secure_boot/#generate-a-new-ssl-key","title":"Generate a new SSL key","text":"<p>On filesystem:</p> <ul> <li>Generate private key and PEM-encoded certificate:     <pre><code>openssl req \u2013new -x509 \u2013newkey rsa:2048 \u2013subj \"/CN=Custom PK/\" \u2013keyout PK.key \u2013out PK.crt \u2013days 3650 \u2013nodes \u2013sha256\n</code></pre>     It will generate a new 2048 bit key, <code>PK.key</code> is a private key, and <code>PK.crt</code> is the corresponding certificate (public key).</li> <li>Convert certificate from PEM encoding to DER: <code>openssl x509 -outform der -in PK.crt   -out PK.cer</code> .   You will need to install it into the UEFI firmware.</li> <li>Also, you might want to generate ESL (EFI Sig List) from your certificates.</li> </ul> <p>On Yubikey:</p> <ul> <li>You can generate certificate as above and then import it to Yubikey.   More Info.</li> <li>Or you can generate them directly on Yubikey.   More Info.</li> </ul> <p>Note, the above will generate only one key/certificates (PK). You need to repeat the process for KEK and db.</p>"},{"location":"Linux/secure_boot/#enrolling-the-certificates","title":"Enrolling the certificates","text":"From within UEFIAt shim/OS levelUEFI from OS <p>This is the most reliable method.</p> <p>Reboot, go to SecureBoot settings in UEFI, remove existing ones and add new ones.</p> <ul> <li><code>sudo update-secureboot-policy --new-key</code> \u2014 generates a new key/certificate. It will be stored in   <code>/var/lib/shim-signed/mok/MOK.der</code>, <code>/var/lib/shim-signed/mok/MOK.priv</code> (check it with <code>sudo locate MOK</code>).</li> <li><code>sudo update-secureboot-policy --enroll-key</code> adds the key in the list.</li> </ul> <p>Reboot, disable Secure Boot, and then:</p> <ul> <li>db: <code>efi-updatevar -e -f dsk1.esl db</code></li> <li>hashes: <code>efi-updatevar -a -e -f hashes.esl db</code></li> <li>KEK: <code>efi-updatevar -e -f KEK.esl KEK</code></li> <li>PK: <code>efi-updatevar -e -f PK.esl PK</code></li> </ul>"},{"location":"Linux/secure_boot/#ssl-signatures-listing-signing-verification","title":"SSL Signatures: Listing &amp; Signing &amp; Verification","text":""},{"location":"Linux/secure_boot/#get-list-of-signatures-from-a-file","title":"Get list of signatures from a file","text":"<p>List signatures of <code>shimx64.efi</code>:</p> <ul> <li><code>pesign -S -i /usr/lib/shim/shimx64.efi.signed</code> (install via <code>sudo apt install pesign</code>)</li> <li><code>sbverify --list sec_out/shimx64.efi.dualsigned.byme</code></li> </ul> <p>See who signed your files (if you are still not using fish shell, replace brackets: () with backticks: `` below):</p> fish shellbash shell <pre><code>$ echo (sudo find /boot -maxdepth 1 -type f -iname 'vmlinuz*generic' &amp;&amp; sudo find /boot/efi/ -type f -iname '*.efi') | tr ' ' '\\n' | xargs -I {} sudo bash -c \"echo {}; pesign -S -i {} | grep \\\"common name\\\"\"\n\n/boot/vmlinuz-5.11.0-14-generic\nThe signer's common name is Canonical Ltd. Secure Boot Signing (2017)\n/boot/vmlinuz-5.11.0-16-generic\nThe signer's common name is Canonical Ltd. Secure Boot Signing (2017)\n/boot/efi/EFI/ubuntu/grubx64.efi\nThe signer's common name is Canonical Ltd. Secure Boot Signing (2017)\n/boot/efi/EFI/ubuntu/shimx64.efi\nThe signer's common name is Microsoft Windows UEFI Driver Publisher\n/boot/efi/EFI/ubuntu/mmx64.efi\nThe signer's common name is Canonical Ltd. Secure Boot Signing (2017)\n/boot/efi/EFI/BOOT/BOOTX64.EFI\nThe signer's common name is Microsoft Windows UEFI Driver Publisher # (1)!\n/boot/efi/EFI/BOOT/fbx64.efi\nThe signer's common name is Canonical Ltd. Secure Boot Signing (2017)\n/boot/efi/EFI/BOOT/mmx64.efi\nThe signer's common name is Canonical Ltd. Secure Boot Signing (2017)\n</code></pre> <ol> <li> note that shim is signed by M$ </li> </ol> <pre><code>$ echo `sudo find /boot -maxdepth 1 -type f -iname 'vmlinuz*generic' &amp;&amp; sudo find /boot/efi/ -type f -iname '*.efi'` | tr ' ' '\\n' | xargs -I {} sudo bash -c \"echo {}; pesign -S -i {} | grep \\\"common name\\\"\"\n\n/boot/vmlinuz-5.11.0-14-generic\nThe signer's common name is Canonical Ltd. Secure Boot Signing (2017)\n/boot/vmlinuz-5.11.0-16-generic\nThe signer's common name is Canonical Ltd. Secure Boot Signing (2017)\n/boot/efi/EFI/ubuntu/grubx64.efi\nThe signer's common name is Canonical Ltd. Secure Boot Signing (2017)\n/boot/efi/EFI/ubuntu/shimx64.efi\nThe signer's common name is Microsoft Windows UEFI Driver Publisher\n/boot/efi/EFI/ubuntu/mmx64.efi\nThe signer's common name is Canonical Ltd. Secure Boot Signing (2017)\n/boot/efi/EFI/BOOT/BOOTX64.EFI\nThe signer's common name is Microsoft Windows UEFI Driver Publisher # (1)!\n/boot/efi/EFI/BOOT/fbx64.efi\nThe signer's common name is Canonical Ltd. Secure Boot Signing (2017)\n/boot/efi/EFI/BOOT/mmx64.efi\nThe signer's common name is Canonical Ltd. Secure Boot Signing (2017)\n</code></pre> <ol> <li> note that shim is signed by M$ </li> </ol>"},{"location":"Linux/secure_boot/#remove-signatures","title":"Remove signatures","text":"<p>It is useful if you want to sign an executable yourself and you have only signed version of it:</p> <pre><code>pesign --signature-number 0 --remove-signature -i shimx64.efi -o shimx64.efi\n</code></pre>"},{"location":"Linux/secure_boot/#sign","title":"Sign","text":"<ul> <li>Signing EFI executables (bootloaders) with keys on FS  using <code>sbsign</code> from <code>sbsigntool</code>:<ul> <li><code>sbsign --key sec_out/KEK.key --cert sec_out/KEK.crt sec_out/shimx64.efi.dualsigned</code></li> </ul> </li> <li>Signing with Yubikey. See here.</li> <li>Signing kernel modules using <code>kmodsign</code>:<ul> <li><code>kmodsign sha512 DBK.key DBK.der antimalware.ko</code></li> </ul> </li> </ul>"},{"location":"Linux/secure_boot/#verify","title":"Verify","text":"<p>You can verify signed file by:</p> <ul> <li>inspecting list of signatures attached, see above</li> <li>or by verifying against the certificate: <code>sbverify --cert sec_out/KEK.crt sec_out/shimx64.efi.dualsigned.byme</code></li> </ul>"},{"location":"Linux/secure_boot/#hashes","title":"Hashes","text":"<p>Whitelist of checksums</p> <ul> <li> <p>Get the list: <code>mokutil --db</code></p> </li> <li> <p>Add: <code>mokutil --import-hash(?)</code></p> </li> <li> <p>Delete: <code>mokutil --delete-hash(?)</code></p> </li> </ul> <p>Blacklist of checksums</p> <ul> <li> <p>Get the list: <code>mokutil --dbx</code></p> </li> <li> <p><code>kmodsign</code> - signs a module.</p> </li> </ul>"},{"location":"Linux/secure_boot/#grub_1","title":"GRUB","text":""},{"location":"Linux/secure_boot/#protecting-grub-configs-on-disk","title":"Protecting GRUB configs on disk","text":"<p>In order to protect GRUB\u2019s config from tampering we create a standalone version of GRUB:</p> <p><code>grub-mkstandalone -d /usr/lib/grub/x86_64-efi/ -O x86_64-efi --modules=\"part_gpt part_msdos\" --fonts=\"unicode\" --locales=\"en@quot\" --themes=\"\" -o \"/home/user/grub-standalone.efi\" \"boot/grub/grub.cfg=/boot/grub/grub.cfg\"</code>.</p> <p>The resulting standalone GRUB binary is directly bootable and contains a memdisk, which holds the configuration file and modules, as well as the configuration file. Note, it still requires <code>shim</code>, so you cannot remove everything from <code>/boot/efi</code> except from <code>grub-standalone.efi</code>.</p> <p>This GRUB binary now can be signed and used to boot the system.</p>"},{"location":"Linux/secure_boot/#protecting-grub-configs-from-within-grub","title":"Protecting GRUB configs from within GRUB","text":"<p>There is GRUB shell as well as an option to modify settings from GRUB itself. To prevent a malicious user from modifying the kernel cmdline of your system (for example, to point to a different init binary), a GRUB password should be set.</p> <ul> <li> <p><code>grub-mkpasswd-pbkdf2</code> \u2014 generate hashed version of the password</p> </li> <li> <p>We add this in its config:</p> /etc/grub.d/40_custom<pre><code>set superusers=\"root\"\npassword_pbkdf2 root &lt;generated password hash&gt;\n</code></pre> </li> <li> <p>Remove the requirement for the superuser password to be entered on a normal boot-up:</p> /etc/grub.d/10-linux<pre><code>echo \"menuentry '$(echo \"$title\" | grub_quote)'\n    ${CLASS} \\$menuentry_id_option\n    'gnulinux-$version-$type-$boot_device_id'\n    --unrestricted            ### &lt;--- Add this option\n    {\" | sed \"s/^/$submenu_indentation/\"\n</code></pre> </li> </ul>"},{"location":"Linux/secure_boot/#step-by-step-instructions","title":"Step-by-step instructions","text":"<p>First of all, you need to:</p> <ul> <li>choose how your system will boot: (1) via shim -&gt; grub -&gt; (grub.cfg, initrd, kernel) or (2) unified kernel directly.</li> <li>choose where you will store keys: filesystem or Yubikey.</li> </ul> <p>We are going to use the helper script:</p> <pre><code>$ ./secboot.py\nusage: secboot.py [-h] [--dry-run] [--log-level {DEBUG,INFO,ERROR,DISABLED}] [--run-tests]\n                  [--no-run-tests]\n\nThis is a script for managing Secure boot. Many operations require root. Commands below with prefix\n\"ot/\" (stands for \"one-time\") are supposed to be run once, during initial setup.\n\n    ot/generate-gpg-keys\n                        Generates new GPG keys. Example of usage: \"./secboot.py --log-level INFO\n                        ot/generate-gpg-keys --GNUPGHOME sec_out/gpg --id Popl --gpg/pass \"\"\"\n    ot/generate-uefi-keys\n                        Generates new (your own!) UEFI (PK/KEK/db) keys and certificates on filesystem.\n                        You might want to create a temporary memory-backed fs for the task: \"sudo mount\n                        -t tmpfs -o size=10G,uid=(id -u) tmpfs sec_out\" and move them then to a\n                        Yubikey, see ot/enroll-ssl-to-yubikey. Example of usage: \"./secboot.py --log-\n                        level INFO ot/generate-uefi-keys -o sec_out/ --id Popl\"\n    ot/enroll-ssl-to-yubikey\n                        Enrolls PK/KEK/DB keys and certificates to Yubikey. Example of usage:\n                        \"./secboot.py --log-level INFO ot/enroll-ssl-to-yubikey --keys-dir sec_out/\n                        --uefi/nfc-reader \"HID Global OMNIKEY 5422 Smartcard Reader [OMNIKEY 5422CL\"\"\n    ot/enroll-certs-to-uefi\n                        Enrolls PK/KEK/DB certificates to UEFI. Assumes that UEFI is in \"Setup Mode\"\n                        (temporarily disable secure boot, and delete all preexisting certificates).\n                        Example of usage: \"./secboot.py --log-level INFO ot/enroll-certs-to-uefi\n                        --uefi/engine fs --uefi/keys-dir sec_out/\" or \"./secboot.py --log-level INFO\n                        ot/enroll-certs-to-uefi --uefi/engine yu --uefi/nfc-reader \"HID Global OMNIKEY\n                        5422 Smartcard Reader [OMNIKEY 5422CL\"\"\n    re-sign-efi-file    [The command is not supposed to be used on its own. You can skip it.] Removes\n                        all existing signatures from a given EFI executable file and signs it with a\n                        provided (your own!) certificate. Example of usage: \"./secboot.py --log-level\n                        INFO re-sign-efi-file --file-to-sign sec_out/shimx64.efi.signed --uefi/engine\n                        fs --uefi/keys-dir sec_out/\" or \"./secboot.py --log-level INFO re-sign-efi-file\n                        --file-to-sign sec_out/shimx64.efi.signed --uefi/engine yu --uefi/nfc-reader\n                        \"HID Global OMNIKEY 5422 Smartcard Reader [OMNIKEY 5422CL\"\"\n    re-sign-file-with-gpg\n                        [The command is not supposed to be used on its own. You can skip it.] Produces\n                        a detached GPG signature using GPG. The command can be useful if you wish to\n                        make manual changes to grub.cfg and then re-sign it. Example of usage:\n                        \"./secboot.py --log-level INFO re-sign-file-with-gpg --file-to-sign\n                        sec_out/shimx64.efi --gpg/engine fs --gpg/key-id ADDB2... --GNUPGHOME\n                        sec_out/gpg\" or \"./secboot.py --log-level INFO re-sign-file-with-gpg --file-to-\n                        sign sec_out/shimx64.efi --gpg/engine yu --gpg/pub-key ~/devel/gpg*\"\n    danger/grub/make-new-boot\n                        Prepares new content of /boot/efi. For testing, you might want to specify \"--\n                        boot-dir ./testing-boot\". Example of usage: \"sudo ./secboot.py --log-level INFO\n                        danger/grub/make-new-boot --boot-dir /boot --uefi/engine fs --uefi/keys-dir\n                        sec_out/ --gpg/engine fs --gpg/key-id ADDB2... --GNUPGHOME sec_out/gpg\n                        --gpg/pass \"\" --pbkdf-grub-pass-path ~/grub_pbkdf2_pass\" or \"sudo ./secboot.py\n                        --log-level INFO danger/grub/make-new-boot --boot-dir /boot --uefi/engine yu\n                        --uefi/nfc-reader \"HID Global OMNIKEY 5422 Smartcard Reader [OMNIKEY 5422CL\"\n                        --gpg/engine yu --gpg/pub-key ~/devel/gpg* --pbkdf-grub-pass-path\n                        ~/grub_pbkdf2_pass\"\n    danger/efistub/make-new-boot\n                        Prepares new content of /boot/efi. For testing, you might want to specify \"--\n                        boot-dir ./testing-boot\". Example of usage: \"sudo ./secboot.py --log-level INFO\n                        danger/efistub/make-new-boot --boot-dir /boot --disk /dev/nvme0n1 --partition 1\n                        --uefi/engine fs --uefi/keys-dir sec_out/\" or \"sudo ./secboot.py --log-level\n                        INFO danger/efistub/make-new-boot --boot-dir /boot --disk /dev/nvme0n1\n                        --partition 1 --uefi/engine yu --uefi/nfc-reader \"HID Global OMNIKEY 5422\n                        Smartcard Reader [OMNIKEY 5422CL\"\"\n    qemu/efistub/initialise\n                        Guides you through the process of (1) creation of a new VM in QEMU and (2)\n                        making it interactable from host console. After this is done, it uses the VM\n                        for testing itself: it (a) copies itself in the VM, (b) generates SSL/UEFI keys\n                        using ot/generate-uefi-keys, (c) creates new boot via danger/efistub/make-new-\n                        boot and finally (d) ensures the VM can successfully reboot. See also\n                        qemu/efistub/run-tests. Example of usage: ./secboot.py --log-level INFO\n                        qemu/efistub/initialise --vm-dir ~/devel/secboot_efistub_testing\n    qemu/efistub/run-tests\n                        Runs \"integration\" tests in QEMU VM. The tests verify that (1) the OS loads\n                        after all modifications, (2) the OS does NOT load if anything (unified kernel\n                        image) was changed. Example of usage: \"./secboot.py --log-level INFO\n                        qemu/efistub/run-tests --vm-dir ~/devel/secboot_efistub_testing\"\n    qemu/grub/initialise\n                        Guides you through the process of (1) creation of a new VM in QEMU and (2)\n                        making it interactable from host console. After this is done, it uses the VM\n                        for testing itself: it (a) copies itself in the VM, (b) generates GPG keys in\n                        the VM using ot/generate-gpg-keys, (c) generates SSL/UEFI keys using\n                        ot/generate-uefi-keys, (d) creates new boot via danger/grub/make-new-boot and\n                        finally (d) ensures the VM can successfully reboot. See also qemu/grub/run-\n                        tests. Example of usage: ./secboot.py --log-level INFO qemu/grub/initialise\n                        --vm-dir ~/devel/secboot_grub_testing\n    qemu/grub/run-tests\n                        Runs \"integration\" tests in QEMU VM. The tests verify that (1) the OS loads\n                        after all modifications, (2) the OS does NOT load if anything (kernel, initrd,\n                        GRUB, GRUB config, shim) was changed. Example of usage: \"./secboot.py --log-\n                        level INFO qemu/grub/run-tests --vm-dir ~/devel/secboot_grub_testing\"\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --dry-run\n  --log-level {DEBUG,INFO,ERROR,DISABLED}\n                        Log level\n  --run-tests\n  --no-run-tests\n</code></pre> <p>Its output is pretty self-explanatory. If you need more details specify <code>--log-level DEBUG</code>, <code>--dry-run</code> is also supported. Also, you might want to check help of specific sub-commands, for example:</p> <pre><code>./secboot.py --log-level INFO danger/grub/make-new-boot --help\nusage: secboot.py danger/grub/make-new-boot [-h] [--boot-dir BOOT_DIR] [--work-dir WORK_DIR]\n                                            [--backups-dir BACKUPS_DIR] --pbkdf-grub-pass-path\n                                            PBKDF_GRUB_PASS_PATH --uefi/engine {fs,yu}\n                                            [--uefi/key {KEK,db}] [--uefi/keys-dir UEFI/KEYS_DIR]\n                                            [--uefi/pass UEFI/PASS] [--uefi/nfc-reader UEFI/NFC_READER]\n                                            --gpg/engine {fs,yu} [--gpg/pub-key GPG/PUB_KEY]\n                                            [--gpg/key-id GPG/KEY_ID] [--GNUPGHOME GNUPGHOME]\n                                            [--use-gpg-agent-for-pass] [--gpg/pass GPG/PASS]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --boot-dir BOOT_DIR   Boot dir.\n  --work-dir WORK_DIR   Work dir.\n  --backups-dir BACKUPS_DIR\n                        Directory where to backup existing boot\n  --uefi/engine {fs,yu}\n                        Defines source of key info: \"fs\" - a directory on filesystem, \"yu\" - Yubikey\n  --uefi/nfc-reader UEFI/NFC_READER\n                        (Only if \"yu\" engine is used and only if it is used over NFC interface.) An\n                        id(or a prefix thereof) of NFC reader. It is needed for Yubikey soft to be able\n                        to correctly talk to Yubikey. You can obtain one by running: \"yubico-piv-tool\n                        -a status -v2\", see more info here https://github.com/Yubico/yubico-piv-\n                        tool/issues/298\n  --gpg/engine {fs,yu}  Defines source of key info: \"fs\" - a directory on filesystem, \"yu\" - Yubikey\n  --gpg/pub-key GPG/PUB_KEY\n                        (Only if \"yu\" engine is used) Path to a public GPG key\n</code></pre>"},{"location":"Linux/secure_boot/#buy-equipment","title":"Buy equipment","text":"<p>Storing your keys in Yubikey has a number of advantages:</p> <ul> <li>Keys are never stored on filesystem of your PC.</li> <li>It is nearly impossible to extract (private) keys from Yubikey   (and impossible without your noticing it).</li> <li>Yubikey has a hardware-backed max PIN entry counter (for example, your LUKS password can be brute-forced arbitrarily   long, but Yubikey limits the number of attempts to 3).</li> <li>Yubikey can be hideen/stored in a safe place.</li> <li>You do not need to insert it physically in a USB because there are NFC versions.</li> </ul> <p>So, you might want to buy Yubikey NFC as well as NFC reader: something like HID Identity OMNIKEY 5422 will work, while NFC ACR122 ACR122U will NOT because it does not support \u201cextended APDU\u201d / \u201cTPDU\u201d.</p>"},{"location":"Linux/secure_boot/#generate-ssluefi-keys-and-certificates","title":"Generate SSL/UEFI keys and certificates","text":"<p>This will genrate (PK, KEK, db) x (cer, key) in a directory (<code>sec_out</code> in the example below):</p> <pre><code>$ ./secboot.py --log-level INFO ot/generate-uefi-keys -o sec_out/ --id Popl\n\n2021-04-27 09:00:10,939 INFO generate:370: Generated private key in sec_out/PK.key, cert in sec_out/PK.crt. You might want to check that everything is fine: \"openssl x509 -inform pem -in sec_out/PK.crt -text\"\n2021-04-27 09:00:11,043 INFO generate:378: Converted PEM-encoded .crt to DER-encoded .cer at: sec_out/PK.cer\n2021-04-27 09:00:11,201 INFO generate:370: Generated private key in sec_out/KEK.key, cert in sec_out/KEK.crt. You might want to check that everything is fine: \"openssl x509 -inform pem -in sec_out/KEK.crt -text\"\n2021-04-27 09:00:11,304 INFO generate:378: Converted PEM-encoded .crt to DER-encoded .cer at: sec_out/KEK.cer\n2021-04-27 09:00:11,455 INFO generate:370: Generated private key in sec_out/db.key, cert in sec_out/db.crt. You might want to check that everything is fine: \"openssl x509 -inform pem -in sec_out/db.crt -text\"\n2021-04-27 09:00:11,558 INFO generate:378: Converted PEM-encoded .crt to DER-encoded .cer at: sec_out/db.cer\n</code></pre> <p>If you have a Yubikey, move keys to it:</p> <pre><code>$ ./secboot.py --log-level INFO ot/enroll-ssl-to-yubikey --keys-dir sec_out/ --uefi/nfc-reader \"HID Global OMNIKEY 5422 Smartcard Reader [OMNIKEY 5422CL\"\n\n2021-04-27 09:18:00,161 WARNING enroll_to_yubikey:470: You might want to setup your Yubikey: (1) Set PIN: \"yubico-piv-tool -r 'HID Global OMNIKEY 5422 Smartcard Reader [OMNIKEY 5422CL' --action change-pin -P 123456\", (2) Set PUK: \"yubico-piv-tool -r 'HID Global OMNIKEY 5422 Smartcard Reader [OMNIKEY 5422CL' --action change-puk -P 12345678\", (3) Enable PIV over NFC: \"ykman config nfc -f -e PIV\". Other action see here: https://developers.yubico.com/yubico-piv-tool/Actions/\n2021-04-27 09:18:00,655 INFO enable_retired_slots:483: Retired slots enabled\n2021-04-27 09:18:00,843 INFO enroll:496: Added key: sec_out/PK.key in slot: 82\n2021-04-27 09:18:01,060 INFO enroll:502: Added certificate: sec_out/PK.crt in slot: 82\n2021-04-27 09:18:01,246 INFO enroll:496: Added key: sec_out/KEK.key in slot: 9d\n2021-04-27 09:18:01,463 INFO enroll:502: Added certificate: sec_out/KEK.crt in slot: 9d\n2021-04-27 09:18:01,651 INFO enroll:496: Added key: sec_out/db.key in slot: 9c\n2021-04-27 09:18:01,867 INFO enroll:502: Added certificate: sec_out/db.crt in slot: 9c\n</code></pre> <p>Refer to help of \u201c<code>ot/enroll-ssl-to-yubikey</code>\u201d to get more info about <code>--uefi/nfc-reader</code> option and its value.</p>"},{"location":"Linux/secure_boot/#for-grub-users","title":"For GRUB users","text":""},{"location":"Linux/secure_boot/#generate-gpg-keys","title":"Generate GPG keys","text":"<p>The best guide for generating GPG keys and enrolling them to Yubikey is here. But the script also can generate them:</p> <pre><code>./secboot.py --log-level INFO ot/generate-gpg-keys --GNUPGHOME sec_out/gpg1 --id Popl --gpg/pass \"\"\n\n2021-05-01 19:46:31,582 INFO generate_keys:818: Generated primary rsa4096 cert key with keyid: C16D9DAAE7E7CF8667EBF64CE18101E9A3EAB78F\n2021-05-01 19:46:32,269 INFO add_sub_key:826: Generated sub-key: rsa4096 sign\n2021-05-01 19:46:32,983 INFO add_sub_key:826: Generated sub-key: rsa4096 encrypt\n2021-05-01 19:46:34,425 INFO add_sub_key:826: Generated sub-key: rsa4096 auth\n\nDone\n</code></pre> <p>Refer to the guide if you have a Yubikey and wish to move the key to it (note, it will remove keys on filesystem). In short:</p> <pre><code>gpg --edit-key $KEYID\n   key 1\n   keytocard\n   key 1\n   key 2\n   keytocard\n   key 2\n   key 3\n   keytocard\n   key 3\n   save\n</code></pre>"},{"location":"Linux/secure_boot/#grub-password-hash","title":"GRUB password hash","text":"<p>As described above, various advanced options (such as rescue shell) must be protected with GRUB\u2019s superuser+password. The script creates GRUB config with username <code>root</code>. But you will need to come up with a password and create a file containing pbkdf2 hash of it:</p> <pre><code>$ grub-mkpasswd-pbkdf2 -c 50000000 # (1)!\nEnter password: &lt;test&gt;\nReenter password: &lt;test&gt;\nPBKDF2 hash of your password is grub.pbkdf2.sha512.10000.ED9363D6FFDC719D047BC8B4544DC36001DE400D26E2E040613D7503BBE80EE5C14FB39535BD7DBAB95851A612EC49F3A8213B57EE1C27B7DC34DE1ABF79E502.327C2AB81E227E26D11DE8D291DFFEFC026339F51FF46EE321F57B2D3397788E55C3D144F5BCA13BAE0AB01B2C28D28B8B8E2EACE8E70BF58466B7A5F03CC137\n</code></pre> <ol> <li><code>-c 50000000</code> means that when an adversary will brute-force your password on a huge cluster of machines,   it will take just ~2 minutes for one try, so, feel free to increase the iteration count (until you feel   comfortable with the time required for one attempt).</li> </ol> <p>Add the hash to a file:</p> <pre><code>echo grub.pbkdf2.sha512.10000.ED9363D6F... &gt; ~/grub_pbkdf2_pass\n</code></pre> <p>We will then specify the file for the script. The script will read the hash and embed it in a standalone version of GRUB, which then will be signed with UEFI certificate.</p>"},{"location":"Linux/secure_boot/#generate-new-boot","title":"Generate new boot","text":"<p>This is the only command that you will need to run repeatedly (potentially with each system update) (1).</p> <ol> <li>You can create an alias/function: <code>sysupgrade: sudo apt update &amp;&amp; sudo apt upgrade &amp;&amp; sudo ./secboot.py --log-level INFO danger/make-new-boot ...</code> to simplify the task.</li> </ol> <pre><code>$ sudo ./secboot.py --log-level INFO danger/make-new-boot \\\n                    --boot-dir /boot \\\n                    --uefi/engine fs --uefi/keys-dir sec_out/ \\\n                    --gpg/engine fs --gpg/key-id 8C0FE2CEAA13563813D6239504AF0F899E6DF636 --GNUPGHOME sec_out/gpg --gpg/pass \"\" \\\n                    --pbkdf-grub-pass-path ~/grub_pbkdf2_pass\n\n2021-05-01 18:46:20,301 INFO make_new_boot:1222: Backing up /boot...\n2021-05-01 18:46:20,301 INFO exec:82: executing: cp -r /boot /bb/boot.bak.1619891180.3016443\n\n2021-05-01 18:46:20,784 INFO make_new_boot:1235: Preparing standalone GRUB, its config and signing it with GPG...\n2021-05-01 18:46:21,080 INFO _create_trampoline_config:1099: Created grub trampoline config at: /tmp/secboot_eex1v1g3/grub.init.cfg\n2021-05-01 18:46:21,422 INFO create_standalone_and_config:1193: Signed grub trampoline config. Signature: /tmp/secboot_eex1v1g3/grub.init.cfg.sig, you can verify it yourself: \"gpg --verify /tmp/secboot_eex1v1g3/grub.init.cfg.sig /tmp/secboot_eex1v1g3/grub.init.cfg\"\n2021-05-01 18:46:21,848 INFO _create_standalone:1120: Created standalone grub EFI binary at: /tmp/secboot_eex1v1g3/grubx64.efi\n2021-05-01 18:46:21,848 INFO _create_main_config:1125: Creating main GRUB config for kernels: [KernelVersion(p1=5, p2=8, p3=0, p4=50, suffix='generic'), KernelVersion(p1=5, p2=8, p3=0, p4=25, suffix='generic')]...\n2021-05-01 18:46:23,872 INFO generate_custom_menu_entries:1143: Generating menuentry for kernel version: 5.8.0-50-generic, cmdline: root=/dev/mapper/vgkubuntu-root ro console=tty0 console=ttyS0,38400n8 and OS: Ubuntu 20.10\n2021-05-01 18:46:23,872 INFO generate_custom_menu_entries:1143: Generating menuentry for kernel version: 5.8.0-25-generic, cmdline: root=/dev/mapper/vgkubuntu-root ro console=tty0 console=ttyS0,38400n8 and OS: Ubuntu 20.10\n2021-05-01 18:46:23,872 INFO _create_main_config:1176: Created main GRUB config at: /tmp/secboot_eex1v1g3/grub.cfg\n2021-05-01 18:46:24,112 INFO create_standalone_and_config:1204: Signed grub main config. Signature: /tmp/secboot_eex1v1g3/grub.cfg.sig, you can verify it yourself: \"gpg --verify /tmp/secboot_eex1v1g3/grub.cfg.sig /tmp/secboot_eex1v1g3/grub.cfg\"\n\n2021-05-01 18:46:24,114 INFO make_new_boot:1243: Coping results to the right place...\n2021-05-01 18:46:24,115 INFO exec:82: executing: cp /tmp/secboot_eex1v1g3/grub.cfg /boot/efi\n2021-05-01 18:46:24,218 INFO exec:82: executing: cp /tmp/secboot_eex1v1g3/grub.cfg.sig /boot/efi\n2021-05-01 18:46:24,321 INFO exec:82: executing: cp /tmp/secboot_eex1v1g3/grubx64.efi /boot/efi/EFI/ubuntu/grubx64.efi\n2021-05-01 18:46:24,429 INFO exec:82: executing: cp /boot/vmlinuz-5.8.0-50-generic /boot/efi\n2021-05-01 18:46:24,549 INFO exec:82: executing: cp /boot/initrd.img-5.8.0-50-generic /boot/efi\n2021-05-01 18:46:24,741 INFO exec:82: executing: cp /boot/vmlinuz-5.8.0-25-generic /boot/efi\n2021-05-01 18:46:24,860 INFO exec:82: executing: cp /boot/initrd.img-5.8.0-25-generic /boot/efi\n\n2021-05-01 18:46:25,115 INFO make_new_boot:1260: (Re-)signing all EFI binaries with SSL...\n2021-05-01 18:46:25,219 WARNING install_if_program_does_not_exist:134: Program: pesign does not exist =&gt; installing it via package: pesign\n2021-05-01 18:46:32,095 INFO re_sign_efi_file:626: (Re-)signed and verified /boot/efi/vmlinuz-5.8.0-50-generic with FsUefi(/home/test/sec_out/db). You can verify it yourself with \"pesign -S -i /boot/efi/vmlinuz-5.8.0-50-generic\" and/or \"sbverify --cert /home/test/sec_out/db.crt /boot/efi/vmlinuz-5.8.0-50-generic\"\n2021-05-01 18:46:33,276 INFO re_sign_efi_file:626: (Re-)signed and verified /boot/efi/vmlinuz-5.8.0-25-generic with FsUefi(/home/test/sec_out/db). You can verify it yourself with \"pesign -S -i /boot/efi/vmlinuz-5.8.0-25-generic\" and/or \"sbverify --cert /home/test/sec_out/db.crt /boot/efi/vmlinuz-5.8.0-25-generic\"\n2021-05-01 18:46:33,660 INFO re_sign_efi_file:626: (Re-)signed and verified /boot/efi/EFI/ubuntu/grubx64.efi with FsUefi(/home/test/sec_out/db). You can verify it yourself with \"pesign -S -i /boot/efi/EFI/ubuntu/grubx64.efi\" and/or \"sbverify --cert /home/test/sec_out/db.crt /boot/efi/EFI/ubuntu/grubx64.efi\"\n2021-05-01 18:46:34,110 INFO re_sign_efi_file:626: (Re-)signed and verified /boot/efi/EFI/ubuntu/shimx64.efi with FsUefi(/home/test/sec_out/db). You can verify it yourself with \"pesign -S -i /boot/efi/EFI/ubuntu/shimx64.efi\" and/or \"sbverify --cert /home/test/sec_out/db.crt /boot/efi/EFI/ubuntu/shimx64.efi\"\n2021-05-01 18:46:34,555 INFO re_sign_efi_file:626: (Re-)signed and verified /boot/efi/EFI/ubuntu/mmx64.efi with FsUefi(/home/test/sec_out/db). You can verify it yourself with \"pesign -S -i /boot/efi/EFI/ubuntu/mmx64.efi\" and/or \"sbverify --cert /home/test/sec_out/db.crt /boot/efi/EFI/ubuntu/mmx64.efi\"\n2021-05-01 18:46:35,007 INFO re_sign_efi_file:626: (Re-)signed and verified /boot/efi/EFI/BOOT/BOOTX64.EFI with FsUefi(/home/test/sec_out/db). You can verify it yourself with \"pesign -S -i /boot/efi/EFI/BOOT/BOOTX64.EFI\" and/or \"sbverify --cert /home/test/sec_out/db.crt /boot/efi/EFI/BOOT/BOOTX64.EFI\"\n\n2021-05-01 18:46:35,906 INFO make_new_boot:1275: (Re-)signing files with GPG...\n2021-05-01 18:46:36,265 INFO re_sign_file_with_gpg:868: Signed and verified /boot/vmlinuz-5.8.0-50-generic with Gpg(/home/test/sec_out/gpg, key_id: 8C0FE2CEAA13563813D6239504AF0F899E6DF636). Signature: /boot/vmlinuz-5.8.0-50-generic.sig. You can verify it yourself with \"gpg --verify /boot/vmlinuz-5.8.0-50-generic.sig /boot/vmlinuz-5.8.0-50-generic\"\n2021-05-01 18:46:37,150 INFO re_sign_file_with_gpg:868: Signed and verified /boot/initrd.img-5.8.0-50-generic with Gpg(/home/test/sec_out/gpg, key_id: 8C0FE2CEAA13563813D6239504AF0F899E6DF636). Signature: /boot/initrd.img-5.8.0-50-generic.sig. You can verify it yourself with \"gpg --verify /boot/initrd.img-5.8.0-50-generic.sig /boot/initrd.img-5.8.0-50-generic\"\n\n2021-05-01 18:46:40,765 INFO make_new_boot:1284: Removing backdoor-ish MokManager...\n2021-05-01 18:46:40,766 INFO exec:82: executing: rm /boot/efi/EFI/ubuntu/mmx64.efi\n2021-05-01 18:46:40,869 INFO exec:82: executing: rm /boot/efi/EFI/BOOT/mmx64.efi\n</code></pre>"},{"location":"Linux/secure_boot/#for-efi-stub-users","title":"For EFI Stub Users","text":"<pre><code>$ sudo ./secboot.py --log-level INFO danger/efistub/make-new-boot \\\n                    --boot-dir /boot --disk /dev/sda --partition 1 \\\n                    --uefi/engine fs --uefi/keys-dir sec_out/\n\n2021-05-04 17:46:11,174 INFO create_unified_kernel_from:1496: Creating unified kernel image from vmlinuz and initrd 5.11.0-16-generic in /boot\n2021-05-04 17:46:11,277 WARNING install_if_program_does_not_exist:144: Program: objcopy does not exist =&gt; installing it via package: binutils\n2021-05-04 17:46:15,764 WARNING install_if_program_does_not_exist:144: Program: pesign does not exist =&gt; installing it via package: pesign\n2021-05-04 17:46:22,283 INFO re_sign_efi_file:636: (Re-)signed and verified /tmp/secboot_yqx1ll9c/secboot-linux-latest.efi with FsUefi(/home/test/sec_out/db). You can verify it yourself with \"pesign -S -i /tmp/secboot_yqx1ll9c/secboot-linux-latest.efi\" and/or \"sbverify --cert /home/test/sec_out/db.crt /tmp/secboot_yqx1ll9c/secboot-linux-latest.efi\"\n\n2021-05-04 17:46:22,283 INFO create_unified_kernel_from:1496: Creating unified kernel image from vmlinuz and initrd 5.8.0-50-generic in /boot\n2021-05-04 17:46:24,581 INFO re_sign_efi_file:636: (Re-)signed and verified /tmp/secboot_yqx1ll9c/secboot-linux-prev.efi with FsUefi(/home/test/sec_out/db). You can verify it yourself with \"pesign -S -i /tmp/secboot_yqx1ll9c/secboot-linux-prev.efi\" and/or \"sbverify --cert /home/test/sec_out/db.crt /tmp/secboot_yqx1ll9c/secboot-linux-prev.efi\"\n\n2021-05-04 17:46:24,581 INFO make_boot_backup:984: Backing up /boot...\n2021-05-04 17:46:24,581 INFO exec:92: executing: cp -r /boot /bb/boot.bak.1620146784.581392\n\n2021-05-04 17:46:24,944 INFO exec:92: executing: find /boot/efi -mindepth 1 ! -name \"*.cer\" -delete\n2021-05-04 17:46:25,047 INFO exec:92: executing: mkdir -p /boot/efi\n2021-05-04 17:46:25,150 INFO exec:92: executing: mkdir -p /boot/efi\n2021-05-04 17:46:25,252 INFO exec:92: executing: cp /tmp/secboot_yqx1ll9c/secboot-linux-prev.efi /boot/efi/secboot-linux-prev.efi\n2021-05-04 17:46:25,463 INFO exec:92: executing: cp /tmp/secboot_yqx1ll9c/secboot-linux-latest.efi /boot/efi/secboot-linux-latest.efi\n\n2021-05-04 17:46:25,865 INFO repopulate_efibootmgr_if_needed:1522: Need to repopulate efibootmgr entries because number of entries (which is 7) is not 2\n2021-05-04 17:46:25,866 INFO repopulate_efibootmgr_if_needed:1539: Removing boot: 0000\n2021-05-04 17:46:25,980 INFO repopulate_efibootmgr_if_needed:1539: Removing boot: 0001\n2021-05-04 17:46:26,092 INFO repopulate_efibootmgr_if_needed:1539: Removing boot: 0002\n2021-05-04 17:46:26,205 INFO repopulate_efibootmgr_if_needed:1539: Removing boot: 0003\n2021-05-04 17:46:26,316 INFO repopulate_efibootmgr_if_needed:1539: Removing boot: 0004\n2021-05-04 17:46:26,429 INFO repopulate_efibootmgr_if_needed:1539: Removing boot: 0005\n2021-05-04 17:46:26,540 INFO repopulate_efibootmgr_if_needed:1539: Removing boot: 0006\n2021-05-04 17:46:26,647 INFO add_entry:1547: Adding boot entry for \"SecBoot Previous Linux\", /secboot-linux-prev.efi\n2021-05-04 17:46:26,764 INFO add_entry:1547: Adding boot entry for \"SecBoot Latest Linux\", /secboot-linux-latest.efi\n</code></pre>"},{"location":"Linux/secure_boot/#enroll-your-uefi-keys","title":"Enroll your UEFI keys","text":"<p>There are many ways of enrolling your keys, but since you will need to reboot your PC anyway in order to delete existing keys from UEFI, I will consider enrolling certificates using UEFI.</p>"},{"location":"Linux/secure_boot/#get-your-certificates","title":"Get your certificates","text":"<ul> <li> <p>If they are on filesystem it is trivial.</p> </li> <li> <p>If you moved them to a Yubikey, run this:</p> <pre><code>./secboot.py --log-level INFO ot/enroll-certs-to-uefi --uefi/engine yu --uefi/nfc-reader \"HID Global OMNIKEY 5422 Smartcard Reader [OMNIKEY 5422CL\"\n\nNot implemented yet.\nYou will need to do it manually:\n    - Copy *.cer files from /tmp/secboot_certs_for_uefi_dfd29wtd to a FAT-formatted flash drive, _or_ /boot/efi directory\n    - Reboot and enter UEFI setup =&gt; SecureBoot settings\n    - In the settings, remove all existing keys (PK, KEK, db)\n    - Enroll your own (db.cer, KEK.cer, PK.cer)\n\nPress any key to exit...\n</code></pre> <p>The command above will extract all certificates in a temporary directory and will wait until you press a key, after which it will erase the extracted certificates. So copy the certificates somewhere.</p> </li> </ul>"},{"location":"Linux/secure_boot/#move-certificates-to-media-accessible-from-uefi","title":"Move certificates to media accessible from UEFI","text":"<p>You have two options:</p> <ul> <li> <p>Simplest Copy <code>*.cer</code> files to <code>/boot/efi</code> \u2014 this is visible from UEFI.</p> </li> <li> <p>Alternatively, you can create a USB flash and copy them there:</p> <pre><code>sudo parted /dev/sdX mklabel gpt # or msdos\nsudo parted -a opt /dev/sdX mkpart primary 0% 100%\nsudo mkfs.ext4 -L TempStorage /dev/sdX1\nsudo mount /dev/sda1 /mnt/\n</code></pre> </li> </ul>"},{"location":"Linux/secure_boot/#reboot-and-enroll","title":"Reboot and enroll","text":"<p>Finally, reboot, remove all existing certificates, and enroll your own. If something goes wrong, you should be able to fix it by disabling SecureBoot.</p> <p>Note that you will probably need to switch Mode from \u201cWindows UEFI\u201d to \u201cCustom\u201d, otherwise, shim will not be able to validate GRUB signed by us.</p>"},{"location":"Linux/secure_boot/#lock-down-uefi","title":"Lock-down UEFI","text":"<p>Protect UEFI settings / certificates by setting a password. Without this step, all UEFI settings can be disabled.</p> <p>Always prefer the thorough or full boot option when unsure of the vendor implementation.</p> <p>Disable Compatibility Support Module (CSM) Legacy Mode to prevent legacy fallback mode from bypassing Secure Boot protections. Reason: Some systems fall back to Legacy Mode when a Secure Boot check fails.</p>"},{"location":"Linux/secure_boot/#reboot-and-check-it-works","title":"Reboot and check it works","text":"<ul> <li>Check that secure boot is enabled: <code>sudo dmesg | grep -i \"uefi\\|secure boot\"</code></li> <li>Double-check that secure boot is enabled: <code>mokutil --sb-state</code></li> <li>Triple-check that secure boot is enabled: <code>od -An -t u1 --read-bytes=1 --skip-bytes=4 /sys/firmware/efi/efivars/SecureBoot-*</code> must output <code>1</code>.</li> <li>Check that there is only your certificates: <code>efi-readvar</code></li> <li>Check you keys are in the output of <code>sudo cat /proc/keys</code></li> <li>Ideally, you should check that boot will fail if you modify something (shim, grub, grub.cfg, initrd, kernel).   Obviously, be prepared to restore it yourself.<ul> <li>You can place a binary (such as an unsigned GRUB EFI binary) at <code>EFI/BOOT/BOOTX64.EFI</code> on a FAT32-formatted USB Flash drive. Use the UEFI firmware interface to set this drive as the current boot drive, and ensure that a security warning appears, which halts the boot process.</li> <li>You also should verify that an image signed with the default UEFI secure boot keys does not boot \u2014 an Ubuntu CD or bootable USB stick should allow you to verify this.</li> </ul> </li> </ul>"},{"location":"Linux/secure_boot/#in-case-of-an-error","title":"In case of an error","text":"<p>You can always find an up-to-date (and presumably working) version of the above description in the script. <code>create_new_boot_in_fresh_vm</code> does exactly what is described above.</p> GRUB walkthroughEfiStub walkthrough <pre><code>qemu: Qemu = Qemu(dry_run, image)\nqemu.start()\nqemu.disable_sudo_pass()\n# Avoid race condition between us and system-update runnin in the background\nqemu.exec_and_wait(f'sudo apt-get -y remove unattended-upgrades')\nqemu.copy(pl.Path(__file__).resolve(), script) # Copy the script in the VM\n\n# Generate SSL/UEFI\nqemu.exec_and_wait(f'sudo {GENERATE_UEFI_KEYS_EXAMPLE} &amp;&amp; sudo cp -r ./sec_out/*.cer /boot/efi')\n\n# Generate GPG\ngpg_gen_out: str = qemu.exec_and_wait(f'sudo {GENERATE_GPG_KEYS_EXAMPLE}')\ngpg_keyid: str = gpg_keyid_regex.match(gpg_gen_out).group('g1') if not dry_run else \"\"\n\n# Generate GRUB PBKDF2 pass\nqemu.exec_and_wait(f'grub-mkpasswd-pbkdf2 | tee ~/grub_pbkdf2_pass_out &amp;&amp; cat ~/grub_pbkdf2_pass_out | '\n                f'grep \"PBKDF2 hash of your password is\" | sed \\'s/PBKDF2 hash of your password is //g\\' &gt; '\n                f'~/grub_pbkdf2_pass', resp=\"Enter password:\", use_regex=False)\nqemu.exec_and_wait('test', resp=\"Reenter password:\", use_regex=False, wait_for_echo=False)\nqemu.exec_and_wait('test', wait_for_echo=False) # Repeat it\n\n# Create new /boot\nmake_new_boot_cmd: str = MAKE_NEW_BOOT_EXAMPLE_FS\nmake_new_boot_cmd = make_new_boot_cmd.replace(\"--boot-dir ./boot\", \"--boot-dir /boot\")\nmake_new_boot_cmd = make_new_boot_cmd.replace(\"--gpg/key-id ADDB2...\", f\"--gpg/key-id {gpg_keyid}\")\nqemu.exec_and_wait(f'sudo {make_new_boot_cmd}')\n\nqemu.shutdown()\n</code></pre> <pre><code>qemu: Qemu = Qemu(dry_run, image)\nqemu.start()\nqemu.disable_sudo_pass()\nqemu.exec_and_wait(f'sudo apt-get -y remove unattended-upgrades')\nqemu.copy(pl.Path(__file__).resolve(), script) # Copy the script in the VM\n\nqemu.exec_and_wait(f'sudo {GENERATE_UEFI_KEYS_EXAMPLE} &amp;&amp; sudo cp -r ./sec_out/*.cer /boot/efi')\n\nmake_new_boot_cmd: str = MAKE_NEW_EFISTUB_BOOT_EXAMPLE_FS\nmake_new_boot_cmd = make_new_boot_cmd.replace(\"--disk /dev/nvme0n1\", f\"--disk /dev/sda\")\nqemu.exec_and_wait(f'sudo {make_new_boot_cmd}')\n\nqemu.shutdown()\n</code></pre>"},{"location":"Linux/secure_boot/#optional-proper-testing-in-a-vm","title":"Optional Proper testing in a VM","text":"<p>So, how do you know that everything described above really works? How do you know I do not lie? How do I know that I am right?</p> <p>Well, there is only one way to check \u2014 test in a VM. In this section:</p> <ul> <li>we will install our favourite distro in VM (needs to be done manually)</li> <li>set it up similarly to our main PC (needs to be done manually)</li> <li>create new /boot with SecureBoot</li> <li>and then we will be tampering/modifying random and sensitive parts of the OS in order to   ensure that boot stops working.</li> </ul>"},{"location":"Linux/secure_boot/#setup-vm-semi-manually","title":"Setup VM (semi-manually)","text":"<p>Just follow instructions of <code>qemu/efistub/initialise</code> (or <code>qemu/grub/initialise</code>):</p> <pre><code>./secboot.py --no-run-tests  --log-level INFO qemu/initialise --vm-dir ~/devel/secboot_testing\n\nYou should install OS in VM:\n  - Create disk: qemu-img create -f qcow2 secboot_testing/without-secboot.img 20G\n  - Start installer: qemu-system-x86_64 -m 3G -drive file=secboot_testing/OVMF-without-secboot.fd,format=raw,if=pflash -boot d -enable-kvm -smp 2 -net nic -net user -cdrom ~/Downloads/kubuntu-20.10-desktop-amd64.iso -hda secboot_testing/without-secboot.img\n  - Create user \"test\" with password \"test\"\n\nMake the VM interactable from host console:\n  - sudo nano /etc/default/grub\n    # GRUB_TIMEOUT_STYLE=hidden\n    GRUB_TIMEOUT=3\n    GRUB_CMDLINE_LINUX_DEFAULT=\"console=tty0 console=ttyS0,38400n8\"\n    GRUB_TERMINAL=serial\n    GRUB_SERIAL_COMMAND=\"serial --speed=38400 --unit=0 --word=8 --parity=no --stop=1\"\n  - Re-generate grub.cfg: grub-mkconfig -o /boot/grub/grub.cfg\n\nShutdown the OS\n\nPress any key when ready...\n\n2021-05-01 18:45:15,361 INFO recreate_new_snapshot:1389: Removed write permissions from secboot_testing/without-secboot.img and secboot_testing/OVMF-without-secboot.fd\n2021-05-01 18:45:15,731 INFO recreate_new_snapshot:1403: Created new snapshot QemuImage(image=PosixPath('secboot_testing/with-secboot.img'), uefi=PosixPath('secboot_testing/OVMF-with-secboot.fd')) from QemuImage(image=PosixPath('secboot_testing/without-secboot.img'), uefi=PosixPath('secboot_testing/OVMF-without-secboot.fd')) and made the latter immutable\n\ntest@test-Standard-PC-i440FX-PIIX-1996:~$\ntest@test-Standard-PC-i440FX-PIIX-1996:~$ echo \"test ALL=(ALL) NOPASSWD: ALL\" | sudo tee -a /etc/sudoers\n[sudo] password for test:\ntest ALL=(ALL) NOPASSWD: ALL\ntest@test-Standard-PC-i440FX-PIIX-1996:~$ sudo apt-get -y remove unattended-upgrades\n\n...\n\nNow you have to enroll new keys in UEFI:\n  - press and hold &lt;Esc&gt; to enter UEFI settings\n  - Device Manager\n  - Secure Boot configuration\n  - Secure Boot Mode -&gt; Custom Mode\n  - Custom Secure Boot Options\n  - DB Options -&gt; Enroll Signature -&gt; Enter -&gt; db.cer -&gt; Commit changes and exit\n  - Repeat for KEK\n  - Repeat for PK\n  - Esc -&gt; Esc -&gt; Esc -&gt; On the main menu: Reset\n\n\nPress any key when you are ready...\n\n...\n\n2021-05-01 18:48:51,060 INFO qemu_initialise:1660: SecureBoot has been successfully enabled. Everything works fine. Shuttig down...\n</code></pre>"},{"location":"Linux/secure_boot/#run-automated-test","title":"Run automated test","text":"<p>Use option <code>qemu/efistub/run-tests</code> (or <code>qemu/grub/run-tests</code>). The script will create a temporary snapshot, modify various parts of the system (by writing random byte in the middle of a file, so that signature be invalid), reboot the system, and verify that it does not load (and verify that it did not load due to signature verification check, not due to the garbage we wrote \u2014 this is achieved by switching of UEFI in VM, and ensuring that it loads fine).</p> <p>Example of one such modification:</p> <pre><code>qemu: Qemu = Qemu(dry_run, disposable)\nassert qemu.start() == BootStatuses.Ok\nqemu.overwrite_middle_of(file=pl.Path(\"/boot/efi/EFI/BOOT/BOOTX64.EFI\"))\nqemu.overwrite_middle_of(file=pl.Path(\"/boot/efi/EFI/ubuntu/shimx64.efi\"))\nqemu.shutdown()\nassert qemu.start() == BootStatuses.UefiFailedToLoadShim\n\n# Check that OS failed to boot not because we broke its binaries by writing garbage into them, but\n# because of signature verification. We do it, by trying to boot the same OS with initial UEFI (without keys):\nqemu: Qemu = Qemu(dry_run, QemuImage(image=disposable.image, uefi=orig_uefi))\nassert qemu.start() == BootStatuses.Ok\n</code></pre>"},{"location":"Linux/secure_boot/#useful-qemu-commands","title":"Useful QEMU commands","text":"<ul> <li>QEMU images:<ul> <li>Create an image with max size 20G: <code>qemu-img create -f qcow2 secboot-initial.img 20G</code></li> <li>In case you need later to resize it: <code>qemu-img resize secboot-initial.img +10G</code></li> </ul> </li> <li>Bring UEFI: <code>sudo apt install ovmf &amp;&amp; cp /usr/share/ovmf/OVMF.fd ./OVMF.fd</code></li> <li>Install it: <code>qemu-system-x86_64 -m 4G -drive file=./OVMF.fd,format=raw,if=pflash -boot d -enable-kvm -smp 4 -net nic -net user -cdrom ~/Downloads/kubuntu-20.10-desktop-amd64.iso -hda secboot-initial.img</code></li> <li>Create a snapshot: <code>qemu-img create -f qcow2 -b sb-image.img trying_to_flip_a_bit.img</code></li> <li>Mount a folder from host<ul> <li><code>-virtfs local,path=~/devel/,mount_tag=host0,security_model=passthrough,id=host0</code></li> <li>Add entry in guest <code>/etc/fstab</code>: <code>TODO</code></li> </ul> </li> <li>Better screen resolution: <code>-vga virtio</code></li> <li> <p>Modify binary file (to check that the modification will be caught):</p> <pre><code>(export f=file-to-change.txt; cp $f $f.bak; printf \"\\x56\" | dd of=$f bs=1 seek=10 count=1 conv=notrunc; echo; cmp -b -c $f $f.bak; md5sum $f $f.bak)\n</code></pre> </li> </ul>"},{"location":"Linux/secure_boot/#resources","title":"Resources","text":"<ul> <li>General Info:<ul> <li>NSA:<ul> <li>NSA Pdf</li> <li>Hardware-and-Firmware-Security-Guidance Repo</li> <li>UEFI DEFENSIVE PRACTICES GUIDANCE</li> </ul> </li> <li>Rod Smith Managing EFI Boot Loaders for Linux: Dealing with Secure Boot</li> <li>Take Control of Your PC with UEFI Secure Boot</li> </ul> </li> <li>Securing the Boot Process<ul> <li>SecureBoot</li> </ul> </li> <li>Guides:<ul> <li>Very good guide: Linux Mint 19: Secure Boot</li> <li>Secure Boot with GRUB 2 and signed Linux images and initrds</li> <li>A repo with a script where most of the things is implemented</li> </ul> </li> <li> <p>Yubikey PIV:</p> <ul> <li>Harden your Linux UEFI Secure Boot using GRUB signature checking and a Yubikey</li> </ul> </li> <li> <p>Kernel modules signing:</p> <ul> <li>Kernel module signing facility</li> <li>How to sign a kernel module Ubuntu 18.04</li> <li>How to verify a kernel module signature?</li> <li>Signing a compressed kernel module for use with Secure Boot</li> <li>Sign a module after kernel compilation</li> </ul> </li> <li>Other<ul> <li>Lynis, an introduction</li> <li>safeboot: Booting Linux Safely</li> <li>PDF Presentation explaining risks and mitigations and phases.</li> <li>Methods for firmware signature</li> </ul> </li> </ul>"},{"location":"Linux/software/","title":"Software","text":""},{"location":"Linux/software/#tests","title":"Tests","text":"<ul> <li>Unit-tests: are isolated tests of functions/methods. Only allowed to use RAM &amp; CPU (no network or disk)<ul> <li>Mocks &amp; Fakes</li> </ul> </li> <li>Integration tests</li> <li>Performance testing - Measuring the latency or throughput of your application or service.</li> <li>Load and scalability testing - Testing your application or service under higher and higher load.</li> <li>Fault-tolerance testing - Testing your application\u2019s behavior as different dependencies either fail or go down entirely.</li> </ul>"},{"location":"Linux/tools_and_utils/","title":"Tools &amp; Utils","text":""},{"location":"Linux/tools_and_utils/#duplicate-files","title":"Duplicate files","text":"<p>Find: <code>find ~/Videos/ -type f -print0 | xargs -0 -P 16 -L 1 md5sum | sort | uniq -D -w 32</code></p> <p>Delete duplicates:</p> <ol> <li>Save the output of the above command in a file (db.txt), and then</li> <li> <p>Execute this:</p> nano ~/remove-duplicates.fish<pre><code>#!/usr/bin/env fish\n\nset db_path $argv[1]\n\nif test -z $db_path\n    echo \"Please provide the path to the file that contains the MD5 hashes and file paths.\"\n    exit 1\nend\n\nset prev_seen_hash \"\"\n\nfunction maybe_delete_file --argument-names file\n    if test -z $DELETE_DUPLICATES_DRY_RUN\n        echo \"Deleting \\\"$file\\\"...\"\n        set fish_trace 1\n        rm -f \"$file\"\n        set fish_trace 0\n    else\n        echo \"Would delete (dry-run): $argv\"\n    end\nend\n\ncat $db_path | while read -l line\n    set -l components (string split \" \" -- $line)\n    set curr_hash $components[1]\n    set curr_file $components[3..-1]\n\n    if test \"$prev_seen_hash\" = \"$curr_hash\"\n        maybe_delete_file $curr_file\n    end\n    set prev_seen_hash $curr_hash\nend\n</code></pre> </li> </ol>"},{"location":"Linux/tools_and_utils/#compression","title":"Compression","text":"zstd <p>A directory: <pre><code># Compress:\ntar -I \"zstd --threads 30 --ultra -19 --memory 8192\" -cf scripts.tar.zst scripts/\n\n# Decompress:\ntar --zstd -xf scripts.tar.zst\n</code></pre></p> <p>A single file:</p> <pre><code># Compress:\nzstd --compress --threads 30 --ultra -19 --memory 8192 -o file.txt.zstd file.txt\n\n# Decompress:\nzstd --decompress file.txt.zstd\n</code></pre> <p>A couple of observations:</p> <ul> <li>zstd uses cores up to the compression level of 19 (including).</li> <li><code>--ultra -22</code> gives the best compression</li> </ul>"},{"location":"Linux/tools_and_utils/#alternatives","title":"Alternatives","text":"<p>Add clang alternatives:</p> <pre><code>sudo update-alternatives                                             \\\n      --install /usr/bin/clang   clang   /usr/bin/clang-3.8     50   \\\n      --slave   /usr/bin/clang++ clang++ /usr/bin/clang++-3.8        \\\n      --slave   /usr/bin/lldb    lldb    /usr/bin/lldb-3.8           \\\n      --slave   /usr/bin/llvm-symbolizer llvm-symbolizer /usr/bin/llvm-symbolizer-3.8\n</code></pre> <p>Display info about given alternative:</p> <pre><code>update-alternatives --display clang\nclang - auto mode\n  link currently points to /usr/bin/clang-3.5\n/usr/bin/clang-3.5 - priority 50\n  slave clang++: /usr/bin/clang++-3.5\n  slave lldb: /usr/bin/lldb-3.5\nCurrent 'best' version is '/usr/bin/clang-3.5'.\n</code></pre>"},{"location":"Linux/tools_and_utils/#permissions","title":"Permissions","text":"<p>Restore default permissions (<code>x</code> for dirs, no <code>x</code> for files):</p> chmod with <code>X</code>find + chmodACL <pre><code>chmod -R u=rwX,g=rwX,o=rwX ${HOME}\n</code></pre> <p><code>X</code> permission: execute/search only if the file is a directory or already has execute permission for some user.</p> <pre><code>find ${HOME} -type f -exec chmod 0664 {} +\nfind ${HOME} -type d -exec chmod 0775 {} +\n</code></pre> <p>Note, unlike <code>X</code>, it will remove <code>x</code> permission from files.</p> <pre><code>setfacl -dm u::rws,g::rwx,o::rx /dir/\n</code></pre>"},{"location":"Linux/tools_and_utils/#initrdimg","title":"initrd.img","text":"<ul> <li>Extract <code>initrd.img</code>: <code>unmkinitramfs /boot/initrd.img-5.15.0-30-generic ../new-init/</code></li> </ul>"},{"location":"Linux/tools_and_utils/#hash-of-a-directory","title":"Hash of a directory","text":"<pre><code>find ./ -type f -exec sha256sum {} + | sha256sum\n</code></pre>"},{"location":"Linux/tools_and_utils/#mouse-scroll-speed","title":"Mouse scroll speed","text":"<p>See askubuntu.</p>"},{"location":"Linux/usb_udev/","title":"USB &amp; UDEV","text":""},{"location":"Linux/usb_udev/#usb","title":"USB","text":"<ul> <li>List usb devices: <code>lshw</code>, <code>lsusb # -vvv</code>, <code>usb-devices</code>. GUI: <code>sudo usbview</code>.</li> <li> <p>Get paths of a device: When you insert a device a number of paths on filesystem gets associated with it.   Here is how you can find all of them.</p> <ul> <li>While running: <code>udevadm monitor --property</code></li> <li>Insert your device, and find string like <code>DEVNAME=/dev/bus/usb/003/006</code> in the output.</li> </ul> </li> <li> <p>Get extended permissions: <code>getfacl /dev/bus/usb/001/002</code></p> </li> </ul>"},{"location":"Linux/usb_udev/#udev","title":"udev","text":"<p>Docs: debian.org/udev, freedesktop.org multiseat, intro.</p>"},{"location":"Linux/usb_udev/#config-file-discovery-rules","title":"Config file discovery rules","text":"<ul> <li><code>/run/udev/rules.d</code>: supposed to for overwriting by administrator</li> <li><code>/etc/udev/rules.d</code>: supposed to for overwriting by administrator</li> <li><code>/lib/udev/rules.d</code>: Packages install rules here.</li> </ul> <p>If a file with the same name is present in more than one of these directories then 1st one wins.</p> <p>Files in there are parsed in alphabetical order, as long as the name ends with <code>.rules</code>.</p>"},{"location":"Linux/usb_udev/#attributes-by-path","title":"Attributes by path","text":"<p>Once you have a device path (see above), you can:</p> <ul> <li> <p>Get canonical path: <code>udevadm info -q path -n /dev/bus/usb/001/002</code> will print   <code>/devices/pci0000:00/0000:00:01.2/0000:02:00.0/0000:03:08.0/0000:05:00.1/usb1/1-1</code>.</p> </li> <li> <p>Get all its attributes:</p> <ul> <li><code>udevadm info -a -n /dev/bus/usb/001/002</code> or</li> <li><code>udevadm info -a -p (udevadm info -q path -n /dev/bus/usb/001/002)</code></li> </ul> </li> <li> <p>Simulate rule execution: <code>udevadm test (udevadm info -q path -n /dev/bus/usb/003/006)</code></p> </li> </ul>"},{"location":"Linux/usb_udev/#example","title":"Example","text":"<p>Example of running a script on new flash-drive insertion.</p> <p>Add the following file:</p> /etc/udev/rules.d/80-local.rules<pre><code>SUBSYSTEM==\"block\", ACTION==\"add\", RUN+=\"/usr/local/bin/trigger.sh\"\n</code></pre> <p>Reload rules: <code>udevadm control --reload</code></p> <p>Refining the rule into something useful:</p> <ul> <li><code>lsusb: Bus 003 Device 005: ID 03f0:3307 TyCoon Corp.</code> In this example, the <code>03f0:3307</code> before   <code>TyCoon Corp.</code> denotes the <code>idVendor</code> and <code>idProduct</code> attributes. You can also see these numbers   in the output of <code>udevadm info -a -n /dev/sdb | grep vendor</code>, but I find the output of lsusb a   little easier on the eyes.</li> <li>You can now include these attributes in your rule:     /etc/udev/rules.d/80-local.rules<pre><code>SUBSYSTEM==\"block\", ATTRS{idVendor}==\"03f0\", ACTION==\"add\", RUN+=\"/usr/local/bin/thumb.sh\"\n</code></pre></li> </ul>"},{"location":"Linux/usb_udev/#example-of-removing-tags-uaccess-and-seat-tags","title":"Example of removing tags uaccess and seat tags","text":"/etc/udev/rules.d/99-multiseat-fixes.rules<pre><code>SUBSYSTEM==\"video4linux\", ACTION==\"add\", RUN=\"/usr/local/bin/trigger.sh\"\nSUBSYSTEM==\"video4linux\", ACTION==\"add\", TAG-=\"uaccess\"\nSUBSYSTEM==\"video4linux\", ACTION==\"add\", TAG-=\"seat\"\n</code></pre> <p>Unfortunately, it means that the file associated with the device will have root as its owner, and therefore it will not be accessible by neither of the users. Solution is to add both users to video group:</p> /usr/local/bin/trigger.sh<pre><code>#!/usr/bin/bash\n/usr/bin/date &gt;&gt; /tmp/udev.log\n</code></pre>"},{"location":"Linux/usb_udev/#example-3","title":"Example 3","text":"sudo nano /usr/lib/udev/rules.d/91-keyboard.rules<pre><code>SUBSYSTEM==\"hidraw\", ATTRS{idVendor}==\"1050\", ATTRS{idProduct}==\"0113|0114|0115|0116|0120|0200|0402|0403|0406|0407|0410\", ACTION==\"add\", GROUP=\"seckey\" SYMLINK+=\"myusbkey\"\n</code></pre>"},{"location":"Linux/video_editing/","title":"Video editing","text":""},{"location":"Linux/video_editing/#davinci","title":"DaVinci","text":"<ul> <li><code>sudo apt install pulseaudio pulseaudio-utils pulseaudio-module-x11 libasound2-plugins</code></li> <li><code>LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libglib-2.0.so.0 /opt/resolve/bin/resolve</code></li> <li>Tutorial / Intro.</li> <li>Changing speed.</li> </ul> <p>Below are stages of workflow in Davinci.</p> <p>Re-encode</p> <p>See intermediate codecs below.</p> <p>New Project</p> <ul> <li>Create new project.</li> <li>Choose resolution (UHD) &amp; fps (60fps) of timeline (this is the most important part)</li> <li>Choose same or lower resolution in Video Monitoring.</li> </ul> <p>Import media, organise, mark</p> <ul> <li>On the \u201cMedia tab\u201d import media.</li> <li>Merge multiple physical videos into a single logical one: put them on timeline (in the Edit tab) -&gt; select -&gt;   right click -&gt; New Compound Clip</li> <li>Organise &amp; Cut<ul> <li>Use bins, for example<ul> <li>a bin for clips on timeline vs not-yet-on-timelne</li> <li>bin with timelapses</li> <li>etc..</li> </ul> </li> <li>Use markers: select clip and press <code>M</code>. Press it a second time to adjust colour/text.</li> <li>Use the blade tool</li> </ul> </li> <li>Use multiple timelines: At the upper-left corner of timeline, click \u201cTimeline view options\u201d button, press   \u201cStacked timelines\u201d, at the upper-right corner, a new button with plus sign appears, press it.</li> </ul> <p>Cutting</p> <ul> <li>Temporarily speed up video: j (speeds up backward), k, l (speeds up forward).</li> <li>Move cursor to the edges of clips and adjust their length/start/end. You can always expand later (nothing is removed).</li> <li>Use both viewports to adjust start/end with high precision.</li> <li>Use Blade tool: <code>B</code>. Note, blade tool does not remove anything, you can you expand again the clip later.</li> <li>Cut from curr pos to the right: <code>Ctrl+Shift+]</code></li> <li>Cut from curr pos to the left: <code>Ctrl+Shift+[</code></li> </ul>"},{"location":"Linux/video_editing/#other-tools","title":"Other Tools","text":""},{"location":"Linux/video_editing/#ffmpeg","title":"ffmpeg","text":"<p>List available encoders: <code>ffmpeg -encoders</code></p>"},{"location":"Linux/video_editing/#mencoder","title":"Mencoder","text":"<p>Reduce resolution of video:</p> <pre><code>mencoder -aid 1 -slang eng  -ovc lavc -vf scale -zoom -xy 640 -oac mp3lame -lameopts cbr:br=160 Click.2006.720p.BluRay.ac3.x264-HqF.mkv -o click.avi\n</code></pre>"},{"location":"Linux/video_editing/#recording","title":"Recording","text":"<ul> <li>OBS Studio</li> <li>SimpleScreenRecorder: a very user-friendly software which has a wizard-like setup process.</li> <li>Kazam</li> <li>VokoScreen</li> <li>Peek</li> <li> <p>recordmydesktop</p> <p>Record video from desktop: <pre><code>recordmydesktop --no-sound --v_bitrate=2000000 --width=1500 --height=1380 --fps 29 \\\n                --full-shots --no-wm-check --workdir /mnt/freedata/home/Void -o myfile\n</code></pre></p> </li> </ul>"},{"location":"Linux/video_editing/#codecs","title":"Codecs","text":"<p>Main doc. Comparison table.</p> <p>There are several groups of codecs for different purposes:</p>"},{"location":"Linux/video_editing/#capture-codecs","title":"Capture codecs","text":"<p>Codecs that are used by device that records a video:</p> <p>Most consumer-grade devices use H.264 codec because it is highly compressed. But it is not the best codec for editing because it is very computation-heavy.</p>"},{"location":"Linux/video_editing/#edit-codecs","title":"Edit codecs","text":"<p>Codecs that used for editing, intermediate codecs: <code>DNxHD</code>, <code>DNxHR</code>, <code>ProRes</code> and <code>Cineform</code>. If your camera is not using them directly, you will need to convert source video to one of them.</p> <p>More info:</p> <ul> <li>This means that they\u2019re designed to be used to trans-code footage from other sources into a form that\u2019s easy for video editing programs to work with while maintaining quality. So, unlike most h.264 implementations, they focus on low CPU usage, retaining as much detail as possible, and an ability to be re-compressed several times without significant loss in quality. They have larger bitrates than consumer video codecs, but they still represent a significant space savings over fully uncompressed video.</li> </ul>"},{"location":"Linux/video_editing/#export-codec","title":"Export codec","text":"<p>A highly compressed codec, such as H.264, should be fine.</p>"},{"location":"Linux/video_editing/#intermediate-codecs","title":"Intermediate codecs","text":""},{"location":"Linux/video_editing/#dnxhr","title":"DNxHR","text":"<p>DNxHR is for resolutions bigger than 1080p (2K, 4K, and 8K) (as opposed to DNxHD).</p> <pre><code>ffmpeg -ss 00:04:00 -i out.mp4 -c:v dnxhd -profile:v dnxhr_hq  -pix_fmt yuv422p     out_dnxhd_dnxhr.mov\nffmpeg -ss 00:04:00 -i out.mp4 -c:v dnxhd -profile:v dnxhr_hqx -pix_fmt yuv422p10le out_dnxhd_dnxhr_444.mov\nffmpeg -ss 00:04:00 -i out.mp4 -c:v dnxhd -profile:v dnxhr_444 -pix_fmt yuv444p10le out_dnxhr_444.mov\n</code></pre> <p>Instead of <code>_hq</code> in the name of profile, you can specify:</p> <ul> <li><code>LB</code> \u2014 Low Bandwidth. 8-bit 4:2:2 (yuv422p).</li> <li><code>SQ</code> \u2014 Standard Quality. 8-bit 4:2:2 (yuv422p). Suitable for delivery format.</li> <li><code>HQ</code> \u2014 High Quality. 8-bit 4:2:2 (yuv422p).</li> <li><code>HQX</code> \u2014 High Quality. 10-bit 4:2:2 (yuv422p10le). UHD/4K Broadcast-quality delivery.</li> <li><code>444</code> \u2014 Finishing Quality. 10-bit 4:4:4 (yuv444p10le). Cinema-quality delivery.</li> </ul> <p>Output format container for DNxHD is typically <code>MXF</code> or <code>MOV</code>.</p> <p>Script:</p> <pre><code># cd to a dir, where you have ./source dir and ./intermediate dir\nfor s in (ls -1 ./source)\n  set s ./source/$s\n  set d ./intermediate/(basename $s).mov\n  echo \"$s =&gt; $d\"\n  ffmpeg -i $s -c:v dnxhd -profile:v dnxhr_hqx -pix_fmt yuv422p10le $d;\nend\n</code></pre>"},{"location":"Linux/video_editing/#libxvid","title":"libxvid","text":"<p>ffmpeg -ss 00:04:00 -i out.mp4 -c:v libxvid -q:v 2  out_libxvid.mov</p>"},{"location":"Linux/video_editing/#prores","title":"ProRes","text":"<ul> <li>PROXY (bad): <code>-c:v prores_ks -profile:v 0 -qscale:v 5 -vendor ap10 -pix_fmt yuv422p10le -acodec pcm_s16le</code></li> <li>LT: <code>-c:v prores_ks -profile:v 1 -qscale:v 5 -vendor ap10 -pix_fmt yuv422p10le -acodec pcm_s16le</code></li> <li>SQ: <code>-c:v prores_ks -profile:v 2 -qscale:v 5 -vendor ap10 -pix_fmt yuv422p10le -acodec pcm_s16le</code></li> <li>422 HQ: <code>-c:v prores_ks -profile:v 3 -qscale:v 5 -vendor ap10 -pix_fmt yuv422p10le -acodec pcm_s16le</code></li> </ul>"},{"location":"Linux/video_editing/#output-export-codecs","title":"Output / export codecs","text":""},{"location":"Linux/video_editing/#h265-newbetter-codec","title":"h.265 (new/better codec).","text":"<p>See the guide.</p> You can see available options with: <code>ffmpeg -h encoder=libx265</code> <pre><code>    Supported pixel formats: yuv420p yuvj420p yuv422p yuvj422p yuv444p yuvj444p gbrp yuv420p10le yuv422p10le yuv444p10le gbrp10le yuv420p12le yuv422p12le yuv444p12le gbrp12le gray gray10le gray12le\nlibx265 AVOptions:\n  -crf               &lt;float&gt;      E..V...... set the x265 crf (from -1 to FLT_MAX) (default -1)\n  -qp                &lt;int&gt;        E..V...... set the x265 qp (from -1 to INT_MAX) (default -1)\n  -forced-idr        &lt;boolean&gt;    E..V...... if forcing keyframes, force them as IDR frames (default false)\n  -preset            &lt;string&gt;     E..V...... set the x265 preset\n  -tune              &lt;string&gt;     E..V...... set the x265 tune parameter\n  -profile           &lt;string&gt;     E..V...... set the x265 profile\n  -x265-params       &lt;dictionary&gt; E..V...... set the x265 configuration using a :-separated list of key=value parameters\n</code></pre> <ul> <li> <p>Use <code>-ss 00:00:20 -t 00:40:00</code> before <code>-i</code> to specify start &amp; duration of the clip to encode (for faster tests)</p> </li> <li> <p>Add <code>-loglevel debug</code> for more info.</p> </li> <li> <p>Choose crf:</p> <ul> <li>No difference in high-contrast areas between <code>-crf</code> 10, 14 18, 19, 20 (21 &amp; 22 barely differs, but   you cannot tell which one is worse).<ul> <li>24 is still perfectly fine, but you can tell the difference.</li> <li>25 \u2014 this is where compression starts to get noticeable.</li> <li>In other words, 24 +-1 is good for distribution.</li> </ul> </li> <li>As for clouds (low-contrast) regions:<ul> <li><code>crf</code> 16 is worse than the original.</li> <li><code>crf</code> 12 same as the original.</li> <li>In other words, 12-14 is good for personal use.</li> </ul> </li> </ul> </li> <li> <p>Example of command:</p> do not forget to remove -ss and -t<pre><code>cd ~/Videos/export/\nset basename \"Swiss-Part-1.2\";\nset codec libx265;\nset crf 24;          # Lower is better quality, 12 for internal use, 24 for sharing\nset preset veryslow; # medium, slow, veryslow\nset pix_fmt yuv420p;\nffmpeg -ss 00:00:40 -t 00:00:10 -i $basename.mov -c:v $codec -crf $crf -preset $preset -pix_fmt $pix_fmt -c:a aac -b:a 192k \\\n$basename-$codec-crf=$crf-preset=$preset-pix_fmt=$pix_fmt.mkv\n</code></pre> </li> <li> <p>Reduce priority: <code>sudo renice 19 -p (pgrep -x ffmpeg)</code>.</p> </li> </ul>"},{"location":"Linux/video_editing/#vp9-produces-much-larger-output","title":"VP9 (produces much larger output)","text":"<p>Single-pass:</p> <pre><code>set basename \"Swiss-Part-3.2\";\nset codec libvpx-vp9;\nset crf 38;         # Lower is better quality. 0\u201363\nset deadline best;  # realtime, good, best\nset passes single\nset pix_fmt yuv420p;\nffmpeg -ss 00:00:20 -t 00:00:40 -i $basename.mov -c:v $codec -crf $crf  -b:v 0 -deadline $deadline -cpu-used 0 -pix_fmt $pix_fmt -c:a libopus -b:a 192k -row-mt 1 $basename-$codec-crf=$crf-$passes-pass-deadline=$deadline-pix_fmt=$pix_fmt.webm\n</code></pre> <p>Comparison of qualities\u2019 parameters of vp9 and h.265:</p> <ul> <li>crf=30 of vp9 (visual quality is better)</li> <li>crf=24 of h.265 is ~same as crf=38 of vp9</li> <li>crf=40 of vp9 (visual quality is worse)</li> </ul> <p>Two-pass:</p> <pre><code>set basename \"Swiss-Part-3.2\";\nset codec libvpx-vp9;\nset crf 20;         # Lower is better quality. 0\u201363\nset deadline best;  # realtime, good, best\nset passes 2\n# set pix_fmt yuv420p;\nffmpeg -ss 00:00:20 -t 00:00:40 -i $basename.mov -c:v $codec -b:v 0 -crf $crf -pass 1 -deadline $deadline -cpu-used 0 -an -f null /dev/null\nffmpeg -ss 00:00:20 -t 00:00:40 -i $basename.mov -c:v $codec -b:v 0 -crf $crf -pass 2 -deadline $deadline -cpu-used 0 -c:a libopus -b:a 192k -row-mt 1 $basename-$codec-crf=$crf-$passes-pass-deadline=$deadline-pix_fmt=$pix_fmt.webm\n</code></pre> <p>Note: two-pass quality is substatially worse than 1 pass quality, so you need to take this into account by lowering the crf value.</p>"},{"location":"Linux/video_editing/#h264-old-codec","title":"h.264 (old codec).","text":"<p>See the guide.</p> <p><code>ffmpeg -i LakeDistrict2.mov -c:v libx264 -crf 16 -preset veryslow -c:a copy LakeDistrict2_crf_16_veryslow.mkv</code></p> <ul> <li>Pixel format is not supported on phones and mplayer (<code>-pix_fmt yuv420p</code> is needed?)</li> <li>You might want to to consider adding <code>-x264-params opencl=true</code>, but see below<ul> <li>But you you probably do NOT want to add <code>-hwaccel auto</code>. Hardware encoders typically generate output of   significantly lower quality than good software encoders like x264, but are generally faster and do not   use much CPU resource. (That is, they require a higher bitrate to make output with the same perceptual   quality, or they make output with a lower perceptual quality at the same bitrate.)</li> </ul> </li> </ul>"},{"location":"Linux/apps/bash/","title":"Bash","text":""},{"location":"Linux/apps/bash/#prints-sources-of-bash-function","title":"Prints sources of bash function:","text":"<pre><code>sample_function() {\n  echo \"Hello, World!\"\n}\n\n\ntype -a sample_function\n</code></pre>"},{"location":"Linux/apps/cmake/","title":"CMake","text":""},{"location":"Linux/apps/cmake/#debuging","title":"Debuging","text":"<ul> <li>Debug output: <code>-LAH --debug-output --trace-expand</code></li> <li>Variable changes in cmake: <code>variable_watch(CMAKE_INSTALL_LIBDIR)</code></li> </ul>"},{"location":"Linux/apps/cmake/#dependency-graph-1","title":"Dependency graph \u2014 [1]:","text":"<p>Option 1: <pre><code>set_property(GLOBAL PROPERTY GLOBAL_DEPENDS_DEBUG_MODE 1)\n</code></pre></p> <p>Option 2: <pre><code>cmake --graphviz=test.graph \ndotty test.graph\n</code></pre></p>"},{"location":"Linux/apps/cmake/#main-commands","title":"Main commands","text":"<ul> <li><code>add_executable</code><code>(tests testmain.cpp)</code> or <code>add_library</code><code>(catch INTERFACE)</code><ul> <li><code>target_compile_features</code><code>(catch INTERFACE cxx_std_11)</code></li> <li><code>set_target_properties</code><code>(myTarget PROPERTIES CXX_STANDARD 11 CXX_STANDARD_REQUIRED YES CXX_EXTENSIONS NO)</code></li> </ul> </li> <li><code>target_include_directories</code><code>(catch INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/include)</code></li> <li><code>target_compile_definitions</code><code>(tests PRIVATE CATCH_CONFIG_CONSOLE_WIDTH=60)</code></li> <li><code>target_link_libraries</code><code>(&lt;target&gt; &lt;PRIVATE|PUBLIC|INTERFACE&gt; &lt;item&gt;... [&lt;PRIVATE|PUBLIC|INTERFACE&gt; &lt;item&gt;...]...)</code></li> </ul>"},{"location":"Linux/apps/cmake/#create-proxy-targets","title":"Create proxy targets","text":"<p>Src.</p> <pre><code>find_package (libjpeg)\nif (NOT TARGET libjpeg::libjpeg)\n    find_package (JPEG REQUIRED)\n    add_library (libjpeg::libjpeg INTERFACE IMPORTED)\n    target_link_libraries (libjpeg::libjpeg PUBLIC JPEG::JPEG)\n    message (STATUS \"using system provided JPEG library\")\nelse()\n    message (STATUS \"using conan provided JPEG library\")\nendif()\n\ntarget_link_libraries (your_project_target PRIVATE libjpeg::libjpeg)\n</code></pre>"},{"location":"Linux/apps/cmake/#cmake-for-monorepos","title":"CMake for monorepos","text":""},{"location":"Linux/apps/cmake/#the-problem","title":"The problem","text":"<p>Sometimes the default CMake approach is too monolithic. This is especially relevant in case of monorepos (which tend to be large and include sub-project of multiple teams, which you do not want to build at all).</p> <ul> <li>For example, with the default cmake, given a monorepo, I cannot build a specific (single) sub-project.   I can only build the entire repo.</li> <li>Another (even more important) consequence is that the decision as to whether to add <code>add_subdirectory(dependencyA)</code>   in the given <code>CMakeLists.txt</code> or not, is not local. I know that my target depends on <code>dependencyA</code>, but   I do not know (locally, in the given <code>CMakeLists.txt</code>) whether it has already been included or not by a   parent <code>CMakeLists.txt</code>.</li> <li>Finally, with the default cmake approach I have to remember both: (1) target name   (to specify it in <code>target_link_libraries()</code>) and (2) target path (to specify it in <code>add_subdirectory()</code>).   Alternatively, we could auto-generate target names based on its path, and require to remember only paths.</li> </ul>"},{"location":"Linux/apps/cmake/#the-goal","title":"The goal","text":"<p>The goal is to be able to write CMakeLists in this way:</p> <ul> <li> <p>Adding an executable:</p> my/super/project/se2/CMakeLists.txt<pre><code>add_exec(se2 main.cpp)\ndepends_upon(nested/util)    # &lt;-- Just list dependencies of the executable, regardless of\ndepends_upon(my/super/lib)   #     whether they were included by someone else or not\n</code></pre> </li> <li> <p>Adding a library:</p> my/super/lib/CMakeLists.txt<pre><code>add_static_library(pci.h pci.cc)   # &lt;-- no need to come up with library name\ndepends_upon(nested/util)\n</code></pre> </li> <li> <p>And configure in this way:</p> <pre><code>cmake root/cmake/dir -DDIRS_TO_BUILD=\"my/super/project/se2\"  # &lt;-- specify only one sub-project to build\n</code></pre> </li> </ul>"},{"location":"Linux/apps/cmake/#a-prototype","title":"A prototype","text":"<p>Implementation of the functions is pretty straighforward \u2014 we just need:</p> <ul> <li>to maintain a list of processed directories (<code>processed_paths</code>)</li> <li>and to introduce our own <code>depends_upon(directory)</code> that will <code>add_subdirectory(directory)</code>   only if it has not yet been added in the <code>processed_paths</code>:</li> </ul> root CMakeLists.txt<pre><code>set(processed_paths \"\" CACHE INTERNAL \"\")\n\nmacro(set_if_not_set variable)\n   if(NOT DEFINED ${variable})\n      set(${variable} ${ARGN})\n   endif()\nendmacro()\n\n\nfunction(get_default_target_name ret)\n   file(RELATIVE_PATH relative_path ${PROJECT_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR})\n   string(REPLACE \"/\" \"-\" dashed_name ${relative_path})\n   set(${ret} \"${dashed_name}\" PARENT_SCOPE)\nendfunction()\n\n\nmacro(add_static_library)\n   get_default_target_name(default_target_name)\n   set_if_not_set(current_target ${default_target_name})\n   message(\"SubProjectBuilder: add_static_library: Adding STATIC library ${current_target}, with files: ${ARGV}\")\n   add_library(${current_target} STATIC ${ARGV})\nendmacro()\n\n\nmacro(add_exec name)\n   set(current_target ${name})\n   message(\"SubProjectBuilder: add_exec: Adding executable ${ARGV}\")\n   add_executable(${ARGV})\nendmacro()\n\n\nfunction(add_subdirectory_if_not_added name)\n   # message(\"SubProjectBuilder: add_subdirectory_if_not_added: ARGV: ${ARGV}, processed_paths: ${processed_paths}\")\n   string(REPLACE \"/\" \"-\" dashed_name ${name})\n   if(\"${processed_paths}\" MATCHES \"X${dashed_name}X\")\n      # message(\"SubProjectBuilder: add_subdirectory_if_not_added: dashed_name: ${dashed_name} found in the list of processed paths, ignoring it...\")\n      return()\n   endif()\n\n   # message(\"SubProjectBuilder: add_subdirectory_if_not_added: dashed_name: ${dashed_name} was not found in the list of processed paths, adding it...\")\n   set(local_processed_paths ${processed_paths})\n   list(APPEND local_processed_paths \"X${dashed_name}X\")\n   # message(\"SubProjectBuilder: add_subdirectory_if_not_added: local_processed_paths: ${local_processed_paths}\")\n   set(processed_paths \"${local_processed_paths}\" CACHE INTERNAL \"\")\n\n   set(backup_current_target ${current_target})\n   unset(current_target)\n   message(\"SubProjectBuilder: add_subdirectory_if_not_added: recursing to: ${name}\")\n   add_subdirectory(${PROJECT_SOURCE_DIR}/${name} ${PROJECT_BINARY_DIR}/${name})\n   set(current_target ${backup_current_target})\nendfunction()\n\nfunction(depends_upon paths)\n   # message(\"SubProjectBuilder: depends_upon: name: ${current_target}, path: ${path}\")\n   foreach(path IN LISTS ARGV)\n      add_subdirectory_if_not_added(${path})\n      string(REPLACE \"/\" \"-\" dashed_name ${path})\n      target_link_libraries(${current_target} ${dashed_name})\n   endforeach()\nendfunction()\n\n\n\n# =================================================================================================\n\n\ninclude_directories(.)\n\nforeach(target_name IN LISTS DIRS_TO_BUILD)\n   add_subdirectory_if_not_added(${target_name})\nendforeach()\n</code></pre>"},{"location":"Linux/apps/fail2ban/","title":"fail2ban","text":"<ul> <li>Get the status: <code>fail2ban-client status</code></li> <li>Get the status of a specific jail: <code>fail2ban-client status sshd</code></li> <li>Unban: <code>fail2ban-client set sshd unbanip 1.2.3.4</code></li> <li>Ban: <code>fail2ban-client set sshd banip 1.2.3.4</code></li> </ul>"},{"location":"Linux/apps/git/","title":"git","text":""},{"location":"Linux/apps/git/#git-pull-force-1","title":"git pull force \u2014 [1]","text":"<p>This will:</p> <ol> <li>get rid of all local uncommited changes</li> <li>get rid of all local commits</li> <li>and bring your local branch in sync with remote</li> </ol> <pre><code>git fetch &amp;&amp; git reset --hard @{upstream}\n</code></pre>"},{"location":"Linux/apps/git/#sign-verify-commits","title":"Sign &amp; Verify commits","text":"<p>Official git docs and github docs</p>"},{"location":"Linux/apps/git/#signing-commits","title":"Signing commits","text":"<ul> <li>Tell git to sign commits: <code>git config commit.gpgsign true # --global</code></li> <li>Specify what key to use by default:<ul> <li>Choose the fingerprint of an <code>S</code> key: <code>gpg --list-secret-keys --keyid-format=long</code></li> <li><code>git config user.signingkey 0A46826A! # --global</code></li> </ul> </li> <li>When committing add <code>-S</code>: <code>git commit -S -m \"Test signing\"</code></li> <li>You might want to add gpg key to github, export it via: <code>gpg --export --armour  --fingerprint ...</code></li> </ul>"},{"location":"Linux/apps/git/#verification","title":"Verification","text":"<ul> <li>During pull: <code>git pull --verify-signatures</code><ul> <li>Make it the default: <code>git config merge.verifySignatures true # --global</code></li> </ul> </li> <li>In log: <code>git log --show-signature</code><ul> <li>Make it the default: <code>git config log.showSignature true # --global</code></li> </ul> </li> </ul>"},{"location":"Linux/apps/git/#grep-history","title":"grep history","text":"<p>Look for the given regex: <code>git log -G \"#include &lt;sys/ustat.h&gt;\"</code></p> <p>Look at the number of occurrences: <code>git log -S \"#include &lt;sys/ustat.h&gt;\"</code></p>"},{"location":"Linux/apps/git/#multiple-branches-simultaneously-in-a-single-repo","title":"Multiple branches simultaneously (in a single repo)","text":"<p><code>git worktree</code> makes is possible to materialise multiple branches simultaneously and work with them as usual in a single git repo:</p> <ul> <li>Clone repo with master going to a nested directory:   <code>mkdir ~/devel/ybd &amp;&amp; cd ~/devel/ybd &amp;&amp; git clone git@bitbucket.org:yellowbrickdata/ybd.git master  --separate-git-dir=.git</code></li> <li>Checkout worktree that you need (repeat this as many times as you need): <code>git worktree add cloud_native</code></li> </ul> <p>Operations:</p> <ul> <li> <p>add worktree: <code>git worktree add &lt;path&gt; &lt;commit-ish&gt;</code></p> <p>If commit-ish is a branch name is has not yet been checked out locally, then git will create a tracking branch for you.</p> </li> <li> <p>add worktree: <code>git worktree add --track -b DS_CN_YBD-22481-GCP-1 objst origin/DS_CN_YBD-22481-GCP-1</code></p> <p>Use this if you want to create a directory <code>objst</code> that has a branch which tracks remote branch.</p> </li> <li> <p>list worktrees: <code>git worktree list</code></p> </li> <li>move worktree from one directory to another: <code>git worktree move</code></li> <li>remove worktree: <code>git worktree remove</code></li> <li>repair</li> </ul>"},{"location":"Linux/apps/git/#common-git-config","title":"Common git config","text":"<ul> <li>Prune deleted branches automatically: <code>git config --global fetch.prune true</code></li> <li>Merge strategy: <code>git config pull.rebase true</code></li> </ul>"},{"location":"Linux/apps/git/#make-git-use-specific-ssh-key","title":"Make git use specific ssh key","text":"<pre><code>ssh-keygen -t ed25519 -f ~/asdf/priv-key\nset -x GIT_SSH_COMMAND \"ssh -i $HOME/asdf/priv-key -o IdentitiesOnly=yes\"\n</code></pre>"},{"location":"Linux/apps/git/#submodules-cheat-sheet","title":"Submodules cheat-sheet","text":""},{"location":"Linux/apps/git/#principles","title":"Principles","text":"<p>Official docs.</p> <p>There are two states:</p> <ol> <li>the state associated with git repo that is a submodule<ul> <li>and therefore you need to do all usual things with it, such as adding files, committing, pushing and so on\u2026</li> </ul> </li> <li>and the state stored in the parent repo, that describes submodules (this is in addition to usual git repo state    and operations, the parent repo also includes list of submodules, urls from which they have been clones,    branches they track, SHA \u201cpointers\u201d to commits of the branches, all of which you have to commit/pull/push).</li> </ol> <p>git submodule sync:</p> <p>Another non-obvious thing is that there are two places where repo URLs are kept: <code>.gitmodules</code> and <code>&lt;repo&gt;/.git/config</code>. If someone updates and URL of a repo, you get the changes in <code>.gitmodules</code> via git pull. But <code>&lt;repo&gt;/.git/config</code> is not updated. This is why you need to use <code>git submodule sync --recursive</code> (after <code>git pull</code>).</p> <p>Detached HEAD:</p> <p>Git \u201cmostly\u201d knows only about specific SHA of submodules. It does not (much) about branches. While <code>.gitmodules</code> (may) specify branch for a submodule, it is used only to know which branch from upstream to pull. In some sense, it should have been named <code>remote-branch</code>.</p> <p>Specifically:</p> <ul> <li><code>git submodule update --init</code> will clone leave submodules in a \u201cdetached HEAD\u201d state.</li> <li><code>git submodule update</code> without the will checkout specific sha (leaving submodule in a \u201cdetached HEAD\u201d state).     Without <code>--remote</code>, the sha will be taken from parent state, with <code>--remote</code>, the sha will be taken from     the branch specified in .gitmodules.</li> </ul> <p>Broken <code>push --recurse-submodules=on-demand</code></p> <p>Note that <code>git push --recurse-submodules=on-demand</code> is broken.</p> <p>You would expect that <code>git push</code> has the following invariant/contact: after successful push, (1) remote branch (2) remote-tracking branch and (3) local branch should have same SHA.</p> <p>This is NOT what <code>git push --recurse-submodules=on-demand</code> does. The crux of the issue is that git submodules does not know anything about branches. What <code>git push --recurse-submodules=on-demand</code> does is check if SHA of the head of the local branch exists somewhere on remote server. If it exists, it does nothing (regardless of the states of remote branch and local branch). In other words, it does not advance local branch, as regular <code>git pull</code> does, because the required commit already exists somewhere on remote. If if does not exist, it pushes the SHA.</p>"},{"location":"Linux/apps/git/#useful-config","title":"Useful config","text":"<p>All git-config options.</p> <ul> <li>Show statuses of submodules: <code>git config --global status.submodulesummary 1</code></li> <li>Fetch submodules in parallel: <code>git config --global submodule.fetchJobs 32</code></li> <li>Show diff of submodules: <code>git config --global diff.submodule diff</code></li> <li>Recurse to submodules (by default): <code>git config --global submodule.recurse true</code></li> <li>Push submodules before super-repo is pushed: <code>git config --global push.recurseSubmodules on-demand</code></li> </ul>"},{"location":"Linux/apps/git/#operations","title":"Operations","text":"<ul> <li> <p>Add a submodule in a parent repo</p> <pre><code>git submodule add -b branch_you_need git@github.com:DimanNe/result.git contrib/result/result\ngit commit -m \"Add result as a submodule\"\n</code></pre> <ul> <li> <p>Change tracking branch: <code>git submodule set-branch --branch master contrib/llvm-project</code></p> </li> <li> <p>Remove a submodule from a repo (1)</p> <ol> <li> <p>Src</p> <pre><code>git rm &lt;path-to-submodule&gt;\n</code></pre> <p>This removes the filetree at <code>&lt;path-to-submodule&gt;</code>, and the submodule\u2019s entry in the <code>.gitmodules</code> file.</p> <p>Additionally, you might want to remove <code>.git</code> directory of the submodule from <code>modules/</code>:</p> <pre><code>rm -rf .git/modules/&lt;path-to-submodule&gt;\ngit config --remove-section submodule.&lt;path-to-submodule&gt;.\n</code></pre> </li> </ol> </li> </ul> </li> <li> <p>Clone a repo with all submodules: <code>git clone --recurse-submodules git@github.com:DimanNe/scripts.git</code></p> <ul> <li> <p>or only selected submodules: (1)</p> <ol> <li> <p>here:</p> <pre><code>git clone git@github.com:DimanNe/scripts.git\ncd scripts\ngit submodule init path/to/your/submodule\ngit submodule update\n</code></pre> </li> </ol> </li> </ul> </li> <li> <p>Show diff of submodules: <code>git diff --submodule=diff</code> (or use the config above)</p> </li> <li> <p>Checkout submodules too <code>git checkout --recurse-submodules</code> (or use the config above)</p> </li> <li> <p>Checkout all submodules to their correct versions</p> <pre><code>git submodule foreach --recursive git reset --hard # &lt;--- Careful!\ngit pull &amp;&amp; git submodule sync --recursive &amp;&amp; git submodule update --init --recursive\n</code></pre> <p>Note however, that the command above will leave all submodules in detached HEAD state. You need to checkout expected branches, and then <code>git pull</code>.</p> </li> <li> <p>Blacklist submodule (do not update it)</p> <pre><code>git config submodule.contrib/mkdocs/mkdocs.update none\ngit config --unset submodule.contrib/mkdocs/mkdocs.update\n</code></pre> </li> <li> <p>Update submodule from upstream:</p> <ul> <li>One: <code>git pull &amp;&amp; git submodule sync --recursive &amp;&amp; git submodule update --remote --merge contrib/result/result/</code></li> <li>All: <code>git pull &amp;&amp; git submodule sync --recursive &amp;&amp; git submodule update --remote --merge --recursive</code></li> </ul> </li> <li> <p>Push</p> <p>As described above, does not work. So, we have to use this:</p> <p><code>git submodule foreach \"git symbolic-ref --short HEAD &gt;/dev/null 2&gt;&amp;1 &amp;&amp; git push || true\" &amp;&amp; git push</code></p> </li> </ul>"},{"location":"Linux/apps/git/#git-content-filter-driver","title":"Git Content Filter Driver","text":"<p>There is a way to comply with official company-wide code-style and work (locally) with the code formatted as you want.</p> <p>The idea is based upon the fact that it is only important to push my code in central repo in the official format, while nobody prevents me from having and working with code that is formatted in my own way.</p> <p>Luckily, git has native support for this - Git Content Filter Driver.</p>"},{"location":"Linux/apps/git/#in-gitconfig-add","title":"In <code>.git/config</code> add","text":"<pre><code>[filter \"clangformat\"]\n    smudge = .git/clang-formatter.sh .clang-format-my\n    clean = .git/clang-formatter.sh .clang-format-company\n</code></pre> <ul> <li><code>smudge</code> \u2014 the command that is called when you pull something (more precisely when git checks sources out onto your disk).</li> <li><code>clean</code> \u2014 the command that is called when you push something (more precisely when you add files in the git\u2019s staging area).</li> <li><code>.clang-format-my</code> and <code>.clang-format-company</code> \u2014 self-explanatory <code>clang-format</code> config files.</li> <li> <p><code>.git/clang-formatter.sh</code> is a small script that invokes <code>clang-format</code>. The main purpose of the script is to \u201cprepare\u201d value for   <code>-style</code> option (via awk):     <pre><code>#!/bin/bash\n                          # (1)!\nclang-format-8 -style \"{$(awk '{if ($0 !~ /#/) {if (NR&gt;1) {printf \", \"} printf $0; }}' $1)}\" -assume-filename=main.cpp\n</code></pre></p> <ol> <li>the awk script below converts contents of <code>.clang-format-my</code> (or <code>.clang-format-company</code>) into inline format: <code>-style \"{Option1: Value, ...}\"</code>,     because there is no way to specify filename with config to <code>clang-format</code></li> </ol> </li> <li> <p>do not forget to make the script executable: <code>chmod +x .git/clang-formatter.sh</code></p> </li> </ul>"},{"location":"Linux/apps/git/#in-gitinfo-add-attributes","title":"In <code>.git/info/</code> add <code>attributes</code>:","text":"<pre><code>*.c filter=clangformat\n*.h filter=clangformat\n*.cpp filter=clangformat\n*.hpp filter=clangformat\n</code></pre>"},{"location":"Linux/apps/git/#more-info-and-explanation","title":"More info and explanation\u2026","text":"<p>\u2026can be found here</p>"},{"location":"Linux/apps/git/#merge-related-tricks","title":"Merge-related tricks","text":""},{"location":"Linux/apps/git/#ignore-whitespaces","title":"Ignore whitespaces","text":"<p><code>-Xignore-all-space</code> or <code>-Xignore-space-change</code>.</p>"},{"location":"Linux/apps/git/#checkout-theirourbase-versions-of-a-conflicted-file","title":"Checkout their/our/base versions of a conflicted file","text":"<pre><code>$ git show :1:hello.rb &gt; hello.common.rb\n$ git show :2:hello.rb &gt; hello.ours.rb\n$ git show :3:hello.rb &gt; hello.theirs.rb\n</code></pre> <p>Then you can change them and finally merge: <code>git merge-file -p hello.ours.rb hello.common.rb hello.theirs.rb &gt; hello.rb</code>.</p>"},{"location":"Linux/apps/git/#same-as-above-but-in-place","title":"Same as above but in-place:","text":"<pre><code>git checkout --ours result/ErrorRepMedium.h\n</code></pre> <p>NOTE:</p> <ul> <li>During rebase (<code>git rebase master</code>), <code>--ours</code> correspond to <code>master</code>.</li> </ul>"},{"location":"Linux/apps/git/#diff-of-the-pending-merge","title":"Diff of the pending merge","text":"<ul> <li>To compare your result to what you had in your branch before the merge, in other words,   to see what changes the merge is going to introduce: <code>git diff --ours</code>.</li> <li>If we want to see how the result of the merge differed from what was on their side, you can run <code>git diff --theirs</code>.</li> </ul>"},{"location":"Linux/apps/git/#show-ourbasetheir-in-conflict-markers","title":"Show our/base/their in conflict markers","text":"<pre><code>$ git checkout --conflict=diff3 hello.rb\n\ndef hello\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; ours\n  puts 'hola world'\n||||||| base\n  puts 'hello world'\n=======\n  puts 'hello mundo'\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; theirs\nend\n\nhello()\n</code></pre>"},{"location":"Linux/apps/git/#compare-two-diffs-range-diff","title":"Compare two diffs (range-diff)","text":"<p>After a cherry-pick or merge you can check difference of two diffs (1st diff corresponds to a commit on the <code>master</code>, 2nd diff corresponds to the merge commit or cherry-picked commit):</p> <pre><code>git range-diff af05d1~1..af05d1 \\  # Range1: denotes range (consisting of 1 commit) in our branch\n               HEAD~1..HEAD        # Range2: commit on the master\n\n# or (the same as above, but shorter):\ngit range-diff af05d1^! HEAD^!\n</code></pre> <p><code>^!</code> notation represents single commit, but unlike just <code>HEAD</code> (which also represents a single commit), it denotes a range.</p> <p>Diff output is also interesting (read more about it here):</p> <pre><code>-   puts 'hola world'\n -  puts 'hello mundo'\n++  puts 'hola mundo'\n</code></pre> <ul> <li>This shows us that <code>hola world</code> was in our side but not in the working copy,</li> <li>that <code>hello mundo</code> was in their side but not in the working copy</li> <li>and finally that <code>hola mundo</code> was not in either side but is now in the working copy.</li> </ul> <p>This can be useful to review before committing the resolution.</p> <p>In other words:</p> <ul> <li><code>' -'</code> or <code>' +'</code> represents what happened in respect to (from the point of view of) the 2nd range (removed / added lines in our branch).</li> <li><code>'- '</code> or <code>'+ '</code> represents what happened in respect to (from the point of view of) the 1st range (removed / added lines in master branch - where we cherry-pick commit from).</li> </ul> <p>In this mode, the diff of diffs will retain the original diff colors, and prefix the lines with <code>-/+</code> markers that have their background red or green, to make it more obvious that they describe how the diff itself changed.</p> <pre><code>// The second '-' shows us that both lines below were removed (the first line was removed from master's commit, the second line was removed from the branch's commit).\n// However, the first line was removed from **diff** (first '-' in the first line), and replaced with the second line (first '+' in the second line).\n--    MediumHash hashTable = {distinctRows, minThreadSafeBuckets()}; // in master we removed this\n+-    MediumHash&amp; hashTable = *new MediumHash(distinctRows, minThreadSafeBuckets()); // but in the branch we removed this\n\n\n// The second '+' shows us that both lines were added (the first line was added in the master's commit, the second line was added in the branch's commit).\n// However, the first line was removed from **diff** (first '-' in the first line), and replaced with the second line (first '+' in the second line).\n-+    MediumHash hashTable = {distinctRows, BuildPartitioner::minThreadSafeBuckets()}; // in master we added this\n++    MediumHash&amp; hashTable = *new MediumHash(distinctRows, BuildPartitioner::minThreadSafeBuckets()); // but in the branch we added this\n</code></pre> <p>Another example: <pre><code>There was diff (second '-' and '+') in the branch's commit, but there is no diff between (1) master's\ndiff and (2) branch's diff (because we have space). Meaning that master has the same change.\n -    for (Row* row : packet) {\n +    for(Row* row: packet) {\n</code></pre></p> <p>The second <code>+/-</code> tells us what happened in one of the diffs (master\u2019s commit or branch\u2019s commit).</p> <p>The first <code>+/-</code> is from diff of the two diffs. If there is space, it means there is no diff (between the two diffs).</p>"},{"location":"Linux/apps/git/#default-branch-name","title":"Default branch name","text":"<pre><code>git symbolic-ref --short refs/remotes/origin/HEAD\n</code></pre>"},{"location":"Linux/apps/git/#git-svn-skip-revisions","title":"git-svn: skip revisions","text":"<p>Omit 1395620-1395673 revisions: <pre><code>git svn fetch -r1395673\ngit prune\ngit svn rebase\n</code></pre></p>"},{"location":"Linux/apps/git/#add-remote-upstream","title":"Add remote upstream","text":"<pre><code>git remote add upstream https://github.com/UPSTREAM-USER/ORIGINAL-PROJECT.git\n</code></pre>"},{"location":"Linux/apps/lldb/","title":"lldb","text":""},{"location":"Linux/apps/lldb/#attach-continue","title":"Attach &amp; Continue","text":"<ul> <li><code>sudo apt update &amp;&amp; sudo apt install -y lldb</code></li> <li><code>sudo lldb -o \"continue\" -p $(pgrep -x worker)</code></li> </ul>"},{"location":"Linux/apps/lldb/#breakpoints","title":"Breakpoints","text":"<p>Automatically perform an action on hit:</p> <pre><code>breakpoint command add 1.1\n&gt; thread backtrace\n&gt; frame variable\n&gt; process continue\n&gt; DONE\n</code></pre> <p>or via a one-lineer syntax: <pre><code>breakpoint command add 1.1 -o \"bt\"\n</code></pre></p>"},{"location":"Linux/apps/lldb/#python-scripting-in-lldb","title":"Python scripting in lldb","text":"<p>Tutorial, Reference 1,  Reference 2, Python enums.</p>"},{"location":"Linux/apps/lldb/#list-non-nullptr-elements-of-an-array","title":"List non-nullptr elements of an array","text":"<pre><code>script\ninner = lldb.frame.FindVariable(\"alienInner\")\nbuckets = inner.GetChildMemberWithName(\"mBuckets\")\ncount = inner.GetChildMemberWithName(\"mBucketCount\")\n\nfor i in range(count.signed):\n   if buckets.GetChildAtIndex(i, lldb.eNoDynamicValues, True).unsigned != 0:\n      print(f'{buckets.GetChildAtIndex(i, lldb.eNoDynamicValues, True)}')\n</code></pre>"},{"location":"Linux/apps/lldb/#use-script-from-files","title":"Use script from files","text":"<p>Create script: parray.py<pre><code>import lldb\nimport shlex\n\ndef parray(debugger, command, result, dict):\n    args = shlex.split(command)\n    va = lldb.frame.FindVariable(args[0])\n    for i in range(0, int(args[1])):\n        print va.GetChildAtIndex(i, 0, 1)\n</code></pre></p> <p>Define a command <code>parray</code> in lldb:</p> <pre><code>(lldb) command script import /path/to/parray.py\n(lldb) command script add --function parray.parray parray\n</code></pre> <p>Now you can use <code>parray</code> variable length:</p> <pre><code>(lldb) parray a 5\n(double) *a = 0\n(double) [1] = 0\n(double) [2] = 1.14468\n(double) [3] = 2.28936\n(double) [4] = 3.43404\n</code></pre>"},{"location":"Linux/apps/lldb/#another-example-of-scripting","title":"Another example of scripting","text":"<pre><code>script\n\n\ndef PackedRow_to_str(row: lldb.SBValue):\n  TAG_BIT                 = 1 &lt;&lt; 0;\n  BUCKET_TAIL_PTR_BIT     = 1 &lt;&lt; 3;\n  BUCKET_HEAD_PTR_BIT     = 1 &lt;&lt; 4;\n  FINAL_BIT               = 1 &lt;&lt; 5;\n  END_OF_BUCKET_BIT       = 1 &lt;&lt; 6;\n  NEXT_ROW_PACKET_PTR_BIT = 1 &lt;&lt; 7;\n\n  m_flags: int = row.GetChildMemberWithName(\"mFlags\").unsigned\n  result: str = f'len: {row.GetChildMemberWithName(\"mLength\").unsigned}'\n\n  if m_flags &amp; BUCKET_TAIL_PTR_BIT:\n    result += \" tail\"\n  if m_flags &amp; BUCKET_HEAD_PTR_BIT:\n    result += \" head\"\n  if m_flags &amp; FINAL_BIT:\n    result += \" final\"\n  if m_flags &amp; NEXT_ROW_PACKET_PTR_BIT:\n    result += \" ptr\"\n\n  return result\n\n\ndef print_ResizingHash_as(inner: lldb.SBValue, value_name: str = \"PackedRow\", max_count: int = None):\n  target = lldb.debugger.GetSelectedTarget()\n  packed_row_type = target.FindFirstType(value_name)\n  BLOOM_MASK = 0xFFFF000000000000\n  PTR_MASK = ~BLOOM_MASK\n  bucket_count: lldb.SBValue = inner.GetChildMemberWithName(\"mBucketCount\")\n  for i in range(min(bucket_count.signed, max_count) if max_count else bucket_count.signed):\n    bucket = buckets.GetChildAtIndex(i, lldb.eNoDynamicValues, True)\n    if bucket.unsigned == 0:\n        continue\n    bloom_val = (bucket.GetValueAsUnsigned() &amp; BLOOM_MASK) &gt;&gt; 48\n    ptr_val = bucket.GetValueAsUnsigned() &amp; PTR_MASK\n    packed_row: lldb.SBValue = target.CreateValueFromAddress(f\"i={i}\", lldb.SBAddress(ptr_val, target), packed_row_type)\n    print(f'{packed_row.AddressOf()}, bloom: {bloom_val}, {value_name}: {PackedRow_to_str(packed_row)}')\n\n\n\n\n\ninner = lldb.frame.FindVariable(\"srcInner\")\nprint_ResizingHash_as(inner, \"PackedRow\", 100)\n(PackedRow *) &amp;i=61 = 0x00007fff9e13a164, bloom: 1125899906842624, PackedRow: len: 0\n(PackedRow *) &amp;i=62 = 0x00007fff9e1202c8, bloom: 281474976710656, PackedRow: len: 0\n(PackedRow *) &amp;i=986 = 0x00007fff9e120a48, bloom: 2, PackedRow: len: 2304\n(PackedRow *) &amp;i=991 = 0x00007fff9e125a4c, bloom: 2, PackedRow: len: 23056 tail head\n(PackedRow *) &amp;i=998 = 0x00007fff9e10c8ac, bloom: 4, PackedRow: len: 34304 tail head final ptr\n(PackedRow *) &amp;i=999 = 0x00007fff9e12d27c, bloom: 8, PackedRow: len: 48 tail\n</code></pre>"},{"location":"Linux/apps/openssl/","title":"OpenSSL","text":""},{"location":"Linux/apps/openssl/#certificates","title":"Certificates","text":"<p>Print info about a certificate in\u2026</p> <ul> <li>p7b PEM: <code>openssl pkcs7 -print_certs -inform PEM -in ~/CertificationAuthority.crt</code></li> <li>p7b DER: <code>openssl pkcs7 -print_certs -inform DER -in ~/CertificationAuthority.crt</code></li> <li>x509 PEM: <code>openssl x509 -inform pem -text -noout -in ~/CertificationAuthority.crt</code></li> <li>x509 DER: <code>openssl x509 -inform der -text -noout -in ~/CertificationAuthority.crt</code></li> </ul>"},{"location":"Linux/apps/openssl/#create-bitcoin-keys","title":"Create bitcoin keys","text":"<p>See this stackexchange.</p>"},{"location":"Linux/apps/qt_qtcreator/","title":"Qt &amp; QtCreator","text":""},{"location":"Linux/apps/qt_qtcreator/#install-all-qt-dev-libraries","title":"Install all qt dev libraries","text":"<p><code>sudo apt install (apt-cache search --names-only qt | cut -d ' ' -f 1 | rg  \"libqt5\" | rg -v -- '-gles')</code></p>"},{"location":"Linux/apps/qt_qtcreator/#build-qt-from-source","title":"Build Qt from source","text":"<pre><code>apt install libclang-12-dev libclang1-12\ngit clone --recursive https://code.qt.io/qt-creator/qt-creator.git\ncd qt-creator/\ngit checkout 4.15\ncmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_PREFIX_PATH=$HOME/devel/qt5-bin ../qt-creator/ # -DCMAKE_BUILD_TYPE=RelWithDebInfo\nexport LD_LIBRARY_PATH=$HOME/devel/qt5-bin/lib/:$LD_LIBRARY_PATH\nmake -j\n</code></pre>"},{"location":"Linux/apps/qt_qtcreator/#build-qtcreator-from-source","title":"Build QtCreator from source","text":"<pre><code>apt install build-essential perl python git '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev \\\n            libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev flex bison gperf \\\n            libicu-dev libxslt-dev ruby libxcursor-dev libxcomposite-dev libxdamage-dev \\\n            libxrandr-dev libxtst-dev libxss-dev libdbus-1-dev libevent-dev libfontconfig1-dev \\\n            libcap-dev libpulse-dev libudev-dev libpci-dev libnss3-dev libasound2-dev \\\n            libegl1-mesa-dev gperf bison nodejs libasound2-dev libgstreamer1.0-dev \\\n            libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev \\\n            libgstreamer-plugins-bad1.0-dev\ngit clone git://code.qt.io/qt/qt5.git\ncd qt5\ngit checkout 5.15.2\nperl init-repository\ncd ../ &amp;&amp; mkdir build-qt5 &amp;&amp; cd build-qt5/ # find ../build-qt5/ -mindepth 1 -delete\n../qt5/configure -opensource -release -confirm-license -prefix $HOME/devel/qt5-bin\nnice -n 19 make -j25\nsudo make install\n</code></pre>"},{"location":"Linux/apps/ripgrep/","title":"ripgrep","text":"<p>guide</p> <ul> <li> <p>Example 1:</p> <pre><code>#   (1)  (2)\nrg -uu -tcpp -tc -tcmake -tmake  \"IImpl::topoffBuffers\" .\n</code></pre> <ol> <li>Do not ignore gitignore, do not ignore hidden files</li> <li>We are interested in all files related to cpp, c, make, and CMake</li> </ol> </li> <li> <p>Print capture group only: <code>rg '.*large1x1---(.*)---97' -or '$1'</code></p> </li> <li> <p>Pattern is not a regexp: <code>-F</code></p> </li> </ul>"},{"location":"Linux/apps/screen/","title":"screen","text":"<ul> <li>Create session or re-attach: <code>screen -dRS my_name</code></li> <li>Detach: <code>Ctrl+A, Ctrl+D</code></li> <li>Rename session: <code>Ctrl + a</code>, then: <code>:sessionname mySessionName&lt;ENTER&gt;</code></li> </ul>"},{"location":"Linux/apps/screen/#enable-scroll","title":"Enable scroll","text":"nano ~/.screenrc<pre><code>defscrollback 100000\ntermcapinfo xterm* ti@:te@\n</code></pre>"},{"location":"Linux/apps/sql/","title":"SQL","text":""},{"location":"Linux/apps/sql/#run-sql-against-text-files","title":"Run SQL against text files","text":"<p>There are many tools that allow you to run SQL queries against text (csv) files.</p>"},{"location":"Linux/apps/sql/#q","title":"Q","text":"<pre><code>pip install q\n... | q -d, \"SELECT min(c2), max(c3) FROM - GROUP BY c1\" | ...\n</code></pre>"},{"location":"Linux/apps/sql/#sqlite","title":"SQLite","text":"<pre><code>sqlite3 mydatabase.db\n\n.mode csv\n.import asdf.txt mytable\nSELECT min(col2), max(col3) FROM mytable GROUP BY col1;\n</code></pre>"},{"location":"Linux/apps/sql/#csvkit","title":"CSVkit","text":"<pre><code>pip install csvkit\n... | csvsql --query \"SELECT min(col2), max(col3) FROM stdin GROUP BY col1\"\n</code></pre>"},{"location":"Linux/apps/sql/#textql","title":"TextQL","text":"<pre><code>textql -header -sql \"select count() from sample_data\" sample_data.csv\n</code></pre>"},{"location":"Linux/apps/sql/#octosql","title":"OctoSQL","text":"<p>Supports: .csv, .json, Excel, Parquet.</p> <pre><code>octosql \"SELECT * FROM ./invoice2.csv\"\n</code></pre>"},{"location":"Linux/apps/sql/#dsq","title":"DSQ","text":"<p>It supports a wide range of file formats, including .csv, JSON, .tsv, Excel, Parquet, and .ods.</p> <pre><code>dsq testdata.json \"SELECT * FROM {} WHERE x &gt; 10\"\n</code></pre>"},{"location":"Linux/apps/ssh/","title":"ssh","text":""},{"location":"Linux/apps/ssh/#reverse-ssh-tunnel","title":"Reverse ssh tunnel","text":"<p>Let\u2019s say you have a RaspberryPi without a static IP and a server with a static IP, and you want to ssh from the server to your RaspberryPi.</p> <p>Run the following command on RaspberryPi: <pre><code>ssh -N -R 32003:localhost:22 tarpi@&lt;ip-of-server&gt;\n</code></pre></p> <p>It will bring <code>localhost:22</code> of RaspberryPi to <code>&lt;ip-of-server&gt;:32003</code>, so that you can ssh to RaspberryPi with <code>ssh localhost -p 32003</code></p> <p>Consider creating a restricted ssh user for port-forwarding (only).</p>"},{"location":"Linux/apps/ssh/#ssh-port-forwarding-bastions-and-proxyjumps","title":"SSH port forwarding: bastions and <code>ProxyJump</code>\u2019s","text":"<p>Sometimes there are \u201cbastion\u201d hosts: in order to ssh to <code>host2</code>, you have first have to ssh to an intermediate <code>host1</code>.</p> <p>There is proper support for this workflow in ssh: read more about <code>-J</code>, <code>-W</code> flags and <code>ProxyCommand</code> here.</p>"},{"location":"Linux/apps/ssh/#arbitrary-port-forwarding","title":"Arbitrary port forwarding","text":"<p>Suppose you have a web-server on <code>host2</code>, and this host is unreachable directly from your machine (<code>localhost</code>). The only way to reach <code>host2</code> is through intermediate host - <code>host1</code>. And you want to be able to open pages from <code>host2</code> from a browser running on your <code>localhost</code>.</p> <p>To achieve this, just run it: <pre><code>ssh -L  12345:host2:80 host1\n</code></pre> (where <code>host2</code> is directly unreachable host, <code>host1</code> - intermediate host)</p> <p>Once you run it, you can navigate to <code>http://localhost:12345</code> in your browser.</p>"},{"location":"Linux/apps/ssh/#agent-forwarding","title":"Agent forwarding","text":"<p>You might want to maintain and use a single SSH key, regardless of how many nested SSH sessions there are. By default, the key of the current localhost is used. Agent forwarding makes it possible to use a single ssh key, forwarding it from one remote host to another. (1)</p> <ol> <li> <p>Both ssh-agent as well as gpg-agent implement ssh-agent protocol. This secction describes only ssh-agent.</p> <p>See Generating ssh keys -&gt; GPG keys for more info about gpg for ssh.</p> </li> </ol> <ul> <li> <p>Ensure local ssh config allows in:</p> sudo nano /etc/ssh/ssh_config<pre><code>Host *\nForwardAgent yes\n</code></pre> </li> <li> <p>Ensure remote server allows it:</p> </li> </ul> nano /etc/ssh/sshd_config<pre><code>AllowForwardAgent yes\n</code></pre> <ul> <li>Check configuration is fine: <code>/usr/sbin/sshd -t</code></li> <li>And restart sshd: <code>service ssh restart</code></li> <li> <p>Start ssh-agent automatically:</p> .bashrc<pre><code>eval `ssh-agent`\n</code></pre> </li> </ul>"},{"location":"Linux/apps/ssh/#escape-characters","title":"Escape characters","text":"<p><code>ssh</code> has these escape characters:</p> <ul> <li><code>~.</code> \u2014 disconnect (useful if it hang).</li> <li><code>~^Z</code> \u2014 background ssh.</li> <li><code>~#</code> \u2014 list forwarded connections.</li> <li><code>~?</code> \u2014 display a list of escape characters.</li> <li> <p><code>~C</code> \u2014 open command line.</p> <p>Currently this allows the addition of port forwardings using the -L, -R and -D options. It also allows the cancellation of existing portforwardings with <code>-KL[bind_address:]port</code> for local, <code>-KR[bind_address:]port</code> for remote and <code>-KD[bind_address:]port</code> for dynamic port-forwardings. <code>!command</code> allows the user to execute a local command if the <code>PermitLocalCommand</code> option is enabled in ssh_config.</p> </li> </ul>"},{"location":"Linux/apps/ssh/#getting-ssh-fingerprint","title":"Getting ssh fingerprint","text":"<p>When you ssh to a host first time, you are supposed to verify its key fingerprint.</p> <p>You can obtain host\u2019s fingerprint in this way:</p> <pre><code>ssh-keyscan localhost 2&gt;/dev/null | ssh-keygen -lf -\n</code></pre>"},{"location":"Linux/apps/ssh/#prevent-dropping-idle-connections","title":"Prevent dropping idle connections","text":"<p>SO</p> <p>The problem is that there is something (usually a firewall or load-balancer), which is dropping idle sessions. If you configure session keepalives, the keepalives will prevent network devices from considering the session as idle.</p> sudo nano /etc/ssh/sshd_config<pre><code>ClientAliveInterval 10\nClientAliveCountMax 10\n</code></pre>"},{"location":"Linux/apps/ssh/#hardenining-publickey-only-auth-disable-passwords","title":"Hardenining \u2014 Publickey-only auth, disable passwords","text":"sudo nano /etc/ssh/sshd_config<pre><code>Protocol 2\nPubkeyAuthentication yes\nPasswordAuthentication no\nPermitEmptyPasswords no\nMaxAuthTries 3\nPermitRootLogin no\n</code></pre> <p>Or, for specific user:</p> sudo nano /etc/ssh/sshd_config<pre><code>Match User &lt;user_name_here&gt;\n   PasswordAuthentication no\n</code></pre> <p>and then: <code>sudo systemctl restart sshd</code></p> <p>A very nice tutorial on hardening SSH Server that includes things like putting SSH in TOR.</p>"},{"location":"Linux/apps/ssh/#ssh-2fa","title":"SSH + 2FA","text":"<p>You can use various 2FA apps (such as Google Authenticator) with SSH.</p>"},{"location":"Linux/apps/ssh/#sshfs","title":"sshfs","text":""},{"location":"Linux/apps/ssh/#auto-reconnect","title":"auto-reconnect","text":"<p><code>sshfs</code> allows you to mount remote computer\u2019s filesystem over network. But sometimes the connection gets broken.</p> <p>To mitigate it, you can mount in such way:</p> <pre><code>sshfs impedance:/mnt/media /mnt/media/ -o reconnect,ServerAliveInterval=1,ServerAliveCountMax=2\n</code></pre>"},{"location":"Linux/apps/ssh/#fstab","title":"fstab","text":"<p>Example of <code>fstab</code> for <code>sshfs</code>: <pre><code>sshfs#&lt;login&gt;@&lt;server&gt;:/remote/path/ /local/path fuse IdentityFile=/home/&lt;login&gt;/.ssh/id_ecdsa,idmap=user,allow_other 0 0\n</code></pre></p>"},{"location":"Linux/apps/ssh/#generating-ssh-keys","title":"Generating ssh keys","text":""},{"location":"Linux/apps/ssh/#elliptic-curves","title":"Elliptic curves","text":"<pre><code>ssh-keygen -t ed25519 # Or, another curve: ssh-keygen -t ecdsa -b 521\n</code></pre> <p>Read more about ed25519.</p>"},{"location":"Linux/apps/ssh/#keeping-keys-on-a-harware-token-aka-yubikey","title":"Keeping keys on a harware token (aka Yubikey)","text":"Advantages of Yubikeys (in comparison with storing ssh keys on a filesystem) <ul> <li>Keys are never stored on filesystem of your PC.</li> <li>It is nearly impossible   to extract (private) keys from Yubikey (and impossible without your noticing it).</li> <li>Yubikey has a hardware-backed max PIN entry counter (for example, your LUKS password can be brute-forced   arbitrarily long, but Yubikey limits the number of attempts to 3).</li> <li>Yubikeys are \u201cdetachable\u201d and can be stored in a safe/remote place.</li> <li>You do not need to insert it physically in a USB because there are NFC versions.</li> </ul> <p>There are several ways to make ssh work with keys on a Yubikey:</p> natively via FIDO/U2F-backed keysor through \u2018proxy\u2019 GPG keys FIDO/U2F-backed ssh keys security concerns <p>Note, however, that FIDO/U2F has different security properties:</p> <ul> <li>Often, only touch is neede to use the key, unlike gpg, where you have to enter PIN   code and and which limits number of failed attempts.</li> <li>It is likely that touch will be needed for each ssh-connection (which might be a problem,   if you are using ssh in a loop/script), unlike gpg, which caches your PIN for some time.</li> </ul> <p>Recent ssh versions can generate FIDO/U2F token-backed keys. This options is good when you do not need/want to create \u201cproxy\u201d GPG keys and if remote host (where you are going to ssh to, for example github) supports such keys.</p> <p>In order to generate ssh keys directly on FIDO/U2F token, use <code>-t ed25519-sk</code> or <code>-t ecdsa-sk</code>:</p> <pre><code>ssh-keygen -t ed25519-sk -O verify-required -f ~/.ssh/id_ed25519_sk\n</code></pre> <ul> <li><code>-O verify-required</code> makes the token require PIN (safer but more annoying)</li> <li><code>-O resident</code> will put key handle to token. Without the option, the token alone is not usable.</li> </ul> <p>The idea is that you create GPG keys, put them on a Yubikey, and ask <code>gpg-agent</code> to \u201cpretend\u201d to be <code>ssh-agent</code>. This option is good when you already have gpg keys.</p> <ol> <li> <p>Setup Yubikey as a SmartCard (optional):</p> <ol> <li>Buy an appropriate NFC card-reader    (for example <code>HID Identity OMNIKEY 5422 Internal USB 2.0 Grey Smart Card Reader</code>).</li> <li>Blacklist standard Linux drivers (source: 1,    2):     <pre><code>sudo rmmod pn533_usb pn533 nfc\necho \"install nfc /bin/false\" | sudo tee -a /etc/modprobe.d/blacklist.conf\necho \"install pn533 /bin/false\" | sudo tee -a /etc/modprobe.d/blacklist.conf\n</code></pre></li> <li>Install <code>libnfc</code>: <code>sudo apt install libnfc-bin pcsc-tools</code></li> <li>Verify it works: (re-)plug the NFC reader, put your Yubikey on it, scan with: <code>pcsc_scan</code> and run <code>gpg --card-edit</code>.</li> </ol> </li> <li> <p>Create GPG keys locally and move them to a Yubikey.</p> <ul> <li>You can use DrDuh\u2019s guide.</li> <li>Or you can use a script that automates it.</li> </ul> </li> <li> <p>Setup ssh&lt;\u2014&gt;gpg interaction (main source):</p> <ol> <li> <p>Enable ssh support in <code>gpg-agent</code> config:</p> bashfish <pre><code>cat &lt;&lt; HEREDOC &gt; ~/.gnupg/gpg-agent.conf\nenable-ssh-support\n# default-cache-ttl 60 # Change if you wish\n# max-cache-ttl 120    # Change if you wish\nHEREDOC\n</code></pre> <pre><code>echo \"enable-ssh-support\n# default-cache-ttl 60 # Change if you wish\n# max-cache-ttl 120    # Change if you wish\" &gt; ~/.gnupg/gpg-agent.conf\n</code></pre> </li> <li> <p>Restart <code>gpg-agent</code>: <code>gpgconf --kill gpg-agent</code></p> </li> <li> <p>Specify which key should be used for ssh: add keygrip of the \u201cAuth GPG key\u201d to <code>~/.gnupg/sshcontrol</code>:</p> <ul> <li>Get its keygrip: <code>gpg -K --with-keygrip</code></li> <li>Put it in ~/.gnupg/sshcontrol: <code>echo 87A342B1561ADD416AD21... &gt; ~/.gnupg/sshcontrol</code></li> </ul> </li> <li> <p>Tell SSH to use <code>gpg-agent</code>\u2019s socket:</p> bashfish ~/.bashrc<pre><code># This makes ssh-agent use gpg-agent (to lookup available keys).\n# More info see here: https://opensource.com/article/19/4/gpg-subkeys-ssh\nexport SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)\ngpgconf --launch gpg-agent\n</code></pre> ~/.config/fish/config.fish<pre><code># This makes ssh-agent use gpg-agent (to lookup available keys).\n# More info see here: https://opensource.com/article/19/4/gpg-subkeys-ssh\nset -x SSH_AUTH_SOCK (gpgconf --list-dirs agent-ssh-socket)\ngpgconf --launch gpg-agent\n</code></pre> </li> </ol> </li> <li> <p>Verify it works. <code>ssh-add -L</code> should show you public ssh-keys (backed by Yubikey &amp; gpg).</p> </li> </ol>"},{"location":"Linux/apps/strace/","title":"strace","text":"<p>Start with: <code>sudo strace -fp (pgrep -u (id -u) -x process_name_here) -s 1024</code></p>"},{"location":"Linux/apps/strace/#fds","title":"FD\u2019s","text":"<ul> <li>Process -&gt; FD: Given a process you can list all its FDs: <code>sudo lsof -p (pgrep -u (id -u) -x process_name_here)</code>.</li> <li>FD -&gt; inode: Once you have FD, there is inode in the <code>NODE</code> column.</li> <li> <p>inode -&gt; remote end-point: Given the inode, you can run lsof again and check what other processes has the same inode.</p> <p>Alternatively, you can use <code>find</code>: <code>sudo find / -inum 117473778 2&gt;/dev/null</code> to find a file by inode.</p> </li> </ul>"},{"location":"Linux/apps/strace/#forks","title":"Forks","text":"<p>Track only creation of new processes: <code>strace -ftts 4096 -e trace=fork,vfork,clone,execve ytest</code></p>"},{"location":"Linux/apps/systemd/","title":"systemd","text":""},{"location":"Linux/apps/systemd/#must-reads","title":"Must reads","text":"<p>systemd by example:</p> <ul> <li>Part 2: Dependencies, describes:<ul> <li>states of units</li> <li>Ordering dependencies (before, after)</li> <li>Requirement dependencies (wants, requires, conflicts)</li> </ul> </li> <li>Part 3: Defining services, describes:<ul> <li>user</li> <li>environment</li> <li>how different unit types are started (what \u201cstarted\u201d actually is from the point of view of systemd)</li> <li>different types of units</li> </ul> </li> </ul> <p>Running Services After the Network is up</p>"},{"location":"Linux/apps/systemd/#before-vs-after","title":"Before= vs After=","text":"<p>These directives establish an order in which units are started or stopped. If you think of units as nodes in a graph, <code>Before=</code> and <code>After=</code> specify direction of an edge between nodes (units). Edge itself corresponds to activation (start) or deactivation (stop).</p> <p>If we say <code>UnitA.service</code> has <code>After=UnitB.service</code> in its unit file, this creates a directed edge from <code>UnitB</code> to <code>UnitA</code>, meaning <code>UnitA</code> should be started after <code>UnitB</code>.</p> <p>It\u2019s important to note that these directives only set up ordering relationships and don\u2019t cause the units mentioned to be activated or deactivated, which is why, there are:</p>"},{"location":"Linux/apps/systemd/#wants-and-requires","title":"Wants= and Requires=","text":"<p>If <code>UnitA.service</code> <code>Wants=UnitB.service</code>, it means that if <code>UnitA</code> is activated, systemd will also attempt to activate <code>UnitB</code> (if it isn\u2019t already active). However, if <code>UnitB</code> fails to activate, <code>UnitA</code> will still be started. In other words, this sets up a \u201cweak\u201d dependency edge in the graph from <code>UnitA</code> to <code>UnitB</code>.</p> <p>If <code>UnitA.service</code> <code>Requires=UnitB.service</code>, it\u2019s a stronger version of <code>Wants=</code>. Now if <code>UnitB</code> fails to start, <code>UnitA</code> will not be started either.</p>"},{"location":"Linux/apps/systemd/#summary","title":"Summary","text":"<ul> <li><code>Wants= and Requires=</code> introduces an undirected edge between units. It means, that if one of them is   activated, the other will be too, but the order is   unspecified.</li> <li><code>Before= vs After=</code> creates a directed edge between units, but it does so, without forcing systemd into   activating its dependency. If unit <code>A</code> specified <code>After=X</code>, without using Wants=/Requires=, and then   we start the unit A, then systemd will not start unit X. If unit X happens to start due to some reason,   then unit <code>A</code> will be started too.</li> </ul> <p>In other words:</p> <ul> <li><code>Wants=</code> and <code>Requires=</code> can be used without <code>Before=</code> and <code>After=</code>, and this would imply that the order   in which these units start is not determined. They will be started in parallel, if possible.</li> <li><code>Before=</code> and <code>After=</code> can be used without <code>Wants=</code> or <code>Requires=</code> as well. This might be useful in cases   where you know that another service may start a certain unit, and you want to ensure that,   if that happens, your unit starts before or after it. But without a <code>Wants=</code> or <code>Requires=</code> directive,   the <code>Before=</code> and <code>After=</code> directives by themselves won\u2019t cause the other unit to start.</li> </ul>"},{"location":"Linux/apps/systemd/#partof","title":"PartOf=","text":"<p>This directive creates a relationship where if the unit specified in <code>PartOf=</code> is stopped or restarted, then the unit with the <code>PartOf=</code> directive is also stopped or restarted.</p>"},{"location":"Linux/performance/010.performance/","title":"Performance","text":""},{"location":"Linux/performance/010.performance/#resources","title":"Resources","text":"<ul> <li>easyperf.net</li> </ul>"},{"location":"Linux/performance/010.performance/#getting-fairconsistent-results","title":"Getting fair/consistent results","text":"<ul> <li>Disable turboboost</li> <li>Disable hyper threading</li> <li>Set scaling_governor to \u2018performance\u2019</li> <li>Set cpu affinity</li> <li>Set process priority</li> <li>Drop file system cache</li> <li>Disable address space randomization</li> </ul>"},{"location":"Linux/performance/010.performance/#methodologies-to-discover-bottlenecks","title":"Methodologies to discover bottlenecks","text":"<ul> <li>TMAM: Top-Down performance analysis methodology:<ul> <li>easyperf.net</li> <li>toplev manual</li> </ul> </li> </ul>"},{"location":"Linux/performance/010.performance/#huge-pages","title":"Huge-pages","text":"<p>How to reliably allocate and use huge-pages in Linux:</p> <ul> <li>https://mazzo.li/posts/check-huge-page.html</li> <li>https://www.baeldung.com/linux/huge-pages-management</li> <li>https://www.lukas-barth.net/blog/linux-allocating-huge-pages/</li> </ul>"},{"location":"Linux/performance/010.performance/#hardware-effects","title":"Hardware effects","text":"<p>Kobzol/hardware-effects illustrates effects of the following hardware quirks:</p> <ul> <li>4k aliasing</li> <li>bandwidth saturation</li> <li>branch misprediction</li> <li>branch target misprediction</li> <li>cache conflicts</li> <li>cache/memory hierarchy bandwidth</li> <li>data dependencies</li> <li>denormal floating point numbers</li> <li>DRAM refresh interval</li> <li>false sharing</li> <li>hardware prefetching</li> <li>hardware store elimination</li> <li>memory-bound program</li> <li>misaligned accesses</li> <li>non-temporal stores</li> <li>software prefetching</li> <li>store buffer capacity</li> <li>write combining</li> </ul>"},{"location":"Linux/performance/020.concurrency/","title":"Concurrency","text":""},{"location":"Linux/performance/020.concurrency/#resources","title":"Resources","text":"<ul> <li>1024cores</li> <li>rigtorp/awesome-lockfree</li> </ul>"},{"location":"Linux/performance/030.memory/","title":"Memory usage profiling","text":"<p>You can find out what function allocated what amount of memory.</p>"},{"location":"Linux/performance/030.memory/#tcmalloc","title":"tcmalloc","text":""},{"location":"Linux/performance/030.memory/#build-with-tcmalloc","title":"Build with tcmalloc","text":"<p>cmake example: <pre><code>find_library(TCMALLOC_LIB NAMES tcmalloc)\nif(TCMALLOC_LIB)\n   message(\"Found TCMALLOC_LIB: ${TCMALLOC_LIB}\")\nelse()\n   message(FATAL_ERROR \"${TCMALLOC_LIB} library not found\")\nendif()\nlink_libraries(${TCMALLOC_LIB})\n</code></pre></p>"},{"location":"Linux/performance/030.memory/#run-your-app","title":"Run your app","text":"<p>Start your application with the environment variable set to a filename (to which <code>tcmalloc</code> will dump the graph of allocations):</p> <pre><code>HEAPPROFILE=mybin.hprof ./google_ngram\n</code></pre>"},{"location":"Linux/performance/030.memory/#view-report","title":"View report","text":"<p>The command above will produce files like: <code>mybin.hprof.0132.heap</code>, it then can be viewed with:</p> <pre><code>google-pprof --gv google_ngram mybin.hprof.0132.heap\n</code></pre>"},{"location":"Linux/performance/040.asm/","title":"ASM","text":""},{"location":"Linux/performance/040.asm/#registers","title":"Registers","text":"<ul> <li>rip: shows the memory address of the instruction that the CPU is executing.</li> <li>rbx is often used as a base pointer for various data structures or objects.</li> </ul> <p>Calling conventions:</p> <ul> <li> <p>Passing parameters:</p> <ul> <li>rdi, rsi, rdx, rcx, r8, and r9: used to pass first six integer or pointer arguments</li> <li>xmm0 through xmm7: used to pass the first eight floating-point arguments</li> <li>Additional arguments are passed on the stack, pushed onto the stack in reverse order (i.e., the last argument   is pushed first).</li> </ul> </li> <li> <p>Return value:</p> <ul> <li>rax: used to pass integer and pointer return values</li> <li>xmm0: used to pass floating-point return values</li> <li>RDI is used to return large structures or other data types that don\u2019t fit in the RAX register. The caller   allocates space for this memory and passes its address in the RDI register as a hidden first argument;   thus, functions returning these types appear to the callee as if they have an additional argument.</li> </ul> </li> <li> <p>Caller-saved and Callee-saved Registers:</p> <ul> <li>rax, rcx, rdx, rdi, rsi, r8, r9, r10, r11, and the xmm: are caller-saved   registers. If a calling function relies on the value of these registers to be the same after it calls another   function, it has to save them (typically on the stack) before the call and restore them after the call.</li> <li>rbx, rsp, rbp, r12, r13, r14, r15: callee-saved registers. If a called function   (callee) wants to update/change these registers, it has to save the original values (again, typically on   the stack) and restore them before returning.</li> </ul> </li> <li> <p>Stack Frame:</p> <ul> <li> <p>rbp: The register is often used as the frame pointer, which points to the base of the current function\u2019s   stack frame. This convention makes it easier to reference local variables and function arguments, especially   in debugging. However, modern compilers often use frame pointer omission (FPO) optimization in which case the   RBP register is freed up for general use, and the stack pointer (rsp) is used directly to reference local   variables.</p> </li> <li> <p>rsp: The register always points to the top of the stack (keep in mind the stack grows downwards on x86_64).</p> </li> </ul> </li> </ul>"},{"location":"Linux/performance/050.Gregg/","title":"Brendan Gregg","text":"vmstat output description <p>Procs (Processes)</p> <ul> <li><code>r</code>: The number of runnable processes (running or waiting for run time).</li> <li><code>b</code>: The number of processes in uninterruptible sleep. These are processes that are waiting for some I/O access,   like disk or network activity.</li> </ul> <p>Memory</p> <ul> <li><code>swpd</code>: The amount of virtual memory used (in KB).</li> <li><code>free</code>: The amount of idle memory (in KB).</li> <li><code>buff</code>: The amount of memory used as buffers (in KB).</li> <li><code>cache</code>: The amount of memory used as cache (in KB).</li> </ul> <p>Swap</p> <ul> <li><code>si</code>: Amount of memory swapped in from disk (in KB per second).</li> <li><code>so</code>: Amount of memory swapped out to disk (in KB per second).</li> </ul> <p>I/O</p> <ul> <li><code>bi</code>: Blocks received from a block device (blocks input per second).</li> <li><code>bo</code>: Blocks sent to a block device (blocks output per second).</li> </ul> <p>System</p> <ul> <li><code>in</code>: The number of interrupts per second, including the clock.</li> <li><code>cs</code>: The number of context switches per second.</li> </ul> <p>CPU</p> <ul> <li><code>us</code>: User time. The time the CPU has spent running users\u2019 processes that are not niced.</li> <li><code>sy</code>: System time. The time the CPU has spent running the kernel and its processes.</li> <li><code>id</code>: Idle time. The time the CPU has spent doing nothing.</li> <li><code>wa</code>: Wait time. The time the CPU has spent waiting for I/O to complete.</li> <li><code>st</code>: Steal time. The amount of CPU \u2018stolen\u2019 from this virtual machine by the hypervisor for other tasks   (such as running another virtual machine).</li> </ul> sar -q output description <ul> <li><code>runq-sz</code>: This is the run queue size (the number of tasks waiting for run time, the number of processes that are   currently executing or waiting to execute).</li> <li><code>plist-sz</code>: This is the number of tasks in the task list: the total number of tasks managed by the Linux scheduler.   This includes running tasks, sleeping tasks, stopped tasks, and zombies.</li> </ul>"},{"location":"Linux/performance/050.Gregg/#use-method-checklist","title":"USE Method &amp; Checklist","text":"<p>Terminology definitions:</p> <ul> <li>resource: all physical server functional components (CPUs, disks, busses, \u2026) [1]</li> <li>utilization: the average time that the resource was busy servicing work [2]</li> <li>saturation: the degree to which the resource has extra work which it can\u2019t service, often queued</li> <li>errors: the count of error events</li> </ul>"},{"location":"Linux/performance/050.Gregg/#cpu","title":"CPU","text":"utilizationsaturationerrors <ul> <li>system-wide:<ul> <li><code>vmstat 1</code>, sum: <code>us</code> + <code>sy</code> + <code>st</code></li> <li><code>sar -u</code>, sum fields except <code>%idle</code> and <code>%iowait</code></li> <li><code>dstat -c</code>, sum fields except <code>idl</code> and <code>wai</code>;</li> </ul> </li> <li>per-cpu:<ul> <li><code>mpstat -P ALL 1</code>, sum fields except <code>%idle</code> and <code>%iowait</code></li> <li><code>sar -P ALL</code>, same as mpstat</li> </ul> </li> <li>per-process:<ul> <li><code>top</code>, check: <code>%CPU</code></li> <li><code>htop</code>, check: <code>CPU%</code></li> <li><code>ps -o pcpu</code></li> <li><code>pidstat 1</code>, check: <code>%CPU</code></li> </ul> </li> <li>per-kernel-thread:<ul> <li><code>top</code>/<code>htop</code> (<code>K</code> to toggle), where <code>VIRT == 0</code> (heuristic)</li> </ul> </li> </ul> <ul> <li>system-wide:<ul> <li><code>vmstat 1</code>, where <code>r</code> &gt; CPU count</li> <li><code>sar -q</code>, where <code>runq-sz</code> &gt; CPU count</li> <li><code>dstat -p</code>, where <code>run</code> &gt; CPU count</li> </ul> </li> <li>per-process:<ul> <li><code>/proc/PID/schedstat</code> 2nd field (sched_info.run_delay);</li> <li><code>perf sched latency</code> (shows \u201cAverage\u201d and \u201cMaximum\u201d delay per-schedule)</li> <li>dynamic tracing, eg, SystemTap schedtimes.stp \u201cqueued(us)</li> </ul> </li> </ul> <ul> <li>perf (LPE) if processor specific error events (CPC) are available eg, AMD64\u2019s \u201c04Ah Single-bit ECC Errors Recorded by Scrubber\u201d</li> </ul>"},{"location":"Linux/performance/050.Gregg/#memory","title":"Memory","text":"utilizationsaturationerrors <ul> <li>system-wide:<ul> <li><code>free -m</code>, check: <code>Mem:</code> (main memory), <code>Swap:</code> (virtual memory)</li> <li><code>vmstat 1</code>, check: <code>free</code> (main memory), <code>swap</code> (virtual memory)</li> <li><code>sar -r</code>, check: <code>%memused</code></li> <li><code>dstat -m</code>, check: <code>free</code></li> <li><code>slabtop -s c</code> for kmem slab usage</li> </ul> </li> <li>per-process:<ul> <li><code>top</code>/<code>htop</code>, <code>RES</code> (resident main memory), <code>VIRT</code> (virtual memory), <code>Mem</code> for system-wide summary</li> </ul> </li> </ul> <ul> <li>system-wide:<ul> <li><code>vmstat 1</code>, <code>si</code>/<code>so</code> (swapping)</li> <li><code>sar -B</code>, <code>pgscank</code> + <code>pgscand</code> (scanning)</li> <li><code>sar -W</code></li> </ul> </li> <li>per-process:<ul> <li>10th field (<code>min_flt</code>) from <code>/proc/PID/stat</code> for minor-fault rate, or dynamic tracing [5]</li> <li>OOM killer: <code>dmesg | grep killed</code></li> </ul> </li> </ul> <ul> <li><code>dmesg</code> for physical failures</li> <li>dynamic tracing, eg, SystemTap uprobes for failed malloc()s</li> </ul>"},{"location":"Linux/performance/050.Gregg/#network","title":"Network","text":"utilizationsaturationerrors <ul> <li><code>sar -n DEV 1</code>, <code>rxKB/s</code>/max <code>txKB/s</code>/max</li> <li><code>ip -s link</code>, RX/TX tput / max bandwidth</li> <li><code>/proc/net/dev</code>, <code>bytes</code> RX/TX tput/max</li> <li><code>nicstat</code>, <code>%Util</code> [6]</li> </ul> <ul> <li><code>ifconfig</code>, <code>overruns</code>, <code>dropped</code></li> <li><code>netstat -s</code>, <code>segments retransmited</code></li> <li><code>sar -n EDEV</code>, drop and fifo metrics</li> <li><code>/proc/net/dev</code>, RX/TX <code>drop</code></li> <li><code>nicstat</code> <code>Sat</code> [6]</li> <li>dynamic tracing for other TCP/IP stack queueing [7]</li> </ul> <ul> <li><code>ifconfig</code>, <code>errors</code>, <code>dropped</code></li> <li><code>netstat -i</code>, <code>RX-ERR</code>/<code>TX-ERR</code></li> <li><code>ip -s link</code>, <code>errors</code></li> <li><code>sar -n EDEV</code>, <code>rxerr/s</code> <code>txerr/s</code></li> <li><code>/proc/net/dev</code>, <code>errs</code>, <code>drop</code></li> <li>extra counters may be under /sys/class/net/\u2026</li> <li>dynamic tracing of driver function returns 76]</li> </ul>"},{"location":"Linux/performance/050.Gregg/#storage-device-io","title":"Storage device I/O","text":"utilizationsaturationerrors <ul> <li>system-wide:<ul> <li><code>iostat -xz 1</code>, <code>%util</code></li> <li><code>sar -d</code>, <code>%util</code></li> </ul> </li> <li>per-process:<ul> <li><code>iotop</code></li> <li><code>pidstat -d</code></li> <li><code>/proc/PID/sched</code> <code>se.statistics.iowait_sum</code></li> </ul> </li> </ul> <ul> <li><code>iostat -xnz 1</code>, <code>avgqu-sz</code> &gt; 1, or high <code>await</code></li> <li><code>sar -d</code> same</li> <li>LPE block probes for queue length/latency</li> <li>dynamic/static tracing of I/O subsystem (incl. LPE block probes)</li> </ul> <ul> <li>smartctl</li> <li>dynamic/static tracing of I/O subsystem response codes [8]</li> </ul>"},{"location":"Linux/performance/110.tools-orbit/","title":"Tools: orbit","text":"<p>Orbit is a Google\u2019s C/C++ profiler.</p>"},{"location":"Linux/performance/110.tools-orbit/#building","title":"Building","text":"<p>Install Qt: <pre><code>sudo apt update &amp;&amp; sudo DEBIAN_FRONTEND=noninteractive apt -y install \"libqt5*-dev\" \"qt*5-dev\"\n</code></pre></p> <p>For the script below to finish its work, we have to add path where conan will be installed into PATH:</p> old fishnew fishbash <pre><code>set -U fish_user_paths $HOME/.local/bin $fish_user_paths\n</code></pre> <pre><code>fish_add_path $HOME/.local/bin\n</code></pre> <pre><code>export ...\n</code></pre> <p>Build:</p> <pre><code>repo$ ./bootstrap-orbit.sh --dont-compilesd\nrepo$ ./build.sh clang12_relwithdebinfo\n</code></pre>"},{"location":"Linux/performance/110.tools-orbit/#using","title":"Using","text":"<pre><code>sudo $HOME/devel/orbit/build_clang12_relwithdebinfo/bin/OrbitService\n$HOME/devel/orbit/build_clang12_relwithdebinfo/bin/Orbit --local\n</code></pre>"},{"location":"Linux/performance/120.tools-perf/","title":"perf","text":"<p>Brendan Gregg\u2019s blog about perf.</p>"},{"location":"Linux/performance/120.tools-perf/#prerequisites","title":"Prerequisites","text":"<ul> <li>If you want to see kernel symbols: <code>sudo sysctl -w kernel.kptr_restrict=0</code>.</li> <li>You probably also need to install the following packages:   <code>sudo apt-get install libelf-dev libunwind-dev libaudit-dev</code></li> <li>Make sure you use these flags during compilation: <code>-g2 -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer</code></li> <li>Make sure you run <code>perf script</code> with <code>sudo</code> (as it needs access to kallsyms).</li> </ul>"},{"location":"Linux/performance/120.tools-perf/#counting-events-perf-stat-e","title":"Counting events \u2014 <code>perf stat -e</code>","text":"<p>It can count various (primarily cpu) events.</p> <ul> <li>List all events: <code>perf list</code>.</li> <li>Example: <code>perf stat -e cycles,instructions,cache-references,cache-misses,bus-cycles -a sleep 10</code>.</li> </ul>"},{"location":"Linux/performance/120.tools-perf/#profiling-sampling-perf-top-perf-record","title":"Profiling / Sampling \u2014 <code>perf top</code> &amp; <code>perf record</code>","text":""},{"location":"Linux/performance/120.tools-perf/#perf-top","title":"perf top","text":"<p>You can use <code>perf</code> without recording <code>perf.data</code> (similarly to <code>top</code>/<code>htop</code>):</p> <p><pre><code>sudo perf top -t 739201 -d 5 --call-graph fp\n</code></pre> where:</p> <ul> <li><code>-t</code> \u2014 thread id, or <code>-p (pgrep -f \"^/home/.*/bin/worker \")</code> \u2014 process id.</li> <li><code>-d</code> \u2014 update frequency in seconds.</li> <li><code>--call-graph dwarf</code> \u2014 collect and show backtraces.</li> </ul>"},{"location":"Linux/performance/120.tools-perf/#record-perfdata","title":"Record <code>perf.data</code>","text":"<p>Alternatively, you can record <code>perf.data</code> and then investigate it.</p>"},{"location":"Linux/performance/120.tools-perf/#automatically-start-and-finish","title":"Automatically start and finish","text":"<p>Run the command below in one terminal. It will wait for \u201csignal\u201d to start recording, and then for another \u201csignal\u201d to stop recording).</p> BashFish <pre><code>nc -l 12345; echo \"Starting\"; perf record -F 2987 --call-graph fp -p `pgrep -f \"ybd/worker\"` -g &amp; PID=$!; echo \"Waiting for cmd to finish $PID...\"; nc -l 12345; kill -15 $PID\n</code></pre> <pre><code>nc -l 12345; echo \"Starting\"; sudo perf record -F 2987 --call-graph fp -p (pgrep -f \"^/home/dimanne/devel/build/.*/bin/worker\") -g &amp; set PID (jobs -l -p | head -n 2); echo \"Waiting for cmd to finish $PID...\"; nc -l 12345; sudo kill -15 $PID\n</code></pre> <p>In a second terminal, run the command wrapped in <code>nc</code> (the <code>nc</code> will signal to the first command to start and stop recording):</p> nc without <code>-q</code>nc with <code>-q</code> <pre><code>echo \"\" | nc 192.168.10.11 12345; ybsql -d yellowbrick_test -c \"...\" &gt; /dev/null; echo \"\" | nc 192.168.10.11 12345\n</code></pre> <pre><code>echo \"\" | nc -q 0 172.17.0.1 12345; ybsql -d yellowbrick_test -c \"...\" &gt; /dev/null; echo \"\" | nc -q 0 172.17.0.1 12345\n</code></pre> <p>After it finishes, <code>perf record</code> started on the first terminal should produce <code>perf.data</code> file.</p>"},{"location":"Linux/performance/120.tools-perf/#cpu-counters","title":"CPU counters","text":"<p>Alternatively, it is possible to sample/record a specific counter: <pre><code># Sample CPU stack traces, once every 10,000 Level 1 data cache misses, for 5 seconds:\nperf record -e L1-dcache-load-misses -c 10000 -ag -- sleep 5\n</code></pre></p>"},{"location":"Linux/performance/120.tools-perf/#tracing-probes-perf-probe-add","title":"Tracing / Probes \u2014 <code>perf probe --add</code>","text":"<p>The main idea behind dynamic tracing is that sometimes there is no existing coutners / function, so you can add your own probes in both Linux kernel and user code, and then use tracing (<code>perf record -e</code>). You can add them dynamically (without recompilation of code) as well as statically (code has to be modified).</p> <p>See <code>perf-probe</code> man for more info.</p>"},{"location":"Linux/performance/120.tools-perf/#collect-perfdata","title":"Collect <code>perf.data</code>","text":"<p>Let\u2019s say our binary/library that has a symbol that we are interested in, is:</p> BashFish <pre><code>lib=$HOME/devel/build/archimedes-qtc-Gen2/lib/libkernelLib.so\n</code></pre> <pre><code>set lib $HOME/devel/build/archimedes-qtc-Gen2/lib/libkernelLib.so\n</code></pre> <p>Firstly, find symbol name that we would like to trace. In case of C programs it easy. In the case of C++ we ask perf to dump all symbols in mangled form: <pre><code>$ perf probe --exec $lib --funcs --no-demangle --filter='*' | grep ArenaAllocator | grep allocate\n...\n_ZN14ArenaAllocator8allocateEm\n</code></pre></p> <p>Then we can inspect:</p> available variablesas well as code <pre><code>$ perf probe --exec $lib -V _ZN14ArenaAllocator8allocateEm\nAvailable variables at _ZN14ArenaAllocator8allocateEm\n        @&lt;allocate+0&gt;\n                 (unknown_type  ptr\n                ArenaAllocator* this\n                size_t  size\n</code></pre> <pre><code>$ perf probe --exec $lib -L _ZN14ArenaAllocator8allocateEm\n&lt;_ZN14ArenaAllocator8allocateEm@/home/dimanne/devel/ybd/archimedes/kernel/memory/ArenaAllocator.cc:0&gt;\n      0  void *ArenaAllocator::allocate(size_t size) {\n      1      assert(size != 0);\n      2      ...\n</code></pre> <p>And finally add probe: <pre><code>$ sudo perf probe --exec $lib --no-demangle --add \"_ZN14ArenaAllocator8allocateEm size\"\nTarget program is compiled without optimization. Skipping prologue.\nProbe on address 0x2fefa0 to force probing at the function entry.\n\nAdded new event:\n  probe_libkernelLib:_ZN14ArenaAllocator8allocateEm (on _ZN14ArenaAllocator8allocateEm in /home/dimanne/devel/build/archimedes-qtc-Gen2/lib/libkernelLib.so with size)\n\nYou can now use it in all perf tools, such as:\n        perf record -e probe_libkernelLib:_ZN14ArenaAllocator8allocateEm -aR sleep 1\n</code></pre></p> <p>And then just record data is it suggested in the output above: <code>perf record -e probe_libkernelLib:_ZN14ArenaAllocator8allocateEm -aR sleep 1</code>.</p> <p>Cleanup: <pre><code>sudo perf probe --list\nsudo perf probe --del probe_libkernelLib:_ZN14ArenaAllocator8allocateEm\n</code></pre></p>"},{"location":"Linux/performance/120.tools-perf/#viewing-visualising-of-perfdata","title":"Viewing / Visualising of <code>perf.data</code>","text":"Distribution of sizesHistogram of sizesLargest allocationsTotal bytes (sum) <pre><code>$ perf script | awk 'match($0, /.*size=(.*)$/, a) {print strtonum(a[1]) }' | sort | uniq -c | sort -rnk 1 | tr -s ' ' | awk '{print $1 \" x \" $2 \" = \" strtonum($1) * strtonum($2)}'\n87829 x 160 = 14052640\n18607 x 136 = 2530552\n4640 x 264 = 1224960\n2319 x 128 = 296832\n1600 x 262144 = 419430400\n1569 x 48 = 75312\n</code></pre> <pre><code>$ perf script | awk 'match($0, /.*size=(.*)$/, a) {print strtonum(a[1]) }' | sort | uniq -c | sort -rn | head -40 | awk '!max {max=$1} {r=\"\"; i = 80 * $1 / max; while(--i &gt; 0) r=r\"#\"; printf \"%-75s %s %s\",$0,r,\"\\n\";}'\n87829 160                                                                 ###############################################################################\n18607 136                                                                 ################\n 4640 264                                                                 ####\n 2319 128                                                                 ##\n 1600 262144                                                              #\n 1569 48                                                                  #\n 1528 40                                                                  #\n 1463 24                                                                  #\n</code></pre> <pre><code>$ perf script | awk 'match($0, /.*size=(.*)$/, a) {print strtonum(a[1]) }' | sort | uniq -c | sort -rnk 1 | tr -s ' ' | awk '{print $1 \" x \" $2 \" = \" strtonum($1) * strtonum($2)}' | sort -rnk 5\n1600 x 262144 = 419430400\n87829 x 160 = 14052640\n4 x 3245125 = 12980500\n4 x 1366344 = 5465376\n2 x 2097152 = 4194304\n</code></pre> <pre><code>$ perf script | awk 'BEGIN {total = 0;} match($0, /.*size=(.*)$/, a) { total += strtonum(a[1]); } END {print total}'\n981479078\n</code></pre>"},{"location":"Linux/performance/120.tools-perf/#uis","title":"UIs","text":"<p>Source</p> <ul> <li> <p>pprof Web UI, Graphviz UI, FlameChart UI, Disassembly UI</p> </li> <li> <p>perf report: Use one of the:     <pre><code>perf report\nperf report --stdio\nperf report -g 'graph,0.5,caller'\n</code></pre></p> </li> <li> <p>perf annotate: <code>perf annotate</code></p> </li> <li> <p>Firefox Profiler: <code>perf script -F +pid &gt; /tmp/test.perf</code></p> </li> <li> <p>Speedscope</p> </li> <li> <p>Flamegraph</p> BashFish <pre><code>bn=\"gen2-worker5-F2987\"; mw=0.01; suffix=\"$mw\"; sudo perf script | ./FlameGraph/stackcollapse-perf.pl &gt; $bn.perf.data.folded; \\\ncat $bn.perf.data.folded | ./FlameGraph/flamegraph.pl --minwidth $mw --width 2250 --title \"$bn $suffix\" --reverse --inverted &gt; ./$bn-$suffix.perf-icicle.svg &amp;&amp; \\\ncat $bn.perf.data.folded | ./FlameGraph/flamegraph.pl --minwidth $mw --width 2250 --title \"$bn $suffix\" &gt; ./$bn-$suffix.perf-flame.svg\n</code></pre> <pre><code>set bn \"gen2-F2987.1\"; set mw 0.01; set suffix \"$mw\"; sudo perf script | ~/devel/FlameGraph/stackcollapse-perf.pl &gt; $bn.perf.data.folded; \\\ncat $bn.perf.data.folded | ~/devel/FlameGraph/flamegraph.pl --minwidth $mw --width 2250 --title \"$bn $suffix\" --reverse --inverted &gt; ./$bn-$suffix.perf-icicle.svg &amp;&amp; \\\ncat $bn.perf.data.folded | ~/devel/FlameGraph/flamegraph.pl --minwidth $mw --width 2250 --title \"$bn $suffix\" &gt; ./$bn-$suffix.perf-flame.svg\n</code></pre> What is FlameGraph? <ul> <li>Read more about FlameGraph here.</li> <li>Get flame graph: <code>git clone git@github.com:brendangregg/FlameGraph.git</code></li> <li>You probably want to make this adjustment (otherwise it collapses different template C++ functions, which should not be collapsed):</li> </ul> <pre><code>diff --git a/stackcollapse-perf.pl b/stackcollapse-perf.pl\nindex fd3c78e..afc7be9 100755\n--- a/stackcollapse-perf.pl\n+++ b/stackcollapse-perf.pl\n@@ -79,8 +79,8 @@ my $include_pname = 1;        # include process names in stacks\nmy $include_pid = 0;   # include process ID with process name\nmy $include_tid = 0;   # include process &amp; thread ID with process name\nmy $include_addrs = 0; # include raw address where a symbol can't be found\n-my $tidy_java = 1;     # condense Java signatures\n-my $tidy_generic = 1;  # clean up function names a little\n+my $tidy_java = 0;     # condense Java signatures\n+my $tidy_generic = 0;  # clean up function names a little\nmy $target_pname;      # target process name from perf invocation\nmy $event_filter = \"\";    # event type filter, defaults to first encountered event\nmy $event_defaulted = 0;  # whether we defaulted to an event (none provided)\n</code></pre> </li> <li> <p>Inferno-Flamegraph / FlameGraph-rs</p> </li> <li> <p>FlameScope</p> </li> <li> <p>perf timechart</p> </li> <li> <p>KDAB Hotspot</p> </li> </ul>"}]}